[
  {
    "id": "Flicking()",
    "longname": "Flicking",
    "name": "Flicking",
    "kind": "constructor",
    "memberof": "Flicking",
    "params": [
      {
        "description": "A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n<ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>",
        "name": "root",
        "type": {
          "names": [
            "$ts:HTMLElement | string<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      },
      {
        "description": "An option object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>",
        "name": "options",
        "optional": true,
        "defaultvalue": "{}",
        "type": {
          "names": [
            "$ts:Partial<FlickingOptions><file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "examples": [
      "```ts\nimport Flicking from \"@egjs/flicking\";\n\n// Creating new instance of Flicking with HTMLElement\nconst flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n\n// Creating new instance of Flicking with CSS selector\nconst flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n```"
    ],
    "returns": [],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n|{@link Constants.ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n<ko>\n\n|code|조건|\n|---|---|\n|{@link Constants.ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n|{@link Constants.ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n\n</ko>"
      }
    ],
    "order": 38
  },
  {
    "id": "FlickingError()",
    "longname": "FlickingError",
    "name": "FlickingError",
    "kind": "constructor",
    "memberof": "FlickingError",
    "params": [
      {
        "description": "Error message<ko>에러 메시지</ko>",
        "name": "message",
        "type": {
          "names": [
            "$ts:string<file>/home/wn/egjs-flicking/src/core/FlickingError.ts</file>"
          ]
        }
      },
      {
        "description": "Error code<ko>에러 코드</ko>",
        "name": "code",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/FlickingError.ts</file>"
          ]
        }
      }
    ],
    "examples": [
      "```\nimport Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\ntry {\n  const flicking = new Flicking(\".flicking-viewport\")\n} catch (e) {\n  if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n    console.error(\"Element not found\")\n  }\n}\n```"
    ],
    "returns": [],
    "order": 65
  },
  {
    "id": "Viewport()",
    "longname": "Viewport",
    "name": "Viewport",
    "kind": "constructor",
    "memberof": "Viewport",
    "params": [
      {
        "description": "A viewport element<ko>뷰포트 엘리먼트</ko>",
        "name": "el",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/core/Viewport.ts</file>"
          ]
        }
      }
    ],
    "returns": [],
    "order": 70
  },
  {
    "sort": 9999999,
    "id": "FlickingOptions",
    "longname": "FlickingOptions",
    "name": "FlickingOptions",
    "kind": "interface",
    "scope": "global",
    "params": [
      {
        "type": {
          "names": [
            "\"prev\"",
            "\"center\"",
            "\"next\"",
            "string",
            "number",
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "\"center\"",
        "description": "The reference position of the hanger in the viewport, which hangs panel anchors should be stopped at.<br/>It should be provided in px or % value of viewport size.<br/>You can combinate those values with plus/minus sign.<br/>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br/>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br/>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>",
        "name": "options.align"
      },
      {
        "type": {
          "names": [
            "string",
            "number"
          ]
        },
        "optional": true,
        "name": "options.align.panel"
      },
      {
        "type": {
          "names": [
            "string",
            "number"
          ]
        },
        "optional": true,
        "name": "options.align.camera"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Index of the panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>",
        "name": "options.defaultIndex"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "\"50%\"",
        "description": "The reference position of the anchor in panels, which can be hanged by viewport hanger.<br/>It should be provided in px or % value of panel size.<br/>You can combinate those values with plus/minus sign.<br/>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br/>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br/>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>",
        "name": "options.anchor"
      },
      {
        "type": {
          "names": [
            "$ts:FlickingOptions[\"deceleration\"]"
          ]
        },
        "optional": true,
        "defaultvalue": 0.0075,
        "description": "Deceleration value for panel movement animation for animation triggered by manual user input. A higher value means a shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>",
        "name": "options.deceleration"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "The direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>",
        "name": "options.horizontal"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Enables circular mode, which connects first/last panel for continuous scrolling.<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>",
        "name": "options.circular"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Enables infinite mode, which can automatically trigger needPanel until reaching the last panel's index reaches the lastIndex.<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>",
        "name": "options.infinite"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>",
        "name": "options.infiniteThreshold"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "Infinity",
        "description": "Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when the event's panel index is greater than it.<br/>Also, if the last panel's index reached a given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br/>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>",
        "name": "options.lastIndex"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 40,
        "description": "Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change the current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>",
        "name": "options.threshold"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 100,
        "description": "Duration of the panel movement animation. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>",
        "name": "options.duration"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "x => 1 - Math.pow(1 - x, 3)",
        "description": "An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>",
        "name": "options.panelEffect"
      },
      {
        "type": {
          "names": [
            "Array<string>"
          ]
        },
        "optional": true,
        "defaultvalue": "[\"touch\",\"mouse\"]",
        "description": "Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>",
        "name": "options.inputType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 45,
        "description": "The threshold angle value(0 ~ 90).<br/>If the input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br/>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>",
        "name": "options.thresholdAngle"
      },
      {
        "type": {
          "names": [
            "number",
            "string",
            "Array.<number>",
            "Array.<string>"
          ]
        },
        "optional": true,
        "defaultvalue": "[10,10]",
        "description": "The size value of the bounce area. Only can be enabled when `circular=false`.<br/>You can set different bounce value for prev/next direction by using array.<br/>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br/>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br/>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>",
        "name": "options.bounce"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether the `resize` method should be called automatically after a window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>",
        "name": "options.autoResize"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>",
        "name": "options.adaptive"
      },
      {
        "type": {
          "names": [
            "number",
            "\"\""
          ]
        },
        "optional": true,
        "defaultvalue": 2000,
        "description": "z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>",
        "name": "options.zIndex"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Prevent the view from going out of the first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>",
        "name": "options.bound"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>",
        "name": "options.overflow"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>",
        "name": "options.gap"
      },
      {
        "type": {
          "names": [
            "eg.Flicking.MoveTypeOption"
          ]
        },
        "optional": true,
        "defaultvalue": "\"snap\"",
        "description": "Movement style by user input. (ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>",
        "name": "options.moveType"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to use `offsetWidth`/`offsetHeight` instead of `getBoundingClientRect` for panel/viewport size calculation.<br/>You can use this option to calculate the original panel size when CSS transform is applied to viewport or panel.<br/>⚠️ If panel size is not fixed integer value, there can be a 1px gap between panels.<ko>패널과 뷰포트의 크기를 계산할 때 `offsetWidth`/`offsetHeight`를 `getBoundingClientRect` 대신 사용할지 여부.<br/>패널이나 뷰포트에 CSS transform이 설정되어 있을 때 원래 패널 크기를 계산하려면 옵션을 활성화한다.<br/>⚠️ 패널의 크기가 정수로 고정되어있지 않다면 패널 사이에 1px의 공간이 생길 수 있다.</ko>",
        "name": "options.useOffset"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to render visible panels only. This can dramatically increase performance when there're many panels.<ko>보이는 패널만 렌더링할지 여부를 설정한다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있다.</ko>",
        "name": "options.renderOnlyVisible"
      },
      {
        "type": {
          "names": [
            "boolean",
            "Array.<string>"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "This option indicates whether all panels have the same size(true) of first panel, or it can hold a list of class names that determines panel size.<br/>Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 동일한지(true), 혹은 패널 크기를 결정하는 패널 클래스들의 리스트.<br/>이 옵션을 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>",
        "name": "options.isEqualSize"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether all panels have a constant size that won't be changed after resize. Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 불변인지의 여부. 이 옵션을 'true'로 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>",
        "name": "options.isConstantSize"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to use external rendering. It will delegate DOM manipulation and can synchronize the rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>",
        "name": "options.renderExternal"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to resize the Flicking after the image/video elements inside viewport are ready.<br/>Use this property to prevent wrong Flicking layout caused by dynamic image / video sizes.<ko>Flicking 내부의 이미지 / 비디오 엘리먼트들이 전부 로드되었을 때 Flicking의 크기를 재계산하기 위한 옵션.<br/>이미지 / 비디오 크기가 고정 크기가 아닐 경우 사용하여 레이아웃이 잘못되는 것을 방지할 수 있다.</ko>",
        "name": "options.resizeOnContentsReady"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>",
        "name": "options.collectStatistics"
      }
    ],
    "returns": [],
    "properties": [
      {
        "type": {
          "names": [
            "$ts:Flicking.align"
          ]
        }
      },
      {
        "description": "Index of the panel to set as default when initializing. A zero-based integer.<ko>{@link Flicking#init Flicking.init()} 호출시 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다.</ko>"
      }
    ],
    "meta": {
      "lineno": 79,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 0
  },
  {
    "sort": 9999999,
    "id": "Flicking",
    "meta": {
      "lineno": 129,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "longname": "Flicking",
    "name": "Flicking",
    "kind": "class",
    "augments": [
      "Component"
    ],
    "support": {
      "Desktop - Internet Explorer": "9+(with polyfill)",
      "Desktop - Chrome": "latest",
      "Desktop - Firefox": "latest",
      "Desktop - Safari": "latest",
      "Desktop - Edge": "latest",
      "iOS": "7+",
      "Andorid": "4.X+"
    },
    "scope": "global",
    "implements": [],
    "fires": [
      "Flicking#event:ready",
      "Flicking#event:beforeResize",
      "Flicking#event:afterResize",
      "Flicking#event:holdStart",
      "Flicking#event:holdEnd",
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:change",
      "Flicking#event:restore",
      "Flicking#event:select",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "requires": [
      "{@link https://github.com/naver/egjs-component|@egjs/component}",
      "{@link https://github.com/naver/egjs-axes|@egjs/axes}"
    ],
    "order": 37
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 20,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "Control",
    "longname": "Control",
    "name": "Control",
    "kind": "class",
    "ko": "Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A component that manages inputs and animation of Flicking",
    "order": 63
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 23,
      "filename": "FlickingError.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "filename": "/home/wn/egjs-flicking/src/core/FlickingError.ts",
    "longname": "FlickingError",
    "name": "FlickingError",
    "kind": "class",
    "ko": "Flicking 내부에서 알려진 오류 발생시 throw되는 에러",
    "id": "FlickingError",
    "scope": "global",
    "augments": [
      "$ts:Error<file>/home/wn/egjs-flicking/src/core/FlickingError.ts</file>"
    ],
    "implements": [],
    "description": "Special type of known error that {@link Flicking} throws.",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "에러 코드<ko>에러 코드</ko>",
        "name": "code"
      }
    ],
    "see": [
      "{@link Constants.ERROR_CODE ERROR_CODE}"
    ],
    "order": 64
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 11,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "id": "Viewport",
    "longname": "Viewport",
    "name": "Viewport",
    "kind": "class",
    "ko": "뷰포트 크기 정보를 담당하는 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A component that manages viewport size",
    "order": 69
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 14,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Component",
    "longname": "Component",
    "name": "Component",
    "kind": "class",
    "ko": "컴포넌트의 이벤트을 관리할 수 있게 하는 클래스",
    "scope": "global",
    "implements": [],
    "support": {
      "Desktop - Internet Explorer": "7+",
      "Desktop - Chrome": "latest",
      "Desktop - Firefox": "latest",
      "Desktop - Safari": "latest",
      "Desktop - Edge": "latest",
      "iOS": "7+",
      "Andorid": "2.1+ (except 3.x)"
    },
    "description": "A class used to manage events in a component",
    "order": 87
  },
  {
    "sort": 9999999,
    "id": "ChangedEvent",
    "longname": "ChangedEvent",
    "name": "ChangedEvent",
    "kind": "member",
    "scope": "global",
    "description": "Event that fires when Flicking's index is changed.",
    "params": [],
    "returns": [],
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New index<ko>새 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Previous index<ko>이전 인덱스</ko>",
        "name": "prevIndex"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction from the active panel to the target panel<ko>현재 활성화된 패널로부터 이동하고자 하는 패널의 방향</ko>",
        "name": "direction"
      }
    ],
    "meta": {
      "lineno": 190,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 82
  },
  {
    "sort": 9999999,
    "id": "WillRestoreEvent",
    "longname": "WillRestoreEvent",
    "name": "WillRestoreEvent",
    "kind": "member",
    "scope": "global",
    "description": "Event fires when user drag amount not reached {@link Flicking#threshold threshold} and is returning to {@link Flicking#currentPanel currentPanel}",
    "returns": [],
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index of the panel to restore<ko>복귀하고자 하는 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "Panel to restore<ko>복귀하고자 하는 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      }
    ],
    "meta": {
      "lineno": 208,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자가 드래그하여 이동한 거리가 {@link Flicking#threshold threshold}에 도달하지 못해, 기존 {@link Flicking#currentPanel currentPanel}로 돌아갈 것임을 나타내는 이벤트",
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "params": [],
    "order": 83
  },
  {
    "sort": 9999999,
    "id": "RestoredEvent",
    "longname": "RestoredEvent",
    "name": "RestoredEvent",
    "kind": "member",
    "scope": "global",
    "description": "Event that fires when Flicking has returned to {@link Flicking#currentPanel currentPanel}",
    "returns": [],
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      }
    ],
    "meta": {
      "lineno": 222,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking이 {@link Flicking#currentPanel currentPanel}의 위치로 다시 돌아왔을 때 발생하는 이벤트",
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "params": [],
    "order": 84
  },
  {
    "sort": 9999999,
    "id": "Constants",
    "longname": "Constants",
    "name": "Constants",
    "kind": "namespace",
    "scope": "global",
    "description": "List of constants that flicking exports",
    "returns": [],
    "meta": {
      "lineno": 5,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "Flicking이 export하는 상수들의 목록",
    "params": [],
    "examples": [
      "```\n// esm\nimport { ERROR_CODE } from \"@egjs/flicking\";\n\n// umd\nFlicking.ERROR_CODE\n```"
    ],
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "order": 58
  },
  {
    "sort": 9999999,
    "id": "EVENTS",
    "longname": "EVENTS",
    "name": "EVENTS",
    "kind": "constant",
    "scope": "global",
    "description": "Event type object with event name strings.",
    "params": [],
    "examples": [
      "import { EVENTS } from \"@egjs/flicking\";\nEVENTS.MOVE_START; // \"MOVE_START\""
    ],
    "type": {
      "names": [
        "object"
      ]
    },
    "meta": {
      "lineno": 39,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "이벤트 이름 문자열들을 담은 객체",
    "properties": [
      {
        "type": {
          "names": [
            "\"holdStart\""
          ]
        },
        "description": "holdStart event<ko>holdStart 이벤트</ko>",
        "name": "HOLD_START"
      },
      {
        "type": {
          "names": [
            "\"holdEnd\""
          ]
        },
        "description": "holdEnd event<ko>holdEnd 이벤트</ko>",
        "name": "HOLD_END"
      },
      {
        "type": {
          "names": [
            "\"moveStart\""
          ]
        },
        "description": "moveStart event<ko>moveStart 이벤트</ko>",
        "name": "MOVE_START"
      },
      {
        "type": {
          "names": [
            "\"move\""
          ]
        },
        "description": "move event<ko>move 이벤트</ko>",
        "name": "MOVE"
      },
      {
        "type": {
          "names": [
            "\"moveEnd\""
          ]
        },
        "description": "moveEnd event<ko>moveEnd 이벤트</ko>",
        "name": "MOVE_END"
      },
      {
        "type": {
          "names": [
            "\"willChange\""
          ]
        },
        "description": "willChange event<ko>willChange 이벤트</ko>",
        "name": "WILL_CHANGE"
      },
      {
        "type": {
          "names": [
            "\"changed\""
          ]
        },
        "description": "changed event<ko>changed 이벤트</ko>",
        "name": "CHANGED"
      },
      {
        "type": {
          "names": [
            "\"willRestore\""
          ]
        },
        "description": "willRestore event<ko>willRestore 이벤트</ko>",
        "name": "WILL_RESTORE"
      },
      {
        "type": {
          "names": [
            "\"restored\""
          ]
        },
        "description": "restored event<ko>restored 이벤트</ko>",
        "name": "RESTORED"
      },
      {
        "type": {
          "names": [
            "\"select\""
          ]
        },
        "description": "select event<ko>select 이벤트</ko>",
        "name": "SELECT"
      },
      {
        "type": {
          "names": [
            "\"needPanel\""
          ]
        },
        "description": "needPanel event<ko>needPanel 이벤트</ko>",
        "name": "NEED_PANEL"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "returns": [],
    "order": 59
  },
  {
    "sort": 9999999,
    "id": "Flicking#control",
    "longname": "Flicking#control",
    "name": "control",
    "kind": "member",
    "scope": "instance",
    "description": "{@link Control} instance of the Flicking",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Control"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 182,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 Flicking에 활성화된 {@link Control} 인스턴스",
    "defaultvalue": "SnapControl",
    "see": [
      "Control",
      "SnapControl",
      "FreeControl"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 2
  },
  {
    "sort": 9999999,
    "id": "Flicking#camera",
    "longname": "Flicking#camera",
    "name": "camera",
    "kind": "member",
    "scope": "instance",
    "description": "{@link Camera} instance of the Flicking",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Camera"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 194,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 Flicking에 활성화된 {@link Camera} 인스턴스",
    "defaultvalue": "LinearCamera",
    "see": [
      "Camera",
      "LinearCamera",
      "BoundCamera",
      "CircularCamera"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 3
  },
  {
    "sort": 9999999,
    "id": "Flicking#renderer",
    "longname": "Flicking#renderer",
    "name": "renderer",
    "kind": "member",
    "scope": "instance",
    "description": "{@link Renderer} instance of the Flicking",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Renderer"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 205,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 Flicking에 활성화된 {@link Renderer} 인스턴스",
    "defaultvalue": "RawRenderer",
    "see": [
      "Renderer",
      "RawRenderer",
      "VisibleRenderer"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 4
  },
  {
    "sort": 9999999,
    "id": "Flicking#viewport",
    "longname": "Flicking#viewport",
    "name": "viewport",
    "kind": "member",
    "scope": "instance",
    "description": "A component that manages viewport size",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Viewport"
      ]
    },
    "see": [
      "Viewport"
    ],
    "meta": {
      "lineno": 213,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "뷰포트 크기 정보를 담당하는 컴포넌트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 5
  },
  {
    "sort": 9999999,
    "id": "Flicking#initialized",
    "longname": "Flicking#initialized",
    "name": "initialized",
    "kind": "member",
    "scope": "instance",
    "description": "Whether Flicking's {@link Flicking#init init()} is called.\nThis is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 224,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 6
  },
  {
    "sort": 9999999,
    "id": "Flicking#circularEnabled",
    "longname": "Flicking#circularEnabled",
    "name": "circularEnabled",
    "kind": "member",
    "scope": "instance",
    "description": "Whether the `circular` option is enabled.\nThe {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 234,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "{@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n{@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 7
  },
  {
    "sort": 9999999,
    "id": "Flicking#index",
    "longname": "Flicking#index",
    "name": "index",
    "kind": "member",
    "scope": "instance",
    "description": "Index number of the {@link Flicking#currentPanel currentPanel}",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 242,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "{@link Flicking#currentPanel currentPanel}의 인덱스 번호",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 8
  },
  {
    "sort": 9999999,
    "id": "Flicking#element",
    "longname": "Flicking#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "description": "The root(`.flicking-viewport`) element",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "meta": {
      "lineno": 249,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "root(`.flicking-viewport`) 엘리먼트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 9
  },
  {
    "sort": 9999999,
    "id": "Flicking#currentPanel",
    "longname": "Flicking#currentPanel",
    "name": "currentPanel",
    "kind": "member",
    "scope": "instance",
    "description": "Currently active panel",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Panel"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 257,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 선택된 패널",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 10
  },
  {
    "sort": 9999999,
    "id": "Flicking#panels",
    "longname": "Flicking#panels",
    "name": "panels",
    "kind": "member",
    "scope": "instance",
    "description": "Array of panels",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 265,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 활성화된 패널들의 배열",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 11
  },
  {
    "sort": 9999999,
    "id": "Flicking#panelCount",
    "longname": "Flicking#panelCount",
    "name": "panelCount",
    "kind": "member",
    "scope": "instance",
    "description": "Count of panels",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 272,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "전체 패널의 개수",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 12
  },
  {
    "sort": 9999999,
    "id": "Flicking#visiblePanels",
    "longname": "Flicking#visiblePanels",
    "name": "visiblePanels",
    "kind": "member",
    "scope": "instance",
    "description": "Array of panels that is visible at the current position",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 280,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 보이는 패널의 배열",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 13
  },
  {
    "sort": 9999999,
    "id": "Flicking#animating",
    "longname": "Flicking#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "description": "Whether Flicking's animating",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 287,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 14
  },
  {
    "sort": 9999999,
    "id": "Flicking#holding",
    "longname": "Flicking#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "description": "Whether user is clicking or touching",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 294,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 15
  },
  {
    "sort": 9999999,
    "id": "Flicking#align",
    "longname": "Flicking#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "description": "Align position of the panels within viewport. You can set different values each for the panel and camera",
    "memberof": "Flicking",
    "params": [],
    "examples": [
      "```ts\nconst possibleOptions = [\n  // Literal strings\n  \"prev\", \"center\", \"next\",\n  // % values, applied to both panel & camera\n  \"0%\", \"25%\", \"42%\",\n  // px values, arithmetic calculation with (+/-) is also allowed.\n  \"0px\", \"100px\", \"50% - 25px\",\n  // numbers, same to number + px (\"0px\", \"100px\")\n  0, 100, 1000,\n  // Setting a different value for panel & camera\n  { panel: \"10%\", camera: \"25%\" }\n];\n\npossibleOptions.forEach(align => {\n  new Flicking(\"#el\", { align });\n});\n```"
    ],
    "type": {
      "names": [
        "\"prev\"",
        "\"center\"",
        "\"next\"",
        "string",
        "number",
        "Object"
      ]
    },
    "defaultvalue": "\"center\"",
    "meta": {
      "lineno": 325,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다",
    "properties": [
      {
        "type": {
          "names": [
            "string",
            "number"
          ]
        },
        "description": "<ko>패널에 적용할 값</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "string",
            "number"
          ]
        },
        "name": "camera"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 16
  },
  {
    "sort": 9999999,
    "id": "Flicking#defaultIndex",
    "longname": "Flicking#defaultIndex",
    "name": "defaultIndex",
    "kind": "member",
    "scope": "instance",
    "description": "Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 332,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 17
  },
  {
    "sort": 9999999,
    "id": "Flicking#horizontal",
    "longname": "Flicking#horizontal",
    "name": "horizontal",
    "kind": "member",
    "scope": "instance",
    "description": "Direction of panel movement (true: horizontal, false: vertical)",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 339,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 이동 방향 (true: 가로방향, false: 세로방향)",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 18
  },
  {
    "sort": 9999999,
    "id": "Flicking#circular",
    "longname": "Flicking#circular",
    "name": "circular",
    "kind": "member",
    "scope": "instance",
    "description": "Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 346,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 19
  },
  {
    "sort": 9999999,
    "id": "Flicking#bound",
    "longname": "Flicking#bound",
    "name": "bound",
    "kind": "member",
    "scope": "instance",
    "description": "Prevent the view(camera element) from going out of the first/last panel. Only can be enabled when `circular=false`.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 353,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가는 것을 막아줍니다. `circular=false`인 경우에만 사용할 수 있습니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 20
  },
  {
    "sort": 9999999,
    "id": "Flicking#adaptive",
    "longname": "Flicking#adaptive",
    "name": "adaptive",
    "kind": "member",
    "scope": "instance",
    "description": "Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 360,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 21
  },
  {
    "sort": 9999999,
    "id": "Flicking#needPanelThreshold",
    "longname": "Flicking#needPanelThreshold",
    "name": "needPanelThreshold",
    "kind": "member",
    "scope": "instance",
    "description": "A Threshold from viewport edge before triggering `needPanel` event",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 368,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "`needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 22
  },
  {
    "sort": 9999999,
    "id": "Flicking#deceleration",
    "longname": "Flicking#deceleration",
    "name": "deceleration",
    "kind": "member",
    "scope": "instance",
    "description": "Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 376,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다",
    "defaultvalue": "0.0075",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 23
  },
  {
    "sort": 9999999,
    "id": "Flicking#easing",
    "longname": "Flicking#easing",
    "name": "easing",
    "kind": "member",
    "scope": "instance",
    "description": "An easing function applied to the panel movement animation. Default value is `easeOutCubic`",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "function"
      ]
    },
    "see": [
      "Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>"
    ],
    "meta": {
      "lineno": 384,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다",
    "defaultvalue": "x => 1 - Math.pow(1 - x, 3)",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 24
  },
  {
    "sort": 9999999,
    "id": "Flicking#duration",
    "longname": "Flicking#duration",
    "name": "duration",
    "kind": "member",
    "scope": "instance",
    "description": "Default duration of the animation (ms)",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "500",
    "meta": {
      "lineno": 391,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "디폴트 애니메이션 재생 시간 (ms)",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 25
  },
  {
    "sort": 9999999,
    "id": "Flicking#inputType",
    "longname": "Flicking#inputType",
    "name": "inputType",
    "kind": "member",
    "scope": "instance",
    "description": "Types of input devices to enable",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Array<string>"
      ]
    },
    "see": [
      "{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n<ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>"
    ],
    "meta": {
      "lineno": 401,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "활성화할 입력 장치 종류",
    "defaultvalue": "[\"touch\", \"mouse\"]",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 26
  },
  {
    "sort": 9999999,
    "id": "Flicking#moveType",
    "longname": "Flicking#moveType",
    "name": "moveType",
    "kind": "member",
    "scope": "instance",
    "description": "Movement style by user input. This will change instance type of {@link Flicking#control}",
    "memberof": "Flicking",
    "params": [],
    "examples": [
      "```ts\nimport Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n\nconst flicking = new Flicking({\n  moveType: MOVE_TYPE.FREE_SCROLL\n});\n```"
    ],
    "type": {
      "names": [
        "string"
      ]
    },
    "see": [
      "{@link Constants.MOVE_TYPE}"
    ],
    "meta": {
      "lineno": 417,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다",
    "defaultvalue": "\"snap\"",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 27
  },
  {
    "sort": 9999999,
    "id": "Flicking#threshold",
    "longname": "Flicking#threshold",
    "name": "threshold",
    "kind": "member",
    "scope": "instance",
    "description": "Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 424,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.",
    "defaultvalue": "40",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 28
  },
  {
    "sort": 9999999,
    "id": "Flicking#interruptable",
    "longname": "Flicking#interruptable",
    "name": "interruptable",
    "kind": "member",
    "scope": "instance",
    "description": "Set animation to be interruptable by click/touch.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 431,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 29
  },
  {
    "sort": 9999999,
    "id": "Flicking#bounce",
    "longname": "Flicking#bounce",
    "name": "bounce",
    "kind": "member",
    "scope": "instance",
    "description": "The size value of the bounce area. Only can be enabled when `circular=false`.\nYou can set different bounce value for prev/next direction by using array.\n`number` for px value, and `string` for px, and % value relative to viewport size.\nYou have to call {@link Control#updateInput} after changing this to take effect.",
    "memberof": "Flicking",
    "params": [],
    "examples": [
      "```ts\nconst possibleOptions = [\n  // % values, relative to viewport element(\".flicking-viewport\")'s size\n  \"0%\", \"25%\", \"42%\",\n  // px values, arithmetic calculation with (+/-) is also allowed.\n  \"0px\", \"100px\", \"50% - 25px\",\n  // numbers, same to number + px (\"0px\", \"100px\")\n  0, 100, 1000\n];",
      "```ts\nconst flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n\nflicking.bounce = \"100%\";\nflicking.control.updateInput(); // Call this to update!\n```"
    ],
    "type": {
      "names": [
        "string",
        "number",
        "Array.<(string|number)>"
      ]
    },
    "meta": {
      "lineno": 462,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.",
    "defaultvalue": "\"20%\"",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 30
  },
  {
    "sort": 9999999,
    "id": "Flicking#iOSEdgeSwipeThreshold",
    "longname": "Flicking#iOSEdgeSwipeThreshold",
    "name": "iOSEdgeSwipeThreshold",
    "kind": "member",
    "scope": "instance",
    "description": "Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 469,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)",
    "defaultvalue": "30",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 31
  },
  {
    "sort": 9999999,
    "id": "Flicking#renderOnlyVisible",
    "longname": "Flicking#renderOnlyVisible",
    "name": "renderOnlyVisible",
    "kind": "member",
    "scope": "instance",
    "description": "Whether to render visible panels only. This can dramatically increase performance when there're many panels.\nThis will set {@link Flicking#renderer renderer}'s type to {@link VisibleRenderer}",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 479,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n이 옵션을 활성화할 경우 {@link Flicking#renderer renderer}의 타입을 {@link VisibleRenderer}로 설정합니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 32
  },
  {
    "sort": 9999999,
    "id": "Flicking#autoInit",
    "longname": "Flicking#autoInit",
    "name": "autoInit",
    "kind": "member",
    "scope": "instance",
    "description": "Call {@link Flicking#init init()} automatically when creating Flicking's instance",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 488,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 33
  },
  {
    "sort": 9999999,
    "id": "Flicking#autoResize",
    "longname": "Flicking#autoResize",
    "name": "autoResize",
    "kind": "member",
    "scope": "instance",
    "description": "Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\nFlicking will automatically call {@link Flicking#resize resize} window size and orientation change.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 497,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 34
  },
  {
    "sort": 9999999,
    "id": "Flicking#renderExternal",
    "longname": "Flicking#renderExternal",
    "name": "renderExternal",
    "kind": "member",
    "scope": "instance",
    "description": "This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "meta": {
      "lineno": 506,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 35
  },
  {
    "sort": 9999999,
    "id": "Flicking#useOffsetManipulator",
    "longname": "Flicking#useOffsetManipulator",
    "name": "useOffsetManipulator",
    "kind": "member",
    "scope": "instance",
    "description": "Use {@link OffsetManipulator} for the element order managing in {@link Renderer}.\nInstead of isnerting/removing element to change order, this will use CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/order order}.\n⚠️ Enabling this option will decrease browser coverage to IE11+",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 517,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "{@link Renderer}에서 엘리먼트 순서 관리를 위해 {@link OffsetManipulator}를 사용합니다.\n엘리먼트를 직접적으로 추가/삭제하는 대신 CSS {@link https://developer.mozilla.org/ko/docs/Web/CSS/order order} 속성을 사용해서 순서를 관리합니다.\n⚠️ 이 옵션을 사용시 IE10 이하의 브라우저는 지원할 수 없습니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 36
  },
  {
    "sort": 9999999,
    "id": "Viewport#element",
    "longname": "Viewport#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "description": "A viewport(root) element",
    "memberof": "Viewport",
    "params": [],
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "meta": {
      "lineno": 22,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트(root) 엘리먼트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 66
  },
  {
    "sort": 9999999,
    "id": "Viewport#width",
    "longname": "Viewport#width",
    "name": "width",
    "kind": "member",
    "scope": "instance",
    "description": "Viewport width",
    "memberof": "Viewport",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 30,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트 너비",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 67
  },
  {
    "sort": 9999999,
    "id": "Viewport#height",
    "longname": "Viewport#height",
    "name": "height",
    "kind": "member",
    "scope": "instance",
    "description": "Viewport height",
    "memberof": "Viewport",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 37,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트 높이",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 68
  },
  {
    "sort": 9999999,
    "id": "Flicking#init",
    "longname": "Flicking#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "description": "Initialize Flicking and move to the default index.\nThis is automatically called on Flicking's constructor when `autoInit` is true(default).",
    "memberof": "Flicking",
    "params": [],
    "fires": [
      "Flicking#event:ready"
    ],
    "meta": {
      "lineno": 647,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking을 초기화하고, 디폴트 인덱스로 이동합니다.\n이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다.",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 39
  },
  {
    "sort": 9999999,
    "id": "Flicking#destroy",
    "longname": "Flicking#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Destroy Flicking and remove all event handlers.",
    "memberof": "Flicking",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 679,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking과 하위 컴포넌트들을 초기화 이전의 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거한다.",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 40
  },
  {
    "sort": 9999999,
    "id": "Flicking#prev",
    "longname": "Flicking#prev",
    "name": "prev",
    "kind": "function",
    "scope": "instance",
    "description": "Move to the previous panel (current index - 1)",
    "memberof": "Flicking",
    "params": [
      {
        "optional": true,
        "defaultvalue": "{@link Flicking#duration options.duration}",
        "description": "Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n</ko>"
      }
    ],
    "meta": {
      "lineno": 719,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "이전 패널로 이동한다 (현재 인덱스 - 1)",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:change",
      "Flicking#event:restore",
      "Flicking#event:select",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 41
  },
  {
    "sort": 9999999,
    "id": "Flicking#next",
    "longname": "Flicking#next",
    "name": "next",
    "kind": "function",
    "scope": "instance",
    "description": "Move to the next panel (current index + 1)",
    "memberof": "Flicking",
    "params": [
      {
        "optional": true,
        "defaultvalue": "{@link Flicking#duration options.duration}",
        "description": "Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n\n</ko>"
      }
    ],
    "meta": {
      "lineno": 751,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "다음 패널로 이동한다 (현재 인덱스 + 1)",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:change",
      "Flicking#event:restore",
      "Flicking#event:select",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 42
  },
  {
    "sort": 9999999,
    "id": "Flicking#moveTo",
    "longname": "Flicking#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "description": "Move to the panel with given index",
    "memberof": "Flicking",
    "params": [
      {
        "description": "The index of the panel to move<ko>이동할 패널의 인덱스</ko>",
        "name": "index",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      },
      {
        "optional": true,
        "defaultvalue": "{@link Flicking#duration options.duration}",
        "description": "Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n\n</ko>"
      }
    ],
    "meta": {
      "lineno": 784,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "주어진 인덱스에 해당하는 패널로 이동한다",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:change",
      "Flicking#event:restore",
      "Flicking#event:select",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 43
  },
  {
    "sort": 9999999,
    "id": "Flicking#getPanel",
    "longname": "Flicking#getPanel",
    "name": "getPanel",
    "kind": "function",
    "scope": "instance",
    "description": "Return the panel at the given index. `null` if it doesn't exists.",
    "memberof": "Flicking",
    "params": [
      {
        "name": "index",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "examples": [
      "```ts\nconst panel = flicking.getPanel(0);\n// Which is a shorthand to...\nconst samePanel = flicking.panels[0];\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>"
      }
    ],
    "meta": {
      "lineno": 813,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "주어진 인덱스에 해당하는 패널을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.",
    "see": [
      "Panel"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 44
  },
  {
    "sort": 9999999,
    "id": "Flicking#enableInput",
    "longname": "Flicking#enableInput",
    "name": "enableInput",
    "kind": "function",
    "scope": "instance",
    "description": "Enable input from the user (mouse/touch)",
    "memberof": "Flicking",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 822,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 입력(마우스/터치)를 활성화합니다",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 45
  },
  {
    "sort": 9999999,
    "id": "Flicking#disableInput",
    "longname": "Flicking#disableInput",
    "name": "disableInput",
    "kind": "function",
    "scope": "instance",
    "description": "Disable input from the user (mouse/touch)",
    "memberof": "Flicking",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 832,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 입력(마우스/터치)를 막습니다",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 46
  },
  {
    "sort": 9999999,
    "id": "Flicking#getStatus",
    "longname": "Flicking#getStatus",
    "name": "getStatus",
    "kind": "function",
    "scope": "instance",
    "description": "Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link Flicking#setStatus}",
    "memberof": "Flicking",
    "returns": [
      {
        "description": "An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>"
      }
    ],
    "meta": {
      "lineno": 842,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 상태를 반환합니다. 반환받은 값을 [setStatus()]{@link Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 47
  },
  {
    "sort": 9999999,
    "id": "Flicking#setStatus",
    "longname": "Flicking#setStatus",
    "name": "setStatus",
    "kind": "function",
    "scope": "instance",
    "description": "Restore to the state of the `status`",
    "memberof": "Flicking",
    "params": [
      {
        "description": "Status value to be restored. You can specify the return value of the [getStatus()]{@link Flicking#getStatus} method<ko>복원할 상태 값. [getStatus()]{@link Flicking#getStatus}메서드의 반환값을 지정하면 됩니다</ko>",
        "name": "status",
        "type": {
          "names": [
            ""
          ]
        }
      }
    ],
    "meta": {
      "lineno": 857,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "`status`의 상태로 복원합니다",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 48
  },
  {
    "sort": 9999999,
    "id": "Flicking#addPlugins",
    "longname": "Flicking#addPlugins",
    "name": "addPlugins",
    "kind": "function",
    "scope": "instance",
    "description": "Add plugins that can have different effects on Flicking",
    "memberof": "Flicking",
    "params": [
      {
        "description": "The plugin(s) to add<ko>추가할 플러그인(들)</ko>",
        "name": "plugins",
        "type": {
          "names": [
            "$ts:Plugin | Plugin[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 868,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 49
  },
  {
    "sort": 9999999,
    "id": "Flicking#removePlugins",
    "longname": "Flicking#removePlugins",
    "name": "removePlugins",
    "kind": "function",
    "scope": "instance",
    "description": "Remove plugins from Flicking.",
    "memberof": "Flicking",
    "params": [
      {
        "description": "The plugin(s) to remove.<ko>제거 플러그인(들).</ko>",
        "name": "plugins",
        "type": {
          "names": [
            "$ts:Plugin | Plugin[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 879,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "플리킹으로부터 플러그인들을 제거합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 50
  },
  {
    "sort": 9999999,
    "id": "Flicking#resize",
    "longname": "Flicking#resize",
    "name": "resize",
    "kind": "function",
    "scope": "instance",
    "description": "Update viewport/panel sizes",
    "memberof": "Flicking",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 892,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 및 뷰포트의 크기를 갱신합니다",
    "fires": [
      "Flicking#event:beforeResize",
      "Flicking#event:afterResize"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 51
  },
  {
    "sort": 9999999,
    "id": "Flicking#append",
    "longname": "Flicking#append",
    "name": "append",
    "kind": "function",
    "scope": "instance",
    "description": "Add new panels after the last panel",
    "memberof": "Flicking",
    "params": [
      {
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:ElementLike | ElementLike[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "examples": [
      "```ts\nconst flicking = new Flicking(\"#flick\");\n// These are possible parameters\nflicking.append(document.createElement(\"div\"));\nflicking.append(\"\\<div\\>Panel\\</div\\>\");\nflicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n// Even this is possible\nflicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n```"
    ],
    "see": [
      "Panel",
      "Flicking.ElementLike"
    ],
    "meta": {
      "lineno": 952,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 목록의 제일 끝에 새로운 패널들을 추가합니다",
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of appended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 52
  },
  {
    "sort": 9999999,
    "id": "Flicking#prepend",
    "longname": "Flicking#prepend",
    "name": "prepend",
    "kind": "function",
    "scope": "instance",
    "description": "Add new panels before the first panel. This will increase index of panels after by the number of panels added",
    "memberof": "Flicking",
    "params": [
      {
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:ElementLike | ElementLike[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "examples": [
      "```ts\nconst flicking = new eg.Flicking(\"#flick\");\nflicking.prepend(document.createElement(\"div\"));\nflicking.prepend(\"\\<div\\>Panel\\</div\\>\");\nflicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n// Even this is possible\nflicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n```"
    ],
    "see": [
      "Panel",
      "Flicking.ElementLike"
    ],
    "meta": {
      "lineno": 975,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다. 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of prepended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 53
  },
  {
    "sort": 9999999,
    "id": "Flicking#insert",
    "longname": "Flicking#insert",
    "name": "insert",
    "kind": "function",
    "scope": "instance",
    "description": "Insert new panels at given index. This will increase index of panels after by the number of panels added",
    "memberof": "Flicking",
    "params": [
      {
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      },
      {
        "name": "element",
        "type": {
          "names": [
            "$ts:ElementLike | ElementLike[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "examples": [
      "```ts\nconst flicking = new eg.Flicking(\"#flick\");\nflicking.insert(0, document.createElement(\"div\"));\nflicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\nflicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n// Even this is possible\nflicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n```"
    ],
    "see": [
      "Panel",
      "Flicking.ElementLike"
    ],
    "meta": {
      "lineno": 998,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "=주어진 인덱스에 새로운 패널들을 추가합니다. 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of prepended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 54
  },
  {
    "sort": 9999999,
    "id": "Flicking#remove",
    "longname": "Flicking#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "description": "Remove the panel at the given index. This will decrease index of panels after by the number of panels removed",
    "memberof": "Flicking",
    "params": [
      {
        "description": "Index of panel to remove.<ko>제거할 패널의 인덱스</ko>",
        "name": "index",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 1,
        "description": "Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>",
        "name": "deleteCount"
      }
    ],
    "meta": {
      "lineno": 1013,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "주어진 인덱스의 패널을 제거합니다. 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다.",
    "returns": [
      {
        "description": "Array of removed panels<ko>제거된 패널들의 배열</ko>",
        "type": {
          "names": [
            "$ts:Panel[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 55
  },
  {
    "sort": 9999999,
    "id": "Viewport#setSize",
    "longname": "Viewport#setSize",
    "name": "setSize",
    "kind": "function",
    "scope": "instance",
    "description": "Change viewport's size.\nThis will change the actual size of `.flicking-viewport` element by changing its CSS width/height property",
    "memberof": "Viewport",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "New viewport size<ko>새 뷰포트 크기</ko>",
        "name": "size"
      },
      {
        "type": {
          "names": [
            "number",
            "string"
          ]
        },
        "optional": true,
        "description": "CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>",
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "number",
            "string"
          ]
        },
        "optional": true,
        "description": "CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>",
        "name": "size.height"
      }
    ],
    "meta": {
      "lineno": 57,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트 크기를 변경합니다.\n`.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 71
  },
  {
    "sort": 9999999,
    "id": "Viewport#resize",
    "longname": "Viewport#resize",
    "name": "resize",
    "kind": "function",
    "scope": "instance",
    "description": "Update width/height to the current viewport element's size",
    "memberof": "Viewport",
    "meta": {
      "lineno": 78,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "params": [],
    "returns": [],
    "order": 72
  },
  {
    "sort": 9999999,
    "id": "Component#trigger",
    "longname": "Component#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "description": "Trigger a custom event.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "커스텀 이벤트를 발생시킨다",
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 88
  },
  {
    "sort": 9999999,
    "id": "Component#once",
    "longname": "Component#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "description": "Executed event just one time.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "이벤트가 한번만 실행된다.",
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 89
  },
  {
    "sort": 9999999,
    "id": "Component#hasOn",
    "longname": "Component#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 90
  },
  {
    "sort": 9999999,
    "id": "Component#on",
    "longname": "Component#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "description": "Attaches an event to a component.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 91
  },
  {
    "sort": 9999999,
    "id": "Component#off",
    "longname": "Component#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 92
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#trigger",
    "longname": "Flicking#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#trigger",
    "inherited": true,
    "description": "Trigger a custom event.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "커스텀 이벤트를 발생시킨다",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#trigger",
    "memberof": "Flicking",
    "order": 93
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#once",
    "longname": "Flicking#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#once",
    "inherited": true,
    "description": "Executed event just one time.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "이벤트가 한번만 실행된다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#once",
    "memberof": "Flicking",
    "order": 94
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#hasOn",
    "longname": "Flicking#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#hasOn",
    "inherited": true,
    "overrides": "Component#hasOn",
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 95
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#on",
    "longname": "Flicking#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#on",
    "inherited": true,
    "description": "Attaches an event to a component.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#on",
    "memberof": "Flicking",
    "order": 96
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#off",
    "longname": "Flicking#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#off",
    "inherited": true,
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#off",
    "memberof": "Flicking",
    "order": 97
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "ExternalManipulator#trigger",
    "longname": "ExternalManipulator#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#trigger",
    "inherited": true,
    "description": "Trigger a custom event.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "커스텀 이벤트를 발생시킨다",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "ExternalManipulator",
    "order": 98
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "ExternalManipulator#once",
    "longname": "ExternalManipulator#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#once",
    "inherited": true,
    "description": "Executed event just one time.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "이벤트가 한번만 실행된다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "ExternalManipulator",
    "order": 99
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "ExternalManipulator#hasOn",
    "longname": "ExternalManipulator#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#hasOn",
    "inherited": true,
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "ExternalManipulator",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 100
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "ExternalManipulator#on",
    "longname": "ExternalManipulator#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#on",
    "inherited": true,
    "description": "Attaches an event to a component.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "ExternalManipulator",
    "order": 101
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "ExternalManipulator#off",
    "longname": "ExternalManipulator#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#off",
    "inherited": true,
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "ExternalManipulator",
    "order": 102
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#trigger",
    "longname": "OffsetManipulator#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#trigger",
    "inherited": true,
    "description": "Trigger a custom event.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "커스텀 이벤트를 발생시킨다",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OffsetManipulator",
    "order": 103
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#once",
    "longname": "OffsetManipulator#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#once",
    "inherited": true,
    "description": "Executed event just one time.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "이벤트가 한번만 실행된다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OffsetManipulator",
    "order": 104
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#hasOn",
    "longname": "OffsetManipulator#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#hasOn",
    "inherited": true,
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 105
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#on",
    "longname": "OffsetManipulator#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#on",
    "inherited": true,
    "description": "Attaches an event to a component.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OffsetManipulator",
    "order": 106
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#off",
    "longname": "OffsetManipulator#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#off",
    "inherited": true,
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OffsetManipulator",
    "order": 107
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:ready",
    "longname": "Flicking#event:ready",
    "name": "ready",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's {@link Flicking#init init()} is called",
    "memberof": "Flicking",
    "meta": {
      "lineno": 12,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 {@link Flicking#init init()}이 호출되었을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 73
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:beforeResize",
    "longname": "Flicking#event:beforeResize",
    "name": "beforeResize",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's {@link Flicking#resize resize()} is called, before updating the sizes of panels and viewport.\nYou can update the sizes of panels and viewport with this event, and it'll be applied after {@link Flicking#resize resize()} is finished.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 22,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 {@link Flicking#resize resize())}이 호출되었을 때 발생하는 이벤트로, 패널 및 뷰포트의 크기를 업데이트하기 전에 발생합니다.\n이 이벤트 단계에서 패널 및 뷰포트의 크기를 업데이트할 경우, 해당 크기가 최종적으로 반영됩니다.",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Previous width of the viewport<ko>기존 뷰포트 너비</ko>",
        "name": "width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Previous height of the viewport<ko>기존 뷰포트 높이</ko>",
        "name": "height"
      },
      {
        "type": {
          "names": [
            "HTMLElement"
          ]
        },
        "description": "The viewport element<ko>뷰포트 엘리먼트</ko>",
        "name": "element"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 74
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:afterResize",
    "longname": "Flicking#event:afterResize",
    "name": "afterResize",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's {@link Flicking#resize resize()} is called, after updating the sizes of panels and viewport.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 41,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 {@link Flicking#resize resize())}이 호출되었을 때 발생하는 이벤트로, 패널 및 뷰포트의 크기를 업데이트한 이후에 발생합니다.",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New width of the viewport<ko>업데이트된 뷰포트 너비</ko>",
        "name": "width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New height of the viewport<ko>업데이트된 뷰포트 높이</ko>",
        "name": "height"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Previous size of the viewport<ko>기존 뷰포트 크기</ko>",
        "name": "prev"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Previous width of the viewport<ko>기존 뷰포트 너비</ko>",
        "name": "prev.width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Previous height of the viewport<ko>기존 뷰포트 높이</ko>",
        "name": "prev.height"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean value indicating whether the width/height of the viewport element is changed<ko>뷰포트 너비/크기가 변경되었는지 여부를 나타내는 값</ko>",
        "name": "sizeChanged"
      },
      {
        "type": {
          "names": [
            "HTMLElement"
          ]
        },
        "description": "The viewport element<ko>뷰포트 엘리먼트</ko>",
        "name": "element"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 75
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:holdStart",
    "longname": "Flicking#event:holdStart",
    "name": "holdStart",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when user started dragging.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 67,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자가 드래그를 시작했을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 76
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:holdEnd",
    "longname": "Flicking#event:holdEnd",
    "name": "holdEnd",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when user stopped dragging.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 82,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자가 드래그를 끝냈을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 77
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:moveStart",
    "longname": "Flicking#event:moveStart",
    "name": "moveStart",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires once before first {@link Flicking#event:move move} event.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 96,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "첫 번째 {@link Flicking#event:move move} 이벤트 직전에 단 한번 발생하는 이벤트.",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the user is dragging the viewport element<ko>사용자가 현재 viewport 엘리먼트를 드래그하고있는지를 나타내는 값</ko>",
        "name": "holding"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 78
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:move",
    "longname": "Flicking#event:move",
    "name": "move",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires for every movement",
    "memberof": "Flicking",
    "meta": {
      "lineno": 117,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "이동시마다 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the user is dragging the viewport element<ko>사용자가 현재 viewport 엘리먼트를 드래그하고있는지를 나타내는 값</ko>",
        "name": "holding"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 79
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:moveEnd",
    "longname": "Flicking#event:moveEnd",
    "name": "moveEnd",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when the movement is finished by user input release or animation end.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 138,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자 입력 중단/애니메이션 종료 등 이동이 끝났을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the user is dragging the viewport element<ko>사용자가 현재 viewport 엘리먼트를 드래그하고있는지를 나타내는 값</ko>",
        "name": "holding"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 80
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:willChange",
    "longname": "Flicking#event:willChange",
    "name": "willChange",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's active index will be changed. Index will be changed at the {@link Flicking#event:changed changed} event.\nIt can be triggered when user finished input, or flicking start to move by method.\nCalling `stop()` in event will prevent index change and camera movement.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 157,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 인덱스가 변경될 것임을 나타내는 이벤트. 실제 인덱스는 {@link Flicking#event:changed changed} 이벤트에서 변경된다.\n사용자가 입력을 마쳤을 때, 혹은 메소드를 통해 이동을 시작했을 때 발생한다.\n이벤트의 stop()을 호출시 인덱스 변경 및 패널로의 이동을 막는다.",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New active index<ko>변경할 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "New active panel<ko>인덱스 변경 이후 활성화된 패널로 설정할 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction from the active panel to the target panel<ko>현재 활성화된 패널로부터 이동하고자 하는 패널의 방향</ko>",
        "name": "direction"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 81
  },
  {
    "sort": 9999999,
    "id": "Flicking.VERSION",
    "longname": "Flicking.VERSION",
    "name": "VERSION",
    "kind": "member",
    "scope": "static",
    "description": "Version info string",
    "memberof": "Flicking",
    "examples": [
      "Flicking.VERSION;  // ex) 4.0.0"
    ],
    "meta": {
      "lineno": 137,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "버전정보 문자열",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "returns": [],
    "order": 1
  },
  {
    "sort": 9999999,
    "id": "Component.VERSION",
    "longname": "Component.VERSION",
    "name": "VERSION",
    "kind": "member",
    "scope": "static",
    "description": "Version info string",
    "returns": [],
    "meta": {
      "lineno": 15,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "버전정보 문자열",
    "memberof": "Component",
    "examples": [
      "Component.VERSION;  // ex) 3.0.0"
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "params": [],
    "type": {
      "names": [
        "$ts:string<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
      ]
    },
    "order": 86
  },
  {
    "sort": 9999999,
    "id": "Constants.ERROR_CODE",
    "longname": "Constants.ERROR_CODE",
    "name": "ERROR_CODE",
    "kind": "constant",
    "scope": "static",
    "description": "Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.",
    "params": [],
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>",
        "name": "WRONG_TYPE"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>",
        "name": "ELEMENT_NOT_FOUND"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>",
        "name": "VAL_MUST_NOT_NULL"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>",
        "name": "NOT_ATTACHED_TO_FLICKING"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>",
        "name": "WRONG_OPTION"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>",
        "name": "INDEX_OUT_OF_RANGE"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>",
        "name": "POSITION_NOT_REACHABLE"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>",
        "name": "TRANSFORM_NOT_SUPPORTED"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>",
        "name": "STOP_CALLED_BY_USER"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>",
        "name": "ANIMATION_INTERRUPTED"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>",
        "name": "ANIMATION_ALREADY_PLAYING"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the non-allowed method is called from frameworks (React, Angular, Vue...)\n<ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>",
        "name": "NOT_ALLOWED_IN_FRAMEWORK"
      }
    ],
    "meta": {
      "lineno": 7,
      "filename": "error.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "{@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.",
    "memberof": "Constants",
    "type": {
      "names": [
        "object"
      ]
    },
    "filename": "/home/wn/egjs-flicking/src/const/error.ts",
    "returns": [],
    "order": 57
  },
  {
    "sort": 9999999,
    "id": "Constants.ALIGN",
    "longname": "Constants.ALIGN",
    "name": "ALIGN",
    "kind": "constant",
    "scope": "static",
    "memberof": "Constants",
    "params": [],
    "returns": [],
    "meta": {
      "lineno": 61,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "order": 60
  },
  {
    "sort": 9999999,
    "id": "Constants.DIRECTION",
    "longname": "Constants.DIRECTION",
    "name": "DIRECTION",
    "kind": "constant",
    "scope": "static",
    "memberof": "Constants",
    "params": [],
    "returns": [],
    "meta": {
      "lineno": 70,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "order": 61
  },
  {
    "sort": 9999999,
    "id": "Constants.MOVE_TYPE",
    "longname": "Constants.MOVE_TYPE",
    "name": "MOVE_TYPE",
    "kind": "constant",
    "scope": "static",
    "memberof": "Constants",
    "params": [],
    "returns": [],
    "meta": {
      "lineno": 79,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "order": 62
  },
  {
    "sort": 9999999,
    "id": "eg.Flicking.withFlickingMethods",
    "longname": "eg.Flicking.withFlickingMethods",
    "name": "withFlickingMethods",
    "kind": "function",
    "scope": "static",
    "description": "Decorator that makes the method of flicking available in the framework.",
    "memberof": "eg.Flicking",
    "examples": [
      "```js\nimport Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n\nclass Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n  &#64;withFlickingMethods\n  private flicking: Flicking;\n}\n```"
    ],
    "meta": {
      "lineno": 23,
      "filename": "withFlickingMethods.ts",
      "path": "/home/wn/egjs-flicking/src/cfc"
    },
    "ko": "프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.",
    "returns": [],
    "access": "private",
    "filename": "/home/wn/egjs-flicking/src/cfc/withFlickingMethods.ts",
    "params": [],
    "order": 56
  },
  {
    "sort": 9999999,
    "id": "Flicking.ElementLike",
    "longname": "Flicking.ElementLike",
    "name": "ElementLike",
    "kind": "typedef",
    "scope": "static",
    "description": "HTML `string` of single/mutiple HTMLElement, or an instance of `HTMLElement`",
    "params": [],
    "meta": {
      "lineno": 7,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "단일/복수의 HTMLElement의 outerHTML에 해당하는 `string`, 혹은 `HTMLElement`의 인스턴스",
    "memberof": "Flicking",
    "filename": "/home/wn/egjs-flicking/src/type/external.ts",
    "returns": [],
    "type": {
      "names": [
        "$ts:string | HTMLElement<file>/home/wn/egjs-flicking/src/type/external.ts</file>"
      ]
    },
    "order": 85
  }
]
