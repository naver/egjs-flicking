[
  {
    "id": "Flicking()",
    "longname": "Flicking",
    "name": "Flicking",
    "kind": "constructor",
    "memberof": "Flicking",
    "params": [
      {
        "description": "A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n<ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>",
        "name": "root",
        "type": {
          "names": [
            "$ts:HTMLElement | string<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>",
        "name": "options"
      }
    ],
    "examples": [
      "```ts\nimport Flicking from \"@egjs/flicking\";\n\n// Creating new instance of Flicking with HTMLElement\nconst flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n\n// Creating new instance of Flicking with CSS selector\nconst flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n```"
    ],
    "returns": [],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n|{@link Constants.ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n<ko>\n\n|code|조건|\n|---|---|\n|{@link Constants.ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n|{@link Constants.ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n\n</ko>"
      }
    ],
    "order": 40
  },
  {
    "id": "Camera()",
    "longname": "Camera",
    "name": "Camera",
    "kind": "constructor",
    "memberof": "Camera",
    "params": [
      {
        "name": "",
        "type": {
          "names": [
            "$ts:Partial<CameraOptions><file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        },
        "description": "",
        "optional": true,
        "defaultvalue": "{}"
      }
    ],
    "returns": [],
    "order": 74
  },
  {
    "id": "AnchorPoint()",
    "longname": "AnchorPoint",
    "name": "AnchorPoint",
    "kind": "constructor",
    "memberof": "AnchorPoint",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An options object<ko>옵션 객체</ko>",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>",
        "name": "options.index"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>",
        "name": "options.position"
      },
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "optional": true,
        "description": "A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>",
        "name": "options.panel"
      }
    ],
    "returns": [],
    "order": 161
  },
  {
    "id": "FlickingError()",
    "longname": "FlickingError",
    "name": "FlickingError",
    "kind": "constructor",
    "memberof": "FlickingError",
    "params": [
      {
        "description": "Error message<ko>에러 메시지</ko>",
        "name": "message",
        "type": {
          "names": [
            "$ts:string<file>/home/wn/egjs-flicking/src/core/FlickingError.ts</file>"
          ]
        }
      },
      {
        "description": "Error code<ko>에러 코드</ko>",
        "name": "code",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/FlickingError.ts</file>"
          ]
        }
      }
    ],
    "examples": [
      "```ts\nimport Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\ntry {\n  const flicking = new Flicking(\".flicking-viewport\")\n} catch (e) {\n  if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n    console.error(\"Element not found\")\n  }\n}\n```"
    ],
    "returns": [],
    "order": 163
  },
  {
    "id": "Panel()",
    "longname": "Panel",
    "name": "Panel",
    "kind": "constructor",
    "memberof": "Panel",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An options object<ko>옵션 오브젝트</ko>",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "HTMLElement"
          ]
        },
        "optional": true,
        "description": "A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>",
        "name": "options.el"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "An initial index of the panel<ko>패널의 초기 인덱스</ko>",
        "name": "options.index"
      },
      {
        "type": {
          "names": [
            "Constants.ALIGN",
            "string",
            "number"
          ]
        },
        "optional": true,
        "description": "An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>",
        "name": "options.align"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>",
        "name": "options.flicking"
      }
    ],
    "returns": [],
    "order": 177
  },
  {
    "id": "Viewport()",
    "longname": "Viewport",
    "name": "Viewport",
    "kind": "constructor",
    "memberof": "Viewport",
    "params": [
      {
        "description": "A viewport element<ko>뷰포트 엘리먼트</ko>",
        "name": "el",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/core/Viewport.ts</file>"
          ]
        }
      }
    ],
    "returns": [],
    "order": 197
  },
  {
    "id": "Renderer()",
    "longname": "Renderer",
    "name": "Renderer",
    "kind": "constructor",
    "memberof": "Renderer",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An options object<ko>옵션 오브젝트</ko>",
        "name": "options",
        "optional": true,
        "defaultvalue": "{}"
      },
      {
        "type": {
          "names": [
            "Constants.ALIGN",
            "string",
            "number"
          ]
        },
        "optional": true,
        "description": "An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>",
        "name": "options.align"
      },
      {
        "type": {
          "names": [
            "OffsetManipulator"
          ]
        },
        "optional": true,
        "description": "An instance of {@link OffsetManipulator} that renderer will use<ko>Renderer가 사용할 {@link OffsetManipulator}의 인스턴스</ko>",
        "name": "options.elementManipulator"
      }
    ],
    "returns": [],
    "order": 220
  },
  {
    "sort": 9999999,
    "id": "FlickingEvents",
    "longname": "FlickingEvents",
    "name": "FlickingEvents",
    "kind": "interface",
    "scope": "global",
    "meta": {
      "lineno": 27,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "returns": [],
    "order": 0
  },
  {
    "sort": 9999999,
    "id": "FlickingOptions",
    "longname": "FlickingOptions",
    "name": "FlickingOptions",
    "kind": "interface",
    "scope": "global",
    "meta": {
      "lineno": 49,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "returns": [],
    "order": 1
  },
  {
    "sort": 9999999,
    "id": "TogglePoint",
    "longname": "TogglePoint",
    "name": "TogglePoint",
    "kind": "interface",
    "scope": "global",
    "description": "A data of the position that changes order of the panel elements",
    "returns": [],
    "meta": {
      "lineno": 20,
      "filename": "CircularCamera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "패널 엘리먼트 순서가 변경되는 좌표의 데이터",
    "params": [],
    "properties": [
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "Toggling panel<ko>순서를 변경할 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Toggling position<ko>순서를 변경할 방향</ko>",
        "name": "direction"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>",
        "name": "toggled"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/CircularCamera.ts",
    "order": 90
  },
  {
    "sort": 9999999,
    "id": "Flicking",
    "meta": {
      "lineno": 102,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "longname": "Flicking",
    "name": "Flicking",
    "kind": "class",
    "augments": [
      "Component"
    ],
    "support": {
      "Desktop - Internet Explorer": "9+(with polyfill)",
      "Desktop - Chrome": "latest",
      "Desktop - Firefox": "latest",
      "Desktop - Safari": "latest",
      "Desktop - Edge": "latest",
      "iOS": "7+",
      "Andorid": "4.X+"
    },
    "scope": "global",
    "implements": [],
    "fires": [
      "Flicking#event:ready",
      "Flicking#event:beforeResize",
      "Flicking#event:afterResize",
      "Flicking#event:holdStart",
      "Flicking#event:holdEnd",
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:select",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "requires": [
      "{@link https://github.com/naver/egjs-component|@egjs/component}",
      "{@link https://github.com/naver/egjs-axes|@egjs/axes}"
    ],
    "order": 39
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 13,
      "filename": "BoundCamera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}",
    "filename": "/home/wn/egjs-flicking/src/camera/BoundCamera.ts",
    "id": "BoundCamera",
    "longname": "BoundCamera",
    "name": "BoundCamera",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:Camera<file>/home/wn/egjs-flicking/src/camera/BoundCamera.ts</file>"
    ],
    "implements": [],
    "description": "A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel",
    "order": 58
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 23,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "Camera",
    "longname": "Camera",
    "name": "Camera",
    "kind": "class",
    "ko": "뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A component that manages actual movement inside the viewport",
    "order": 73
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 30,
      "filename": "CircularCamera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}",
    "filename": "/home/wn/egjs-flicking/src/camera/CircularCamera.ts",
    "id": "CircularCamera",
    "longname": "CircularCamera",
    "name": "CircularCamera",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:Camera<file>/home/wn/egjs-flicking/src/camera/CircularCamera.ts</file>"
    ],
    "implements": [],
    "description": "A {@link Camera} that connects the last panel and the first panel, enabling continuous loop",
    "order": 91
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 12,
      "filename": "LinearCamera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}",
    "filename": "/home/wn/egjs-flicking/src/camera/LinearCamera.ts",
    "id": "LinearCamera",
    "longname": "LinearCamera",
    "name": "LinearCamera",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:Camera<file>/home/wn/egjs-flicking/src/camera/LinearCamera.ts</file>"
    ],
    "implements": [],
    "description": "A {@link Camera} that can move from the position of the first panel to the position of the last panel",
    "order": 93
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 19,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "id": "AxesController",
    "longname": "AxesController",
    "name": "AxesController",
    "kind": "class",
    "ko": "{@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 109
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 21,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "Control",
    "longname": "Control",
    "name": "Control",
    "kind": "class",
    "ko": "Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A component that manages inputs and animation of Flicking",
    "order": 121
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 16,
      "filename": "FreeControl.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}",
    "filename": "/home/wn/egjs-flicking/src/control/FreeControl.ts",
    "id": "FreeControl",
    "longname": "FreeControl",
    "name": "FreeControl",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:Control<file>/home/wn/egjs-flicking/src/control/FreeControl.ts</file>"
    ],
    "implements": [],
    "description": "A {@link Control} that can be scrolled freely without alignment",
    "order": 130
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 17,
      "filename": "SnapControl.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}",
    "filename": "/home/wn/egjs-flicking/src/control/SnapControl.ts",
    "id": "SnapControl",
    "longname": "SnapControl",
    "name": "SnapControl",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:Control<file>/home/wn/egjs-flicking/src/control/SnapControl.ts</file>"
    ],
    "implements": [],
    "description": "A {@link Control} that uses a release momentum to choose destination panel",
    "order": 132
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 16,
      "filename": "AnimatingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태",
    "filename": "/home/wn/egjs-flicking/src/control/states/AnimatingState.ts",
    "id": "AnimatingState",
    "longname": "AnimatingState",
    "name": "AnimatingState",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:State<file>/home/wn/egjs-flicking/src/control/states/AnimatingState.ts</file>"
    ],
    "implements": [],
    "description": "A state that activates when Flicking's animating by user input or method call",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 134
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 12,
      "filename": "DisabledState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "이벤트의 `stop`호출에 의해 Flicking이 정지된 상태",
    "filename": "/home/wn/egjs-flicking/src/control/states/DisabledState.ts",
    "id": "DisabledState",
    "longname": "DisabledState",
    "name": "DisabledState",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:State<file>/home/wn/egjs-flicking/src/control/states/DisabledState.ts</file>"
    ],
    "implements": [],
    "description": "A state that activates when Flicking is stopped by event's `stop` method",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 137
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 17,
      "filename": "DraggingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "사용자가 드래깅중인 상태",
    "filename": "/home/wn/egjs-flicking/src/control/states/DraggingState.ts",
    "id": "DraggingState",
    "longname": "DraggingState",
    "name": "DraggingState",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:State<file>/home/wn/egjs-flicking/src/control/states/DraggingState.ts</file>"
    ],
    "implements": [],
    "description": "A state that activates when user's dragging the Flicking area",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 140
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 18,
      "filename": "HoldingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태",
    "filename": "/home/wn/egjs-flicking/src/control/states/HoldingState.ts",
    "id": "HoldingState",
    "longname": "HoldingState",
    "name": "HoldingState",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:State<file>/home/wn/egjs-flicking/src/control/states/HoldingState.ts</file>"
    ],
    "implements": [],
    "description": "A state that activates when user's holding the Flicking area, but not moved a single pixel yet",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 143
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 16,
      "filename": "IdleState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태",
    "filename": "/home/wn/egjs-flicking/src/control/states/IdleState.ts",
    "id": "IdleState",
    "longname": "IdleState",
    "name": "IdleState",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:State<file>/home/wn/egjs-flicking/src/control/states/IdleState.ts</file>"
    ],
    "implements": [],
    "description": "A default state when there's no user input and no animation's playing",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 146
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 23,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트",
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "id": "State",
    "longname": "State",
    "name": "State",
    "kind": "class",
    "scope": "global",
    "implements": [],
    "description": "A component that shows the current status of the user input or the animation",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 149
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 7,
      "filename": "AnchorPoint.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "filename": "/home/wn/egjs-flicking/src/core/AnchorPoint.ts",
    "id": "AnchorPoint",
    "longname": "AnchorPoint",
    "name": "AnchorPoint",
    "kind": "class",
    "ko": "카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A data component that has actual position where the camera should be stopped at",
    "order": 160
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 24,
      "filename": "FlickingError.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "filename": "/home/wn/egjs-flicking/src/core/FlickingError.ts",
    "longname": "FlickingError",
    "name": "FlickingError",
    "kind": "class",
    "ko": "Flicking 내부에서 알려진 오류 발생시 throw되는 에러",
    "id": "FlickingError",
    "scope": "global",
    "augments": [
      "$ts:Error<file>/home/wn/egjs-flicking/src/core/FlickingError.ts</file>"
    ],
    "implements": [],
    "description": "Special type of known error that {@link Flicking} throws.",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Error code<ko>에러 코드</ko>",
        "name": "code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Error message<ko>에러 메시지</ko>",
        "name": "message"
      }
    ],
    "see": [
      "{@link Constants.ERROR_CODE ERROR_CODE}"
    ],
    "order": 162
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 21,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "id": "Panel",
    "longname": "Panel",
    "name": "Panel",
    "kind": "class",
    "ko": "슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다",
    "scope": "global",
    "implements": [],
    "description": "An slide data component that holds information of a single HTMLElement",
    "order": 176
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 11,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "id": "Viewport",
    "longname": "Viewport",
    "name": "Viewport",
    "kind": "class",
    "ko": "뷰포트 크기 정보를 담당하는 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A component that manages viewport size",
    "order": 196
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 13,
      "filename": "ElementManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "엘리먼트 추가/제거 및 순서 변경을 담당하는 컴포넌트",
    "filename": "/home/wn/egjs-flicking/src/renderer/ElementManipulator.ts",
    "id": "ElementManipulator",
    "longname": "ElementManipulator",
    "name": "ElementManipulator",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:OffsetManipulator<file>/home/wn/egjs-flicking/src/renderer/ElementManipulator.ts</file>"
    ],
    "implements": [],
    "description": "A component that manages element add/remove and element's order change",
    "order": 200
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 27,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OffsetManipulator",
    "name": "OffsetManipulator",
    "kind": "class",
    "ko": "엘리먼트 순서 변경에 의한 패널 오프셋 변경을 담당하는 컴포넌트",
    "id": "OffsetManipulator",
    "scope": "global",
    "augments": [
      "$ts:Component<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
    ],
    "implements": [],
    "description": "A component that manages panel offset from the element's order change",
    "fires": [
      "OffsetManipulator#event:orderChanged"
    ],
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 202
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 14,
      "filename": "OrderManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 추가/제거 없이 CSS {@link https://developer.mozilla.org/ko/docs/Web/CSS/order order} 속성을 이용하여 엘리먼트 순서를 변경하는 컴포넌트",
    "filename": "/home/wn/egjs-flicking/src/renderer/OrderManipulator.ts",
    "id": "OrderManipulator",
    "longname": "OrderManipulator",
    "name": "OrderManipulator",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:OffsetManipulator<file>/home/wn/egjs-flicking/src/renderer/OrderManipulator.ts</file>"
    ],
    "implements": [],
    "description": "A component that manages panel element's order without adding/removing it using CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/order order} property",
    "order": 212
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 11,
      "filename": "RawRenderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "모든 패널 엘리먼트를 카메라 엘리먼트 내에 항상 렌더링하는 종류의 {@link Renderer}",
    "filename": "/home/wn/egjs-flicking/src/renderer/RawRenderer.ts",
    "id": "RawRenderer",
    "longname": "RawRenderer",
    "name": "RawRenderer",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:Renderer<file>/home/wn/egjs-flicking/src/renderer/RawRenderer.ts</file>"
    ],
    "implements": [],
    "description": "A {@link Renderer} that always renders all panel elements inside the camera element",
    "order": 213
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 21,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "id": "Renderer",
    "longname": "Renderer",
    "name": "Renderer",
    "kind": "class",
    "ko": "{@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트",
    "scope": "global",
    "implements": [],
    "description": "A component that manages {@link Panel} and its elements",
    "order": 219
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 13,
      "filename": "VisibleRenderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "현재 카메라의 보이는 패널들({@link Camera#visiblePanels visiblePanels})만을 카메라 엘리먼트 내에 렌더링하는 종류의 {@link Renderer}",
    "filename": "/home/wn/egjs-flicking/src/renderer/VisibleRenderer.ts",
    "id": "VisibleRenderer",
    "longname": "VisibleRenderer",
    "name": "VisibleRenderer",
    "kind": "class",
    "scope": "global",
    "augments": [
      "$ts:RawRenderer<file>/home/wn/egjs-flicking/src/renderer/VisibleRenderer.ts</file>"
    ],
    "implements": [],
    "description": "A {@link Renderer} that renders only visible panel elements({@link Camera#visiblePanels visiblePanels}) inside the camera element",
    "order": 228
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 14,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Component",
    "longname": "Component",
    "name": "Component",
    "kind": "class",
    "ko": "컴포넌트의 이벤트을 관리할 수 있게 하는 클래스",
    "scope": "global",
    "implements": [],
    "support": {
      "Desktop - Internet Explorer": "7+",
      "Desktop - Chrome": "latest",
      "Desktop - Firefox": "latest",
      "Desktop - Safari": "latest",
      "Desktop - Edge": "latest",
      "iOS": "7+",
      "Andorid": "2.1+ (except 3.x)"
    },
    "description": "A class used to manage events in a component",
    "order": 248
  },
  {
    "sort": 9999999,
    "id": "Constants",
    "longname": "Constants",
    "name": "Constants",
    "kind": "namespace",
    "scope": "global",
    "description": "List of constants that flicking exports",
    "returns": [],
    "meta": {
      "lineno": 5,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "Flicking이 export하는 상수들의 목록",
    "params": [],
    "examples": [
      "```\n// esm\nimport { ERROR_CODE } from \"@egjs/flicking\";\n\n// umd\nFlicking.ERROR_CODE\n```"
    ],
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "order": 99
  },
  {
    "sort": 9999999,
    "id": "EVENT",
    "longname": "EVENT",
    "name": "EVENT",
    "kind": "constant",
    "scope": "global",
    "description": "All possible @egjs/axes event keys",
    "params": [],
    "returns": [],
    "meta": {
      "lineno": 5,
      "filename": "axes.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "filename": "/home/wn/egjs-flicking/src/const/axes.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 96
  },
  {
    "sort": 9999999,
    "id": "POSITION_KEY",
    "longname": "POSITION_KEY",
    "name": "POSITION_KEY",
    "kind": "constant",
    "scope": "global",
    "description": "An Axis key that Flicking uses",
    "params": [],
    "returns": [],
    "meta": {
      "lineno": 17,
      "filename": "axes.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "filename": "/home/wn/egjs-flicking/src/const/axes.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "order": 97
  },
  {
    "sort": 9999999,
    "id": "Flicking#control",
    "longname": "Flicking#control",
    "name": "control",
    "kind": "member",
    "scope": "instance",
    "description": "{@link Control} instance of the Flicking",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Control"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 157,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 Flicking에 활성화된 {@link Control} 인스턴스",
    "defaultvalue": "SnapControl",
    "see": [
      "Control",
      "SnapControl",
      "FreeControl"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "customTags": [
      {
        "tag": "id",
        "value": "Flicking.control"
      }
    ],
    "order": 3
  },
  {
    "sort": 9999999,
    "id": "Flicking#camera",
    "longname": "Flicking#camera",
    "name": "camera",
    "kind": "member",
    "scope": "instance",
    "description": "{@link Camera} instance of the Flicking",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Camera"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 169,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 Flicking에 활성화된 {@link Camera} 인스턴스",
    "defaultvalue": "LinearCamera",
    "see": [
      "Camera",
      "LinearCamera",
      "BoundCamera",
      "CircularCamera"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 4
  },
  {
    "sort": 9999999,
    "id": "Flicking#renderer",
    "longname": "Flicking#renderer",
    "name": "renderer",
    "kind": "member",
    "scope": "instance",
    "description": "{@link Renderer} instance of the Flicking",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Renderer"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 180,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 Flicking에 활성화된 {@link Renderer} 인스턴스",
    "defaultvalue": "RawRenderer",
    "see": [
      "Renderer",
      "RawRenderer",
      "VisibleRenderer"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 5
  },
  {
    "sort": 9999999,
    "id": "Flicking#viewport",
    "longname": "Flicking#viewport",
    "name": "viewport",
    "kind": "member",
    "scope": "instance",
    "description": "A component that manages viewport size",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Viewport"
      ]
    },
    "see": [
      "Viewport"
    ],
    "meta": {
      "lineno": 188,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "뷰포트 크기 정보를 담당하는 컴포넌트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 6
  },
  {
    "sort": 9999999,
    "id": "Flicking#initialized",
    "longname": "Flicking#initialized",
    "name": "initialized",
    "kind": "member",
    "scope": "instance",
    "description": "Whether Flicking's {@link Flicking#init init()} is called.\nThis is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 199,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 7
  },
  {
    "sort": 9999999,
    "id": "Flicking#circularEnabled",
    "longname": "Flicking#circularEnabled",
    "name": "circularEnabled",
    "kind": "member",
    "scope": "instance",
    "description": "Whether the `circular` option is enabled.\nThe {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 209,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "{@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n{@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 8
  },
  {
    "sort": 9999999,
    "id": "Flicking#index",
    "longname": "Flicking#index",
    "name": "index",
    "kind": "member",
    "scope": "instance",
    "description": "Index number of the {@link Flicking#currentPanel currentPanel}",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 217,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "{@link Flicking#currentPanel currentPanel}의 인덱스 번호",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 9
  },
  {
    "sort": 9999999,
    "id": "Flicking#element",
    "longname": "Flicking#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "description": "The root(`.flicking-viewport`) element",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "meta": {
      "lineno": 224,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "root(`.flicking-viewport`) 엘리먼트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 10
  },
  {
    "sort": 9999999,
    "id": "Flicking#currentPanel",
    "longname": "Flicking#currentPanel",
    "name": "currentPanel",
    "kind": "member",
    "scope": "instance",
    "description": "Currently active panel",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Panel"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 232,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 선택된 패널",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 11
  },
  {
    "sort": 9999999,
    "id": "Flicking#panels",
    "longname": "Flicking#panels",
    "name": "panels",
    "kind": "member",
    "scope": "instance",
    "description": "Array of panels",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 240,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "전체 패널들의 배열",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 12
  },
  {
    "sort": 9999999,
    "id": "Flicking#panelCount",
    "longname": "Flicking#panelCount",
    "name": "panelCount",
    "kind": "member",
    "scope": "instance",
    "description": "Count of panels",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 247,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "전체 패널의 개수",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 13
  },
  {
    "sort": 9999999,
    "id": "Flicking#visiblePanels",
    "longname": "Flicking#visiblePanels",
    "name": "visiblePanels",
    "kind": "member",
    "scope": "instance",
    "description": "Array of panels that is visible at the current position",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 255,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 보이는 패널의 배열",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 14
  },
  {
    "sort": 9999999,
    "id": "Flicking#animating",
    "longname": "Flicking#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "description": "Whether Flicking's animating",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 262,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 15
  },
  {
    "sort": 9999999,
    "id": "Flicking#holding",
    "longname": "Flicking#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "description": "Whether user is clicking or touching",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 269,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 16
  },
  {
    "sort": 9999999,
    "id": "Flicking#align",
    "longname": "Flicking#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "description": "Align position of the panels within viewport. You can set different values each for the panel and camera",
    "memberof": "Flicking",
    "params": [],
    "examples": [
      "```ts\nconst possibleOptions = [\n  // Literal strings\n  \"prev\", \"center\", \"next\",\n  // % values, applied to both panel & camera\n  \"0%\", \"25%\", \"42%\",\n  // px values, arithmetic calculation with (+/-) is also allowed.\n  \"0px\", \"100px\", \"50% - 25px\",\n  // numbers, same to number + px (\"0px\", \"100px\")\n  0, 100, 1000,\n  // Setting a different value for panel & camera\n  { panel: \"10%\", camera: \"25%\" }\n];\n\npossibleOptions.forEach(align => {\n  new Flicking(\"#el\", { align });\n});\n```"
    ],
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number",
        "Object"
      ]
    },
    "defaultvalue": "\"center\"",
    "meta": {
      "lineno": 300,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다",
    "properties": [
      {
        "type": {
          "names": [
            "Constants.ALIGN",
            "string",
            "number"
          ]
        },
        "description": "<ko>개개의 {@link Panel}에 적용할 값</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "Constants.ALIGN",
            "string",
            "number"
          ]
        },
        "description": "<ko>{@link Camera}에 적용할 값</ko>",
        "name": "camera"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 17
  },
  {
    "sort": 9999999,
    "id": "Flicking#defaultIndex",
    "longname": "Flicking#defaultIndex",
    "name": "defaultIndex",
    "kind": "member",
    "scope": "instance",
    "description": "Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 307,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 18
  },
  {
    "sort": 9999999,
    "id": "Flicking#horizontal",
    "longname": "Flicking#horizontal",
    "name": "horizontal",
    "kind": "member",
    "scope": "instance",
    "description": "Direction of panel movement (true: horizontal, false: vertical)",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 314,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 이동 방향 (true: 가로방향, false: 세로방향)",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 19
  },
  {
    "sort": 9999999,
    "id": "Flicking#circular",
    "longname": "Flicking#circular",
    "name": "circular",
    "kind": "member",
    "scope": "instance",
    "description": "Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 321,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 20
  },
  {
    "sort": 9999999,
    "id": "Flicking#bound",
    "longname": "Flicking#bound",
    "name": "bound",
    "kind": "member",
    "scope": "instance",
    "description": "Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\nOnly can be enabled when `circular=false`",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 330,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n`circular=false`인 경우에만 사용할 수 있습니다",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 21
  },
  {
    "sort": 9999999,
    "id": "Flicking#adaptive",
    "longname": "Flicking#adaptive",
    "name": "adaptive",
    "kind": "member",
    "scope": "instance",
    "description": "Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 337,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 22
  },
  {
    "sort": 9999999,
    "id": "Flicking#needPanelThreshold",
    "longname": "Flicking#needPanelThreshold",
    "name": "needPanelThreshold",
    "kind": "member",
    "scope": "instance",
    "description": "A Threshold from viewport edge before triggering `needPanel` event",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 345,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "`needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 23
  },
  {
    "sort": 9999999,
    "id": "Flicking#deceleration",
    "longname": "Flicking#deceleration",
    "name": "deceleration",
    "kind": "member",
    "scope": "instance",
    "description": "Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 353,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다",
    "defaultvalue": "0.0075",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 24
  },
  {
    "sort": 9999999,
    "id": "Flicking#easing",
    "longname": "Flicking#easing",
    "name": "easing",
    "kind": "member",
    "scope": "instance",
    "description": "An easing function applied to the panel movement animation. Default value is `easeOutCubic`",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "function"
      ]
    },
    "see": [
      "Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>"
    ],
    "meta": {
      "lineno": 361,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다",
    "defaultvalue": "x => 1 - Math.pow(1 - x, 3)",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 25
  },
  {
    "sort": 9999999,
    "id": "Flicking#duration",
    "longname": "Flicking#duration",
    "name": "duration",
    "kind": "member",
    "scope": "instance",
    "description": "Default duration of the animation (ms)",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "500",
    "meta": {
      "lineno": 368,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "디폴트 애니메이션 재생 시간 (ms)",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 26
  },
  {
    "sort": 9999999,
    "id": "Flicking#inputType",
    "longname": "Flicking#inputType",
    "name": "inputType",
    "kind": "member",
    "scope": "instance",
    "description": "Types of input devices to enable",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Array<string>"
      ]
    },
    "see": [
      "{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n<ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>"
    ],
    "meta": {
      "lineno": 378,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "활성화할 입력 장치 종류",
    "defaultvalue": "[\"touch\", \"mouse\"]",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 27
  },
  {
    "sort": 9999999,
    "id": "Flicking#moveType",
    "longname": "Flicking#moveType",
    "name": "moveType",
    "kind": "member",
    "scope": "instance",
    "description": "Movement style by user input. This will change instance type of {@link Flicking#control}",
    "memberof": "Flicking",
    "params": [],
    "examples": [
      "```ts\nimport Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n\nconst flicking = new Flicking({\n  moveType: MOVE_TYPE.FREE_SCROLL\n});\n```"
    ],
    "type": {
      "names": [
        "string"
      ]
    },
    "see": [
      "{@link Constants.MOVE_TYPE}"
    ],
    "meta": {
      "lineno": 394,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다",
    "defaultvalue": "\"snap\"",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 28
  },
  {
    "sort": 9999999,
    "id": "Flicking#threshold",
    "longname": "Flicking#threshold",
    "name": "threshold",
    "kind": "member",
    "scope": "instance",
    "description": "Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 401,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.",
    "defaultvalue": "40",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 29
  },
  {
    "sort": 9999999,
    "id": "Flicking#interruptable",
    "longname": "Flicking#interruptable",
    "name": "interruptable",
    "kind": "member",
    "scope": "instance",
    "description": "Set animation to be interruptable by click/touch.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 408,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 30
  },
  {
    "sort": 9999999,
    "id": "Flicking#bounce",
    "longname": "Flicking#bounce",
    "name": "bounce",
    "kind": "member",
    "scope": "instance",
    "description": "The size value of the bounce area. Only can be enabled when `circular=false`.\nYou can set different bounce value for prev/next direction by using array.\n`number` for px value, and `string` for px, and % value relative to viewport size.\nYou have to call {@link Control#updateInput} after changing this to take effect.",
    "memberof": "Flicking",
    "params": [],
    "examples": [
      "```ts\nconst possibleOptions = [\n  // % values, relative to viewport element(\".flicking-viewport\")'s size\n  \"0%\", \"25%\", \"42%\",\n  // px values, arithmetic calculation with (+/-) is also allowed.\n  \"0px\", \"100px\", \"50% - 25px\",\n  // numbers, same to number + px (\"0px\", \"100px\")\n  0, 100, 1000\n];",
      "```ts\nconst flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n\nflicking.bounce = \"100%\";\nflicking.control.updateInput(); // Call this to update!\n```"
    ],
    "type": {
      "names": [
        "string",
        "number",
        "Array.<(string|number)>"
      ]
    },
    "meta": {
      "lineno": 439,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.",
    "defaultvalue": "\"20%\"",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 31
  },
  {
    "sort": 9999999,
    "id": "Flicking#iOSEdgeSwipeThreshold",
    "longname": "Flicking#iOSEdgeSwipeThreshold",
    "name": "iOSEdgeSwipeThreshold",
    "kind": "member",
    "scope": "instance",
    "description": "Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 446,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)",
    "defaultvalue": "30",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 32
  },
  {
    "sort": 9999999,
    "id": "Flicking#preventClickOnDrag",
    "longname": "Flicking#preventClickOnDrag",
    "name": "preventClickOnDrag",
    "kind": "member",
    "scope": "instance",
    "description": "Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 453,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 33
  },
  {
    "sort": 9999999,
    "id": "Flicking#renderOnlyVisible",
    "longname": "Flicking#renderOnlyVisible",
    "name": "renderOnlyVisible",
    "kind": "member",
    "scope": "instance",
    "description": "Whether to render visible panels only. This can dramatically increase performance when there're many panels.\nThis will set {@link Flicking#renderer renderer}'s type to {@link VisibleRenderer}",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 463,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n이 옵션을 활성화할 경우 {@link Flicking#renderer renderer}의 타입을 {@link VisibleRenderer}로 설정합니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 34
  },
  {
    "sort": 9999999,
    "id": "Flicking#autoInit",
    "longname": "Flicking#autoInit",
    "name": "autoInit",
    "kind": "member",
    "scope": "instance",
    "description": "Call {@link Flicking#init init()} automatically when creating Flicking's instance",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 472,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 35
  },
  {
    "sort": 9999999,
    "id": "Flicking#autoResize",
    "longname": "Flicking#autoResize",
    "name": "autoResize",
    "kind": "member",
    "scope": "instance",
    "description": "Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\nFlicking will automatically call {@link Flicking#resize resize} window size and orientation change.",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 481,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.",
    "defaultvalue": "true",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 36
  },
  {
    "sort": 9999999,
    "id": "Flicking#renderExternal",
    "longname": "Flicking#renderExternal",
    "name": "renderExternal",
    "kind": "member",
    "scope": "instance",
    "description": "This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "meta": {
      "lineno": 490,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 37
  },
  {
    "sort": 9999999,
    "id": "Flicking#useOrderManipulator",
    "longname": "Flicking#useOrderManipulator",
    "name": "useOrderManipulator",
    "kind": "member",
    "scope": "instance",
    "description": "Use {@link OrderManipulator} for the element order managing in {@link Renderer}.\nInstead of isnerting/removing element to change order, this will use CSS {@link https://developer.mozilla.org/en-US/docs/Web/CSS/order order}.\n⚠️ Enabling this option will decrease browser coverage to IE11+",
    "memberof": "Flicking",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 501,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "{@link Renderer}에서 엘리먼트 순서 관리를 위해 {@link OrderManipulator}를 사용합니다.\n엘리먼트를 직접적으로 추가/삭제하는 대신 CSS {@link https://developer.mozilla.org/ko/docs/Web/CSS/order order} 속성을 사용해서 순서를 관리합니다.\n⚠️ 이 옵션을 사용시 IE10 이하의 브라우저는 지원할 수 없습니다.",
    "defaultvalue": "false",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "returns": [],
    "order": 38
  },
  {
    "sort": 9999999,
    "id": "Camera#element",
    "longname": "Camera#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "description": "The camera(`.flicking-camera`) element",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "meta": {
      "lineno": 46,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "카메라(`.flicking-camera`) 엘리먼트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 60
  },
  {
    "sort": 9999999,
    "id": "Camera#position",
    "longname": "Camera#position",
    "name": "position",
    "kind": "member",
    "scope": "instance",
    "description": "Current position of the camera",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 53,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 현재 좌표",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 61
  },
  {
    "sort": 9999999,
    "id": "Camera#alignPosition",
    "longname": "Camera#alignPosition",
    "name": "alignPosition",
    "kind": "member",
    "scope": "instance",
    "description": "Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 60,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 62
  },
  {
    "sort": 9999999,
    "id": "Camera#offset",
    "longname": "Camera#offset",
    "name": "offset",
    "kind": "member",
    "scope": "instance",
    "description": "Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 67,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 63
  },
  {
    "sort": 9999999,
    "id": "Camera#range",
    "longname": "Camera#range",
    "name": "range",
    "kind": "member",
    "scope": "instance",
    "description": "A range that Camera's {@link Camera#position position} can reach",
    "memberof": "Camera",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 76,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 {@link Camera#position position}이 도달 가능한 범위",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 64
  },
  {
    "sort": 9999999,
    "id": "Camera#rangeDiff",
    "longname": "Camera#rangeDiff",
    "name": "rangeDiff",
    "kind": "member",
    "scope": "instance",
    "description": "A difference between Camera's minimum and maximum position that can reach",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 83,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera가 도달 가능한 최소/최대 좌표의 차이",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 65
  },
  {
    "sort": 9999999,
    "id": "Camera#visiblePanels",
    "longname": "Camera#visiblePanels",
    "name": "visiblePanels",
    "kind": "member",
    "scope": "instance",
    "description": "An array of visible panels from the current position",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "meta": {
      "lineno": 90,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "현재 보이는 패널들의 배열",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 66
  },
  {
    "sort": 9999999,
    "id": "Camera#visibleRange",
    "longname": "Camera#visibleRange",
    "name": "visibleRange",
    "kind": "member",
    "scope": "instance",
    "description": "A range of the visible area from the current position",
    "memberof": "Camera",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 99,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "현재 위치에서 보이는 범위",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 67
  },
  {
    "sort": 9999999,
    "id": "Camera#anchorPoints",
    "longname": "Camera#anchorPoints",
    "name": "anchorPoints",
    "kind": "member",
    "scope": "instance",
    "description": "An array of {@link AnchorPoint}s that Camera can be stopped at",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "Array<AnchorPoint>"
      ]
    },
    "meta": {
      "lineno": 106,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "카메라가 도달 가능한 {@link AnchorPoint}의 목록",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 68
  },
  {
    "sort": 9999999,
    "id": "Camera#controlParams",
    "longname": "Camera#controlParams",
    "name": "controlParams",
    "kind": "member",
    "scope": "instance",
    "description": "A current parameters of the Camera for updating {@link AxesController}",
    "memberof": "Camera",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 116,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "{@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들",
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Camera {@link Camera#range range}<ko>Camera가 도달 가능한 범위({@link Camera#range range})</ko>",
        "name": "range"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Current position<ko>현재 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean indicating whether the {@link Flicking#circular circular} option is enabled<ko>{@link Flicking#circular circular}옵션 활성화 여부</ko>",
        "name": "circular"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 69
  },
  {
    "sort": 9999999,
    "id": "Camera#atEdge",
    "longname": "Camera#atEdge",
    "name": "atEdge",
    "kind": "member",
    "scope": "instance",
    "description": "A Boolean value indicating whether Camera's over the minimum or maximum position reachable",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 123,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 70
  },
  {
    "sort": 9999999,
    "id": "Camera#size",
    "longname": "Camera#size",
    "name": "size",
    "kind": "member",
    "scope": "instance",
    "description": "Return the size of the viewport",
    "memberof": "Camera",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 130,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "뷰포트 크기를 반환합니다",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "returns": [],
    "order": 71
  },
  {
    "sort": 9999999,
    "id": "Camera#align",
    "longname": "Camera#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "description": "A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element",
    "memberof": "Camera",
    "returns": [],
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "meta": {
      "lineno": 147,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "{@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값",
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "params": [],
    "order": 72
  },
  {
    "sort": 9999999,
    "id": "AxesController#axes",
    "longname": "AxesController#axes",
    "name": "axes",
    "kind": "member",
    "scope": "instance",
    "description": "An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance",
    "memberof": "AxesController",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Axes"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 34,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스",
    "see": [
      "https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html"
    ],
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "order": 104
  },
  {
    "sort": 9999999,
    "id": "AxesController#state",
    "longname": "AxesController#state",
    "name": "state",
    "kind": "member",
    "scope": "instance",
    "description": "A activated {@link State} that shows the current status of the user input or the animation",
    "memberof": "AxesController",
    "returns": [],
    "type": {
      "names": [
        "State"
      ]
    },
    "meta": {
      "lineno": 40,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다",
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "params": [],
    "order": 105
  },
  {
    "sort": 9999999,
    "id": "AxesController#animatingContext",
    "longname": "AxesController#animatingContext",
    "name": "animatingContext",
    "kind": "member",
    "scope": "instance",
    "description": "A context of the current animation playing",
    "memberof": "AxesController",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 50,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "현재 재생중인 애니메이션 정보",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A start position of the animation<ko>애니메이션 시작 지점</ko>",
        "name": "start"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A end position of the animation<ko>애니메이션 끝 지점</ko>",
        "name": "end"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "camera offset<ko>카메라 오프셋</ko>",
        "name": "offset"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "order": 106
  },
  {
    "sort": 9999999,
    "id": "AxesController#enabled",
    "longname": "AxesController#enabled",
    "name": "enabled",
    "kind": "member",
    "scope": "instance",
    "description": "A Boolean indicating whether the user input is enabled",
    "memberof": "AxesController",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 57,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "현재 사용자 입력이 활성화되었는지를 나타내는 값",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "returns": [],
    "order": 107
  },
  {
    "sort": 9999999,
    "id": "AxesController#position",
    "longname": "AxesController#position",
    "name": "position",
    "kind": "member",
    "scope": "instance",
    "description": "Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance",
    "memberof": "AxesController",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 64,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "returns": [],
    "order": 108
  },
  {
    "sort": 9999999,
    "id": "Control#controller",
    "longname": "Control#controller",
    "name": "controller",
    "kind": "member",
    "scope": "instance",
    "description": "A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events",
    "memberof": "Control",
    "params": [],
    "type": {
      "names": [
        "AxesController"
      ]
    },
    "meta": {
      "lineno": 33,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "returns": [],
    "order": 116
  },
  {
    "sort": 9999999,
    "id": "Control#activeIndex",
    "longname": "Control#activeIndex",
    "name": "activeIndex",
    "kind": "member",
    "scope": "instance",
    "description": "Index number of the {@link Flicking#currentPanel currentPanel}",
    "memberof": "Control",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 41,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link Flicking#currentPanel currentPanel}의 인덱스 번호",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "order": 117
  },
  {
    "sort": 9999999,
    "id": "Control#activePanel",
    "longname": "Control#activePanel",
    "name": "activePanel",
    "kind": "member",
    "scope": "instance",
    "description": "Currently active panel",
    "memberof": "Control",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Panel"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 49,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "현재 선택된 패널",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "order": 118
  },
  {
    "sort": 9999999,
    "id": "Control#animating",
    "longname": "Control#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "description": "Whether Flicking's animating",
    "memberof": "Control",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 56,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "returns": [],
    "order": 119
  },
  {
    "sort": 9999999,
    "id": "Control#holding",
    "longname": "Control#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "description": "Whether user is clicking or touching",
    "memberof": "Control",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 63,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "returns": [],
    "order": 120
  },
  {
    "sort": 9999999,
    "id": "AnimatingState#holding",
    "longname": "AnimatingState#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#holding",
    "description": "Whether user is clicking or touching",
    "memberof": "AnimatingState",
    "params": [],
    "type": {
      "names": [
        "false"
      ]
    },
    "meta": {
      "lineno": 23,
      "filename": "AnimatingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/AnimatingState.ts",
    "returns": [],
    "order": 135
  },
  {
    "sort": 9999999,
    "id": "AnimatingState#animating",
    "longname": "AnimatingState#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#animating",
    "description": "Whether Flicking's animating",
    "memberof": "AnimatingState",
    "params": [],
    "type": {
      "names": [
        "true"
      ]
    },
    "meta": {
      "lineno": 30,
      "filename": "AnimatingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/AnimatingState.ts",
    "returns": [],
    "order": 136
  },
  {
    "sort": 9999999,
    "id": "DisabledState#holding",
    "longname": "DisabledState#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#holding",
    "description": "Whether user is clicking or touching",
    "memberof": "DisabledState",
    "params": [],
    "type": {
      "names": [
        "false"
      ]
    },
    "meta": {
      "lineno": 19,
      "filename": "DisabledState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/DisabledState.ts",
    "returns": [],
    "order": 138
  },
  {
    "sort": 9999999,
    "id": "DisabledState#animating",
    "longname": "DisabledState#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#animating",
    "description": "Whether Flicking's animating",
    "memberof": "DisabledState",
    "params": [],
    "type": {
      "names": [
        "true"
      ]
    },
    "meta": {
      "lineno": 26,
      "filename": "DisabledState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/DisabledState.ts",
    "returns": [],
    "order": 139
  },
  {
    "sort": 9999999,
    "id": "DraggingState#holding",
    "longname": "DraggingState#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#holding",
    "description": "Whether user is clicking or touching",
    "memberof": "DraggingState",
    "params": [],
    "type": {
      "names": [
        "true"
      ]
    },
    "meta": {
      "lineno": 24,
      "filename": "DraggingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/DraggingState.ts",
    "returns": [],
    "order": 141
  },
  {
    "sort": 9999999,
    "id": "DraggingState#animating",
    "longname": "DraggingState#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#animating",
    "description": "Whether Flicking's animating",
    "memberof": "DraggingState",
    "params": [],
    "type": {
      "names": [
        "true"
      ]
    },
    "meta": {
      "lineno": 31,
      "filename": "DraggingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/DraggingState.ts",
    "returns": [],
    "order": 142
  },
  {
    "sort": 9999999,
    "id": "HoldingState#holding",
    "longname": "HoldingState#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#holding",
    "description": "Whether user is clicking or touching",
    "memberof": "HoldingState",
    "params": [],
    "type": {
      "names": [
        "true"
      ]
    },
    "meta": {
      "lineno": 25,
      "filename": "HoldingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/HoldingState.ts",
    "returns": [],
    "order": 144
  },
  {
    "sort": 9999999,
    "id": "HoldingState#animating",
    "longname": "HoldingState#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#animating",
    "description": "Whether Flicking's animating",
    "memberof": "HoldingState",
    "params": [],
    "type": {
      "names": [
        "false"
      ]
    },
    "meta": {
      "lineno": 32,
      "filename": "HoldingState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/HoldingState.ts",
    "returns": [],
    "order": 145
  },
  {
    "sort": 9999999,
    "id": "IdleState#holding",
    "longname": "IdleState#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#holding",
    "description": "Whether user is clicking or touching",
    "memberof": "IdleState",
    "params": [],
    "type": {
      "names": [
        "false"
      ]
    },
    "meta": {
      "lineno": 23,
      "filename": "IdleState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/IdleState.ts",
    "returns": [],
    "order": 147
  },
  {
    "sort": 9999999,
    "id": "IdleState#animating",
    "longname": "IdleState#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "overrides": "State#animating",
    "description": "Whether Flicking's animating",
    "memberof": "IdleState",
    "params": [],
    "type": {
      "names": [
        "false"
      ]
    },
    "meta": {
      "lineno": 30,
      "filename": "IdleState.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/IdleState.ts",
    "returns": [],
    "order": 148
  },
  {
    "sort": 9999999,
    "id": "State#holding",
    "longname": "State#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "description": "Whether user is clicking or touching",
    "memberof": "State",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 30,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "returns": [],
    "order": 150
  },
  {
    "sort": 9999999,
    "id": "State#animating",
    "longname": "State#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "description": "Whether Flicking's animating",
    "memberof": "State",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 37,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "현재 애니메이션 동작 여부",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "returns": [],
    "order": 151
  },
  {
    "sort": 9999999,
    "id": "AnchorPoint#index",
    "longname": "AnchorPoint#index",
    "name": "index",
    "kind": "member",
    "scope": "instance",
    "description": "Index of AnchorPoint",
    "memberof": "AnchorPoint",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 18,
      "filename": "AnchorPoint.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "AnchorPoint의 인덱스",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/AnchorPoint.ts",
    "returns": [],
    "order": 157
  },
  {
    "sort": 9999999,
    "id": "AnchorPoint#position",
    "longname": "AnchorPoint#position",
    "name": "position",
    "kind": "member",
    "scope": "instance",
    "description": "Position of AnchorPoint",
    "memberof": "AnchorPoint",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 25,
      "filename": "AnchorPoint.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "AnchorPoint의 좌표",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/AnchorPoint.ts",
    "returns": [],
    "order": 158
  },
  {
    "sort": 9999999,
    "id": "AnchorPoint#panel",
    "longname": "AnchorPoint#panel",
    "name": "panel",
    "kind": "member",
    "scope": "instance",
    "description": "A {@link Panel} instance AnchorPoint is referencing to",
    "memberof": "AnchorPoint",
    "params": [],
    "type": {
      "names": [
        "Panel"
      ]
    },
    "meta": {
      "lineno": 32,
      "filename": "AnchorPoint.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "AnchorPoint가 참조하고 있는 {@link Panel}",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/AnchorPoint.ts",
    "returns": [],
    "order": 159
  },
  {
    "sort": 9999999,
    "id": "Panel#element",
    "longname": "Panel#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "description": "`HTMLElement` that panel's referencing",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "meta": {
      "lineno": 43,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널이 참조하고 있는 `HTMLElement`",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 164
  },
  {
    "sort": 9999999,
    "id": "Panel#index",
    "longname": "Panel#index",
    "name": "index",
    "kind": "member",
    "scope": "instance",
    "description": "Index of the panel",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 50,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 인덱스",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 165
  },
  {
    "sort": 9999999,
    "id": "Panel#position",
    "longname": "Panel#position",
    "name": "position",
    "kind": "member",
    "scope": "instance",
    "description": "Position of the panel, including {@link Panel#alignPosition alignPosition}",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 57,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 166
  },
  {
    "sort": 9999999,
    "id": "Panel#size",
    "longname": "Panel#size",
    "name": "size",
    "kind": "member",
    "scope": "instance",
    "description": "Cached size of the panel element\nThis is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 66,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널 엘리먼트의 캐시된 크기\n이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 167
  },
  {
    "sort": 9999999,
    "id": "Panel#sizeIncludingMargin",
    "longname": "Panel#sizeIncludingMargin",
    "name": "sizeIncludingMargin",
    "kind": "member",
    "scope": "instance",
    "description": "Panel's size including CSS `margin`\nThis value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 75,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "CSS `margin`을 포함한 패널의 크기\n이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 168
  },
  {
    "sort": 9999999,
    "id": "Panel#height",
    "longname": "Panel#height",
    "name": "height",
    "kind": "member",
    "scope": "instance",
    "description": "Height of the panel element",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 82,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널 엘리먼트의 높이",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 169
  },
  {
    "sort": 9999999,
    "id": "Panel#margin",
    "longname": "Panel#margin",
    "name": "margin",
    "kind": "member",
    "scope": "instance",
    "description": "Cached CSS `margin` value of the panel element",
    "memberof": "Panel",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 93,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널 엘리먼트의 CSS `margin` 값",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n<ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>",
        "name": "prev"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n<ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>",
        "name": "next"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "order": 170
  },
  {
    "sort": 9999999,
    "id": "Panel#alignPosition",
    "longname": "Panel#alignPosition",
    "name": "alignPosition",
    "kind": "member",
    "scope": "instance",
    "description": "Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 100,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 171
  },
  {
    "sort": 9999999,
    "id": "Panel#offset",
    "longname": "Panel#offset",
    "name": "offset",
    "kind": "member",
    "scope": "instance",
    "description": "Panel's position offset which is changed after panel element's order changes if {@link Flicking#circular circular} is enabled",
    "memberof": "Panel",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 108,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "현재 패널의 위치 오프셋 값. {@link Flicking#circular circular} 모드에서 패널의 엘리먼트의 순서가 변경될 때 이 값이 변경됩니다",
    "defaultvalue": "0",
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "order": 172
  },
  {
    "sort": 9999999,
    "id": "Panel#removed",
    "longname": "Panel#removed",
    "name": "removed",
    "kind": "member",
    "scope": "instance",
    "description": "A value indicating whether the panel's {@link Flicking#remove remove}d",
    "memberof": "Panel",
    "params": [],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "meta": {
      "lineno": 115,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "returns": [],
    "order": 173
  },
  {
    "sort": 9999999,
    "id": "Panel#range",
    "longname": "Panel#range",
    "name": "range",
    "kind": "member",
    "scope": "instance",
    "description": "Panel element's range of the bounding box",
    "memberof": "Panel",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "meta": {
      "lineno": 124,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널 엘리먼트의 Bounding box 범위",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)",
        "name": "max"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "order": 174
  },
  {
    "sort": 9999999,
    "id": "Panel#align",
    "longname": "Panel#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "description": "A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element",
    "memberof": "Panel",
    "returns": [],
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "meta": {
      "lineno": 132,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "{@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값",
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "params": [],
    "order": 175
  },
  {
    "sort": 9999999,
    "id": "Viewport#element",
    "longname": "Viewport#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "description": "A viewport(root) element",
    "memberof": "Viewport",
    "params": [],
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "meta": {
      "lineno": 22,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트(root) 엘리먼트",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 193
  },
  {
    "sort": 9999999,
    "id": "Viewport#width",
    "longname": "Viewport#width",
    "name": "width",
    "kind": "member",
    "scope": "instance",
    "description": "Viewport width",
    "memberof": "Viewport",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 30,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트 너비",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 194
  },
  {
    "sort": 9999999,
    "id": "Viewport#height",
    "longname": "Viewport#height",
    "name": "height",
    "kind": "member",
    "scope": "instance",
    "description": "Viewport height",
    "memberof": "Viewport",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 37,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트 높이",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 195
  },
  {
    "sort": 9999999,
    "id": "Renderer#panels",
    "longname": "Renderer#panels",
    "name": "panels",
    "kind": "member",
    "scope": "instance",
    "description": "Array of panels",
    "memberof": "Renderer",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "see": [
      "Panel"
    ],
    "meta": {
      "lineno": 38,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "전체 패널들의 배열",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "order": 215
  },
  {
    "sort": 9999999,
    "id": "Renderer#panelCount",
    "longname": "Renderer#panelCount",
    "name": "panelCount",
    "kind": "member",
    "scope": "instance",
    "description": "Count of panels",
    "memberof": "Renderer",
    "params": [],
    "type": {
      "names": [
        "number"
      ]
    },
    "meta": {
      "lineno": 45,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "전체 패널의 개수",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "returns": [],
    "order": 216
  },
  {
    "sort": 9999999,
    "id": "Renderer#elementManipulator",
    "longname": "Renderer#elementManipulator",
    "name": "elementManipulator",
    "kind": "member",
    "scope": "instance",
    "description": "An instance of the {@link OffsetManipulator} that Renderer's using",
    "memberof": "Renderer",
    "params": [],
    "type": {
      "names": [
        "OffsetManipulator"
      ]
    },
    "meta": {
      "lineno": 52,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "Renderer가 현재 사용중인 {@link OffsetManipulator}의 인스턴스",
    "readonly": true,
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "returns": [],
    "order": 217
  },
  {
    "sort": 9999999,
    "id": "Renderer#align",
    "longname": "Renderer#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "description": "A {@link Panel}'s {@link Panel#align align} value that applied to all panels",
    "memberof": "Renderer",
    "returns": [],
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "meta": {
      "lineno": 60,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "{@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값",
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "params": [],
    "order": 218
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 46,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#element",
    "longname": "BoundCamera#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#element",
    "description": "The camera(`.flicking-camera`) element",
    "params": [],
    "returns": [],
    "ko": "카메라(`.flicking-camera`) 엘리먼트",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "readonly": true,
    "order": 259
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 53,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#position",
    "longname": "BoundCamera#position",
    "name": "position",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#position",
    "description": "Current position of the camera",
    "params": [],
    "returns": [],
    "ko": "Camera의 현재 좌표",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 260
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 60,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#alignPosition",
    "longname": "BoundCamera#alignPosition",
    "name": "alignPosition",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#alignPosition",
    "description": "Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at",
    "params": [],
    "returns": [],
    "ko": "패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 261
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 67,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#offset",
    "longname": "BoundCamera#offset",
    "name": "offset",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#offset",
    "description": "Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option",
    "params": [],
    "returns": [],
    "ko": "Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "0",
    "order": 262
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 76,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#range",
    "longname": "BoundCamera#range",
    "name": "range",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#range",
    "inherited": true,
    "description": "A range that Camera's {@link Camera#position position} can reach",
    "params": [],
    "returns": [],
    "ko": "Camera의 {@link Camera#position position}이 도달 가능한 범위",
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "order": 263
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 83,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#rangeDiff",
    "longname": "BoundCamera#rangeDiff",
    "name": "rangeDiff",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#rangeDiff",
    "description": "A difference between Camera's minimum and maximum position that can reach",
    "params": [],
    "returns": [],
    "ko": "Camera가 도달 가능한 최소/최대 좌표의 차이",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 264
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 90,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#visiblePanels",
    "longname": "BoundCamera#visiblePanels",
    "name": "visiblePanels",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#visiblePanels",
    "description": "An array of visible panels from the current position",
    "params": [],
    "returns": [],
    "ko": "현재 보이는 패널들의 배열",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "readonly": true,
    "order": 265
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 99,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#visibleRange",
    "longname": "BoundCamera#visibleRange",
    "name": "visibleRange",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#visibleRange",
    "inherited": true,
    "description": "A range of the visible area from the current position",
    "params": [],
    "returns": [],
    "ko": "현재 위치에서 보이는 범위",
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "order": 266
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 106,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#anchorPoints",
    "longname": "BoundCamera#anchorPoints",
    "name": "anchorPoints",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#anchorPoints",
    "description": "An array of {@link AnchorPoint}s that Camera can be stopped at",
    "params": [],
    "returns": [],
    "ko": "카메라가 도달 가능한 {@link AnchorPoint}의 목록",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "Array<AnchorPoint>"
      ]
    },
    "readonly": true,
    "order": 267
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 116,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#controlParams",
    "longname": "BoundCamera#controlParams",
    "name": "controlParams",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#controlParams",
    "inherited": true,
    "description": "A current parameters of the Camera for updating {@link AxesController}",
    "params": [],
    "returns": [],
    "ko": "{@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들",
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Camera {@link Camera#range range}<ko>Camera가 도달 가능한 범위({@link Camera#range range})</ko>",
        "name": "range"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Current position<ko>현재 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean indicating whether the {@link Flicking#circular circular} option is enabled<ko>{@link Flicking#circular circular}옵션 활성화 여부</ko>",
        "name": "circular"
      }
    ],
    "order": 268
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 123,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#atEdge",
    "longname": "BoundCamera#atEdge",
    "name": "atEdge",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#atEdge",
    "description": "A Boolean value indicating whether Camera's over the minimum or maximum position reachable",
    "params": [],
    "returns": [],
    "ko": "현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "order": 269
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 130,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#size",
    "longname": "BoundCamera#size",
    "name": "size",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#size",
    "description": "Return the size of the viewport",
    "params": [],
    "returns": [],
    "ko": "뷰포트 크기를 반환합니다",
    "inherited": true,
    "memberof": "BoundCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 270
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#align",
    "meta": {
      "lineno": 147,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#align",
    "inherited": true,
    "description": "A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element",
    "memberof": "BoundCamera",
    "params": [],
    "returns": [],
    "ko": "{@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값",
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "order": 271
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 46,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#element",
    "longname": "CircularCamera#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#element",
    "description": "The camera(`.flicking-camera`) element",
    "params": [],
    "returns": [],
    "ko": "카메라(`.flicking-camera`) 엘리먼트",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "readonly": true,
    "order": 286
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 53,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#position",
    "longname": "CircularCamera#position",
    "name": "position",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#position",
    "description": "Current position of the camera",
    "params": [],
    "returns": [],
    "ko": "Camera의 현재 좌표",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 287
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 60,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#alignPosition",
    "longname": "CircularCamera#alignPosition",
    "name": "alignPosition",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#alignPosition",
    "description": "Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at",
    "params": [],
    "returns": [],
    "ko": "패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 288
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 67,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#offset",
    "longname": "CircularCamera#offset",
    "name": "offset",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#offset",
    "description": "Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option",
    "params": [],
    "returns": [],
    "ko": "Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "0",
    "order": 289
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 76,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#range",
    "longname": "CircularCamera#range",
    "name": "range",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#range",
    "inherited": true,
    "description": "A range that Camera's {@link Camera#position position} can reach",
    "params": [],
    "returns": [],
    "ko": "Camera의 {@link Camera#position position}이 도달 가능한 범위",
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "order": 290
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 83,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#rangeDiff",
    "longname": "CircularCamera#rangeDiff",
    "name": "rangeDiff",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#rangeDiff",
    "description": "A difference between Camera's minimum and maximum position that can reach",
    "params": [],
    "returns": [],
    "ko": "Camera가 도달 가능한 최소/최대 좌표의 차이",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 291
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 90,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#visiblePanels",
    "longname": "CircularCamera#visiblePanels",
    "name": "visiblePanels",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#visiblePanels",
    "description": "An array of visible panels from the current position",
    "params": [],
    "returns": [],
    "ko": "현재 보이는 패널들의 배열",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "readonly": true,
    "order": 292
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 99,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#visibleRange",
    "longname": "CircularCamera#visibleRange",
    "name": "visibleRange",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#visibleRange",
    "inherited": true,
    "description": "A range of the visible area from the current position",
    "params": [],
    "returns": [],
    "ko": "현재 위치에서 보이는 범위",
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "order": 293
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 106,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#anchorPoints",
    "longname": "CircularCamera#anchorPoints",
    "name": "anchorPoints",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#anchorPoints",
    "description": "An array of {@link AnchorPoint}s that Camera can be stopped at",
    "params": [],
    "returns": [],
    "ko": "카메라가 도달 가능한 {@link AnchorPoint}의 목록",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "Array<AnchorPoint>"
      ]
    },
    "readonly": true,
    "order": 294
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 116,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#controlParams",
    "longname": "CircularCamera#controlParams",
    "name": "controlParams",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#controlParams",
    "inherited": true,
    "overrides": "Camera#controlParams",
    "description": "A current parameters of the Camera for updating {@link AxesController}",
    "params": [],
    "returns": [],
    "ko": "{@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들",
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Camera {@link Camera#range range}<ko>Camera가 도달 가능한 범위({@link Camera#range range})</ko>",
        "name": "range"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Current position<ko>현재 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean indicating whether the {@link Flicking#circular circular} option is enabled<ko>{@link Flicking#circular circular}옵션 활성화 여부</ko>",
        "name": "circular"
      }
    ],
    "order": 295
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 123,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#atEdge",
    "longname": "CircularCamera#atEdge",
    "name": "atEdge",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#atEdge",
    "description": "A Boolean value indicating whether Camera's over the minimum or maximum position reachable",
    "params": [],
    "returns": [],
    "ko": "현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "order": 296
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 130,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#size",
    "longname": "CircularCamera#size",
    "name": "size",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#size",
    "description": "Return the size of the viewport",
    "params": [],
    "returns": [],
    "ko": "뷰포트 크기를 반환합니다",
    "inherited": true,
    "memberof": "CircularCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 297
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#align",
    "meta": {
      "lineno": 147,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#align",
    "inherited": true,
    "description": "A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element",
    "memberof": "CircularCamera",
    "params": [],
    "returns": [],
    "ko": "{@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값",
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "order": 298
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 46,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#element",
    "longname": "LinearCamera#element",
    "name": "element",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#element",
    "description": "The camera(`.flicking-camera`) element",
    "params": [],
    "returns": [],
    "ko": "카메라(`.flicking-camera`) 엘리먼트",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "HTMLElement"
      ]
    },
    "readonly": true,
    "order": 313
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 53,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#position",
    "longname": "LinearCamera#position",
    "name": "position",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#position",
    "description": "Current position of the camera",
    "params": [],
    "returns": [],
    "ko": "Camera의 현재 좌표",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 314
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 60,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#alignPosition",
    "longname": "LinearCamera#alignPosition",
    "name": "alignPosition",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#alignPosition",
    "description": "Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at",
    "params": [],
    "returns": [],
    "ko": "패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 315
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 67,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#offset",
    "longname": "LinearCamera#offset",
    "name": "offset",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#offset",
    "description": "Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option",
    "params": [],
    "returns": [],
    "ko": "Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "0",
    "order": 316
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 76,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#range",
    "longname": "LinearCamera#range",
    "name": "range",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#range",
    "inherited": true,
    "description": "A range that Camera's {@link Camera#position position} can reach",
    "params": [],
    "returns": [],
    "ko": "Camera의 {@link Camera#position position}이 도달 가능한 범위",
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "order": 317
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 83,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#rangeDiff",
    "longname": "LinearCamera#rangeDiff",
    "name": "rangeDiff",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#rangeDiff",
    "description": "A difference between Camera's minimum and maximum position that can reach",
    "params": [],
    "returns": [],
    "ko": "Camera가 도달 가능한 최소/최대 좌표의 차이",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 318
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 90,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#visiblePanels",
    "longname": "LinearCamera#visiblePanels",
    "name": "visiblePanels",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#visiblePanels",
    "description": "An array of visible panels from the current position",
    "params": [],
    "returns": [],
    "ko": "현재 보이는 패널들의 배열",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "readonly": true,
    "order": 319
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 99,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#visibleRange",
    "longname": "LinearCamera#visibleRange",
    "name": "visibleRange",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#visibleRange",
    "inherited": true,
    "description": "A range of the visible area from the current position",
    "params": [],
    "returns": [],
    "ko": "현재 위치에서 보이는 범위",
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A minimum position<ko>최소 위치</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A maximum position<ko>최대 위치</ko>",
        "name": "min"
      }
    ],
    "order": 320
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 106,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#anchorPoints",
    "longname": "LinearCamera#anchorPoints",
    "name": "anchorPoints",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#anchorPoints",
    "description": "An array of {@link AnchorPoint}s that Camera can be stopped at",
    "params": [],
    "returns": [],
    "ko": "카메라가 도달 가능한 {@link AnchorPoint}의 목록",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "Array<AnchorPoint>"
      ]
    },
    "readonly": true,
    "order": 321
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 116,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#controlParams",
    "longname": "LinearCamera#controlParams",
    "name": "controlParams",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#controlParams",
    "inherited": true,
    "description": "A current parameters of the Camera for updating {@link AxesController}",
    "params": [],
    "returns": [],
    "ko": "{@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들",
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "object"
      ]
    },
    "readonly": true,
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Camera {@link Camera#range range}<ko>Camera가 도달 가능한 범위({@link Camera#range range})</ko>",
        "name": "range"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Current position<ko>현재 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean indicating whether the {@link Flicking#circular circular} option is enabled<ko>{@link Flicking#circular circular}옵션 활성화 여부</ko>",
        "name": "circular"
      }
    ],
    "order": 322
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 123,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#atEdge",
    "longname": "LinearCamera#atEdge",
    "name": "atEdge",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#atEdge",
    "description": "A Boolean value indicating whether Camera's over the minimum or maximum position reachable",
    "params": [],
    "returns": [],
    "ko": "현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "order": 323
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 130,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "LinearCamera#size",
    "longname": "LinearCamera#size",
    "name": "size",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#size",
    "description": "Return the size of the viewport",
    "params": [],
    "returns": [],
    "ko": "뷰포트 크기를 반환합니다",
    "inherited": true,
    "memberof": "LinearCamera",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 324
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#align",
    "meta": {
      "lineno": 147,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "inherits": "Camera#align",
    "inherited": true,
    "description": "A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element",
    "memberof": "LinearCamera",
    "params": [],
    "returns": [],
    "ko": "{@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값",
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "order": 325
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 33,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "FreeControl#controller",
    "longname": "FreeControl#controller",
    "name": "controller",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#controller",
    "description": "A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events",
    "params": [],
    "returns": [],
    "ko": "{@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트",
    "inherited": true,
    "memberof": "FreeControl",
    "type": {
      "names": [
        "AxesController"
      ]
    },
    "readonly": true,
    "order": 340
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 41,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "FreeControl#activeIndex",
    "longname": "FreeControl#activeIndex",
    "name": "activeIndex",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#activeIndex",
    "inherited": true,
    "description": "Index number of the {@link Flicking#currentPanel currentPanel}",
    "memberof": "FreeControl",
    "params": [],
    "returns": [],
    "ko": "{@link Flicking#currentPanel currentPanel}의 인덱스 번호",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "0",
    "readonly": true,
    "order": 341
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 49,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "FreeControl#activePanel",
    "longname": "FreeControl#activePanel",
    "name": "activePanel",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#activePanel",
    "inherited": true,
    "description": "Currently active panel",
    "memberof": "FreeControl",
    "params": [],
    "returns": [],
    "ko": "현재 선택된 패널",
    "type": {
      "names": [
        "Panel"
      ]
    },
    "readonly": true,
    "see": [
      "Panel"
    ],
    "order": 342
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 56,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "FreeControl#animating",
    "longname": "FreeControl#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#animating",
    "description": "Whether Flicking's animating",
    "params": [],
    "returns": [],
    "ko": "현재 애니메이션 동작 여부",
    "inherited": true,
    "memberof": "FreeControl",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "order": 343
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 63,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "FreeControl#holding",
    "longname": "FreeControl#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#holding",
    "description": "Whether user is clicking or touching",
    "params": [],
    "returns": [],
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "inherited": true,
    "memberof": "FreeControl",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "order": 344
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 33,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "SnapControl#controller",
    "longname": "SnapControl#controller",
    "name": "controller",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#controller",
    "description": "A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events",
    "params": [],
    "returns": [],
    "ko": "{@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트",
    "inherited": true,
    "memberof": "SnapControl",
    "type": {
      "names": [
        "AxesController"
      ]
    },
    "readonly": true,
    "order": 352
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 41,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "SnapControl#activeIndex",
    "longname": "SnapControl#activeIndex",
    "name": "activeIndex",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#activeIndex",
    "inherited": true,
    "description": "Index number of the {@link Flicking#currentPanel currentPanel}",
    "memberof": "SnapControl",
    "params": [],
    "returns": [],
    "ko": "{@link Flicking#currentPanel currentPanel}의 인덱스 번호",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "0",
    "readonly": true,
    "order": 353
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 49,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "SnapControl#activePanel",
    "longname": "SnapControl#activePanel",
    "name": "activePanel",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#activePanel",
    "inherited": true,
    "description": "Currently active panel",
    "memberof": "SnapControl",
    "params": [],
    "returns": [],
    "ko": "현재 선택된 패널",
    "type": {
      "names": [
        "Panel"
      ]
    },
    "readonly": true,
    "see": [
      "Panel"
    ],
    "order": 354
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 56,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "SnapControl#animating",
    "longname": "SnapControl#animating",
    "name": "animating",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#animating",
    "description": "Whether Flicking's animating",
    "params": [],
    "returns": [],
    "ko": "현재 애니메이션 동작 여부",
    "inherited": true,
    "memberof": "SnapControl",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "order": 355
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 63,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "SnapControl#holding",
    "longname": "SnapControl#holding",
    "name": "holding",
    "kind": "member",
    "scope": "instance",
    "inherits": "Control#holding",
    "description": "Whether user is clicking or touching",
    "params": [],
    "returns": [],
    "ko": "현재 사용자가 클릭/터치중인지 여부",
    "inherited": true,
    "memberof": "SnapControl",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "order": 356
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 38,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "id": "RawRenderer#panels",
    "longname": "RawRenderer#panels",
    "name": "panels",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#panels",
    "inherited": true,
    "description": "Array of panels",
    "memberof": "RawRenderer",
    "params": [],
    "returns": [],
    "ko": "전체 패널들의 배열",
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "readonly": true,
    "see": [
      "Panel"
    ],
    "order": 419
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 45,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "id": "RawRenderer#panelCount",
    "longname": "RawRenderer#panelCount",
    "name": "panelCount",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#panelCount",
    "description": "Count of panels",
    "params": [],
    "returns": [],
    "ko": "전체 패널의 개수",
    "inherited": true,
    "memberof": "RawRenderer",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 420
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 52,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "id": "RawRenderer#elementManipulator",
    "longname": "RawRenderer#elementManipulator",
    "name": "elementManipulator",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#elementManipulator",
    "description": "An instance of the {@link OffsetManipulator} that Renderer's using",
    "params": [],
    "returns": [],
    "ko": "Renderer가 현재 사용중인 {@link OffsetManipulator}의 인스턴스",
    "inherited": true,
    "memberof": "RawRenderer",
    "type": {
      "names": [
        "OffsetManipulator"
      ]
    },
    "readonly": true,
    "order": 421
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#align",
    "meta": {
      "lineno": 60,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "RawRenderer#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#align",
    "inherited": true,
    "description": "A {@link Panel}'s {@link Panel#align align} value that applied to all panels",
    "memberof": "RawRenderer",
    "params": [],
    "returns": [],
    "ko": "{@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값",
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "order": 422
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 38,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "id": "VisibleRenderer#panels",
    "longname": "VisibleRenderer#panels",
    "name": "panels",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#panels",
    "inherited": true,
    "description": "Array of panels",
    "memberof": "VisibleRenderer",
    "params": [],
    "returns": [],
    "ko": "전체 패널들의 배열",
    "type": {
      "names": [
        "Array<Panel>"
      ]
    },
    "readonly": true,
    "see": [
      "Panel"
    ],
    "order": 429
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 45,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "id": "VisibleRenderer#panelCount",
    "longname": "VisibleRenderer#panelCount",
    "name": "panelCount",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#panelCount",
    "description": "Count of panels",
    "params": [],
    "returns": [],
    "ko": "전체 패널의 개수",
    "inherited": true,
    "memberof": "VisibleRenderer",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "order": 430
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 52,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "id": "VisibleRenderer#elementManipulator",
    "longname": "VisibleRenderer#elementManipulator",
    "name": "elementManipulator",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#elementManipulator",
    "description": "An instance of the {@link OffsetManipulator} that Renderer's using",
    "params": [],
    "returns": [],
    "ko": "Renderer가 현재 사용중인 {@link OffsetManipulator}의 인스턴스",
    "inherited": true,
    "memberof": "VisibleRenderer",
    "type": {
      "names": [
        "OffsetManipulator"
      ]
    },
    "readonly": true,
    "order": 431
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#align",
    "meta": {
      "lineno": 60,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "VisibleRenderer#align",
    "name": "align",
    "kind": "member",
    "scope": "instance",
    "inherits": "Renderer#align",
    "inherited": true,
    "description": "A {@link Panel}'s {@link Panel#align align} value that applied to all panels",
    "memberof": "VisibleRenderer",
    "params": [],
    "returns": [],
    "ko": "{@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값",
    "type": {
      "names": [
        "Constants.ALIGN",
        "string",
        "number"
      ]
    },
    "order": 432
  },
  {
    "sort": 9999999,
    "id": "Flicking#init",
    "longname": "Flicking#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "description": "Initialize Flicking and move to the default index\nThis is automatically called on Flicking's constructor when `autoInit` is true(default)",
    "memberof": "Flicking",
    "params": [],
    "fires": [
      "Flicking#event:ready"
    ],
    "meta": {
      "lineno": 634,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 41
  },
  {
    "sort": 9999999,
    "id": "Flicking#destroy",
    "longname": "Flicking#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Destroy Flicking and remove all event handlers",
    "memberof": "Flicking",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 670,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 42
  },
  {
    "sort": 9999999,
    "id": "Flicking#prev",
    "longname": "Flicking#prev",
    "name": "prev",
    "kind": "function",
    "scope": "instance",
    "description": "Move to the previous panel (current index - 1)",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "{@link Flicking#duration options.duration}",
        "description": "Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n</ko>"
      }
    ],
    "meta": {
      "lineno": 716,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "이전 패널로 이동합니다 (현재 인덱스 - 1)",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 43
  },
  {
    "sort": 9999999,
    "id": "Flicking#next",
    "longname": "Flicking#next",
    "name": "next",
    "kind": "function",
    "scope": "instance",
    "description": "Move to the next panel (current index + 1)",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "{@link Flicking#duration options.duration}",
        "description": "Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "meta": {
      "lineno": 753,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "다음 패널로 이동합니다 (현재 인덱스 + 1)",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 44
  },
  {
    "sort": 9999999,
    "id": "Flicking#moveTo",
    "longname": "Flicking#moveTo",
    "name": "moveTo",
    "kind": "function",
    "scope": "instance",
    "description": "Move to the panel with given index",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The index of the panel to move<ko>이동할 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "{@link Flicking#duration options.duration}",
        "description": "Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "Constants#DIRECTION"
          ]
        },
        "optional": true,
        "defaultvalue": "DIRECTION.NONE",
        "description": "Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>",
        "name": "direction"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n|{@link Constants.ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "meta": {
      "lineno": 792,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "주어진 인덱스에 해당하는 패널로 이동합니다",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 45
  },
  {
    "sort": 9999999,
    "id": "Flicking#getPanel",
    "longname": "Flicking#getPanel",
    "name": "getPanel",
    "kind": "function",
    "scope": "instance",
    "description": "Return the {@link Panel} at the given index. `null` if it doesn't exists.",
    "memberof": "Flicking",
    "params": [
      {
        "name": "index",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "examples": [
      "```ts\nconst panel = flicking.getPanel(0);\n// Which is a shorthand to...\nconst samePanel = flicking.panels[0];\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>"
      }
    ],
    "meta": {
      "lineno": 824,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.",
    "see": [
      "Panel"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 46
  },
  {
    "sort": 9999999,
    "id": "Flicking#enableInput",
    "longname": "Flicking#enableInput",
    "name": "enableInput",
    "kind": "function",
    "scope": "instance",
    "description": "Enable input from the user (mouse/touch)",
    "memberof": "Flicking",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 833,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 입력(마우스/터치)를 활성화합니다",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 47
  },
  {
    "sort": 9999999,
    "id": "Flicking#disableInput",
    "longname": "Flicking#disableInput",
    "name": "disableInput",
    "kind": "function",
    "scope": "instance",
    "description": "Disable input from the user (mouse/touch)",
    "memberof": "Flicking",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 843,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "사용자의 입력(마우스/터치)를 막습니다",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 48
  },
  {
    "sort": 9999999,
    "id": "Flicking#getStatus",
    "longname": "Flicking#getStatus",
    "name": "getStatus",
    "kind": "function",
    "scope": "instance",
    "description": "Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link Flicking#setStatus}",
    "memberof": "Flicking",
    "returns": [
      {
        "description": "An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>"
      }
    ],
    "meta": {
      "lineno": 853,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "현재 상태를 반환합니다. 반환받은 값을 [setStatus()]{@link Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "order": 49
  },
  {
    "sort": 9999999,
    "id": "Flicking#setStatus",
    "longname": "Flicking#setStatus",
    "name": "setStatus",
    "kind": "function",
    "scope": "instance",
    "description": "Restore to the state of the `status`",
    "memberof": "Flicking",
    "params": [
      {
        "description": "Status value to be restored. You can specify the return value of the [getStatus()]{@link Flicking#getStatus} method<ko>복원할 상태 값. [getStatus()]{@link Flicking#getStatus}메서드의 반환값을 지정하면 됩니다</ko>",
        "name": "status",
        "type": {
          "names": [
            ""
          ]
        }
      }
    ],
    "meta": {
      "lineno": 868,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "`status`의 상태로 복원합니다",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 50
  },
  {
    "sort": 9999999,
    "id": "Flicking#addPlugins",
    "longname": "Flicking#addPlugins",
    "name": "addPlugins",
    "kind": "function",
    "scope": "instance",
    "description": "Add plugins that can have different effects on Flicking",
    "memberof": "Flicking",
    "params": [
      {
        "description": "The plugin(s) to add<ko>추가할 플러그인(들)</ko>",
        "name": "plugins",
        "type": {
          "names": [
            "$ts:Plugin | Plugin[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 879,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 51
  },
  {
    "sort": 9999999,
    "id": "Flicking#removePlugins",
    "longname": "Flicking#removePlugins",
    "name": "removePlugins",
    "kind": "function",
    "scope": "instance",
    "description": "Remove plugins from Flicking.",
    "memberof": "Flicking",
    "params": [
      {
        "description": "The plugin(s) to remove.<ko>제거 플러그인(들).</ko>",
        "name": "plugins",
        "type": {
          "names": [
            "$ts:Plugin | Plugin[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 890,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "플리킹으로부터 플러그인들을 제거합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 52
  },
  {
    "sort": 9999999,
    "id": "Flicking#resize",
    "longname": "Flicking#resize",
    "name": "resize",
    "kind": "function",
    "scope": "instance",
    "description": "Update viewport/panel sizes",
    "memberof": "Flicking",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 903,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 및 뷰포트의 크기를 갱신합니다",
    "fires": [
      "Flicking#event:beforeResize",
      "Flicking#event:afterResize"
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 53
  },
  {
    "sort": 9999999,
    "id": "Flicking#append",
    "longname": "Flicking#append",
    "name": "append",
    "kind": "function",
    "scope": "instance",
    "description": "Add new panels after the last panel",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "Flicking.ElementLike",
            "Array.<Flicking.ElementLike>"
          ]
        },
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element"
      }
    ],
    "examples": [
      "```ts\nconst flicking = new Flicking(\"#flick\");\n// These are possible parameters\nflicking.append(document.createElement(\"div\"));\nflicking.append(\"\\<div\\>Panel\\</div\\>\");\nflicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n// Even this is possible\nflicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n```"
    ],
    "see": [
      "Panel",
      "Flicking.ElementLike"
    ],
    "meta": {
      "lineno": 965,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 목록의 제일 끝에 새로운 패널들을 추가합니다",
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of appended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 54
  },
  {
    "sort": 9999999,
    "id": "Flicking#prepend",
    "longname": "Flicking#prepend",
    "name": "prepend",
    "kind": "function",
    "scope": "instance",
    "description": "Add new panels before the first panel\nThis will increase index of panels after by the number of panels added",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "Flicking.ElementLike",
            "Array.<Flicking.ElementLike>"
          ]
        },
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element"
      }
    ],
    "examples": [
      "```ts\nconst flicking = new eg.Flicking(\"#flick\");\nflicking.prepend(document.createElement(\"div\"));\nflicking.prepend(\"\\<div\\>Panel\\</div\\>\");\nflicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n// Even this is possible\nflicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n```"
    ],
    "see": [
      "Panel",
      "Flicking.ElementLike"
    ],
    "meta": {
      "lineno": 990,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of prepended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 55
  },
  {
    "sort": 9999999,
    "id": "Flicking#insert",
    "longname": "Flicking#insert",
    "name": "insert",
    "kind": "function",
    "scope": "instance",
    "description": "Insert new panels at given index\nThis will increase index of panels after by the number of panels added",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Flicking.ElementLike",
            "Array.<Flicking.ElementLike>"
          ]
        },
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element"
      }
    ],
    "examples": [
      "```ts\nconst flicking = new eg.Flicking(\"#flick\");\nflicking.insert(0, document.createElement(\"div\"));\nflicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\nflicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n// Even this is possible\nflicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n```"
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)"
      }
    ],
    "meta": {
      "lineno": 1014,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "주어진 인덱스에 새로운 패널들을 추가합니다\n해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of prepended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 56
  },
  {
    "sort": 9999999,
    "id": "Flicking#remove",
    "longname": "Flicking#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "description": "Remove the panel at the given index\nThis will decrease index of panels after by the number of panels removed",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index of panel to remove<ko>제거할 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 1,
        "description": "Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>",
        "name": "deleteCount"
      }
    ],
    "meta": {
      "lineno": 1031,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "주어진 인덱스의 패널을 제거합니다\n해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다",
    "returns": [
      {
        "description": "An array of removed panels<ko>제거된 패널들의 배열</ko>",
        "type": {
          "names": [
            "$ts:Panel[]<file>/home/wn/egjs-flicking/src/Flicking.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "order": 57
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#updateRange",
    "longname": "BoundCamera#updateRange",
    "name": "updateRange",
    "kind": "function",
    "scope": "instance",
    "overrides": "Camera#updateRange",
    "description": "Update {@link Camera#range range} of Camera",
    "memberof": "BoundCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "meta": {
      "lineno": 23,
      "filename": "BoundCamera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 {@link Camera#range range}를 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/camera/BoundCamera.ts",
    "chainable": true,
    "order": 59
  },
  {
    "sort": 9999999,
    "id": "Camera#updateRange",
    "longname": "Camera#updateRange",
    "name": "updateRange",
    "kind": "function",
    "scope": "instance",
    "description": "Update {@link Camera#range range} of Camera",
    "memberof": "Camera",
    "meta": {
      "lineno": 165,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 {@link Camera#range range}를 업데이트합니다",
    "virtual": true,
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "chainable": true,
    "order": 75
  },
  {
    "sort": 9999999,
    "id": "Camera#init",
    "longname": "Camera#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "description": "Initialize Camera",
    "memberof": "Camera",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 191,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera를 초기화합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n<ko>{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "chainable": true,
    "order": 76
  },
  {
    "sort": 9999999,
    "id": "Camera#destroy",
    "longname": "Camera#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Destroy Camera and return to initial state",
    "memberof": "Camera",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 208,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera를 초기 상태로 되돌립니다",
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "params": [],
    "order": 77
  },
  {
    "sort": 9999999,
    "id": "Camera#lookAt",
    "longname": "Camera#lookAt",
    "name": "lookAt",
    "kind": "function",
    "scope": "instance",
    "description": "Move to the given position and apply CSS transform",
    "memberof": "Camera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A new position<ko>움직일 위치</ko>",
        "name": "pos"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 223,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "해당 좌표로 이동하고, CSS transform을 적용합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 78
  },
  {
    "sort": 9999999,
    "id": "Camera#getPrevAnchor",
    "longname": "Camera#getPrevAnchor",
    "name": "getPrevAnchor",
    "kind": "function",
    "scope": "instance",
    "description": "Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "Camera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "meta": {
      "lineno": 243,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 79
  },
  {
    "sort": 9999999,
    "id": "Camera#getNextAnchor",
    "longname": "Camera#getNextAnchor",
    "name": "getNextAnchor",
    "kind": "function",
    "scope": "instance",
    "description": "Return a next {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "Camera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "meta": {
      "lineno": 255,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 80
  },
  {
    "sort": 9999999,
    "id": "Camera#findAnchorIncludePosition",
    "longname": "Camera#findAnchorIncludePosition",
    "name": "findAnchorIncludePosition",
    "kind": "function",
    "scope": "instance",
    "description": "Return {@link AnchorPoint} that includes given position\nIf there's no {@link AnchorPoint} that includes the given position, return `null` instead",
    "memberof": "Camera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "meta": {
      "lineno": 267,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다",
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 81
  },
  {
    "sort": 9999999,
    "id": "Camera#findNearestAnchor",
    "longname": "Camera#findNearestAnchor",
    "name": "findNearestAnchor",
    "kind": "function",
    "scope": "instance",
    "description": "Return {@link AnchorPoint} nearest to given position\nIf there're no {@link AnchorPoint}s, return `null` instead",
    "memberof": "Camera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "meta": {
      "lineno": 287,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n{@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다",
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 82
  },
  {
    "sort": 9999999,
    "id": "Camera#clampToReachablePosition",
    "longname": "Camera#clampToReachablePosition",
    "name": "clampToReachablePosition",
    "kind": "function",
    "scope": "instance",
    "description": "Clamp the given position between camera's range",
    "memberof": "Camera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to clamp<ko>범위를 제한할 좌표</ko>",
        "name": "position"
      }
    ],
    "meta": {
      "lineno": 315,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다",
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A clamped position<ko>범위 제한된 좌표</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 83
  },
  {
    "sort": 9999999,
    "id": "Camera#canReach",
    "longname": "Camera#canReach",
    "name": "canReach",
    "kind": "function",
    "scope": "instance",
    "description": "Check whether the given panel is inside of the Camera's range",
    "memberof": "Camera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 326,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 84
  },
  {
    "sort": 9999999,
    "id": "Camera#canSee",
    "longname": "Camera#canSee",
    "name": "canSee",
    "kind": "function",
    "scope": "instance",
    "description": "Check whether the given panel element is visible at the current position",
    "memberof": "Camera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 342,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다",
    "returns": [
      {
        "description": "Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>",
        "type": {
          "names": [
            "$ts:boolean<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 85
  },
  {
    "sort": 9999999,
    "id": "Camera#updateAlignPos",
    "longname": "Camera#updateAlignPos",
    "name": "updateAlignPos",
    "kind": "function",
    "scope": "instance",
    "description": "Update Camera's {@link Camera#alignPosition alignPosition}",
    "memberof": "Camera",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 354,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "params": [],
    "chainable": true,
    "order": 86
  },
  {
    "sort": 9999999,
    "id": "Camera#updateAnchors",
    "longname": "Camera#updateAnchors",
    "name": "updateAnchors",
    "kind": "function",
    "scope": "instance",
    "description": "Update Camera's {@link Camera#anchorPoints anchorPoints}",
    "memberof": "Camera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "meta": {
      "lineno": 375,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 87
  },
  {
    "sort": 9999999,
    "id": "Camera#updatePosition",
    "longname": "Camera#updatePosition",
    "name": "updatePosition",
    "kind": "function",
    "scope": "instance",
    "description": "Update position after resizing",
    "memberof": "Camera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "meta": {
      "lineno": 397,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "resize 이후에 position을 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "order": 88
  },
  {
    "sort": 9999999,
    "id": "Camera#resetNeedPanelHistory",
    "longname": "Camera#resetNeedPanelHistory",
    "name": "resetNeedPanelHistory",
    "kind": "function",
    "scope": "instance",
    "description": "Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again",
    "memberof": "Camera",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 414,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다",
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "params": [],
    "chainable": true,
    "order": 89
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#updateRange",
    "longname": "CircularCamera#updateRange",
    "name": "updateRange",
    "kind": "function",
    "scope": "instance",
    "overrides": "Camera#updateRange",
    "description": "Update {@link Camera#range range} of Camera",
    "memberof": "CircularCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "meta": {
      "lineno": 145,
      "filename": "CircularCamera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 {@link Camera#range range}를 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/camera/CircularCamera.ts",
    "chainable": true,
    "order": 92
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#updateRange",
    "longname": "LinearCamera#updateRange",
    "name": "updateRange",
    "kind": "function",
    "scope": "instance",
    "overrides": "Camera#updateRange",
    "description": "Update {@link Camera#range range} of Camera",
    "memberof": "LinearCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "meta": {
      "lineno": 22,
      "filename": "LinearCamera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "ko": "Camera의 {@link Camera#range range}를 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/camera/LinearCamera.ts",
    "chainable": true,
    "order": 94
  },
  {
    "sort": 9999999,
    "id": "AxesController#init",
    "longname": "AxesController#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "description": "Initialize AxesController",
    "memberof": "AxesController",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of Flicking",
        "name": "flicking"
      }
    ],
    "meta": {
      "lineno": 79,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "AxesController를 초기화합니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "chainable": true,
    "order": 110
  },
  {
    "sort": 9999999,
    "id": "AxesController#destroy",
    "longname": "AxesController#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Destroy AxesController and return to initial state",
    "memberof": "AxesController",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 122,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "AxesController를 초기 상태로 되돌립니다",
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "params": [],
    "order": 111
  },
  {
    "sort": 9999999,
    "id": "AxesController#enable",
    "longname": "AxesController#enable",
    "name": "enable",
    "kind": "function",
    "scope": "instance",
    "description": "Enable input from the user (mouse/touch)",
    "memberof": "AxesController",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 137,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "사용자의 입력(마우스/터치)를 활성화합니다",
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "params": [],
    "chainable": true,
    "order": 112
  },
  {
    "sort": 9999999,
    "id": "AxesController#disable",
    "longname": "AxesController#disable",
    "name": "disable",
    "kind": "function",
    "scope": "instance",
    "description": "Disable input from the user (mouse/touch)",
    "memberof": "AxesController",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 149,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "사용자의 입력(마우스/터치)를 막습니다",
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "params": [],
    "chainable": true,
    "order": 113
  },
  {
    "sort": 9999999,
    "id": "AxesController#update",
    "longname": "AxesController#update",
    "name": "update",
    "kind": "function",
    "scope": "instance",
    "description": "Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state",
    "memberof": "AxesController",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n<ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "meta": {
      "lineno": 164,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다",
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "order": 114
  },
  {
    "sort": 9999999,
    "id": "AxesController#animateTo",
    "longname": "AxesController#animateTo",
    "name": "animateTo",
    "kind": "function",
    "scope": "instance",
    "description": "Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position",
    "memberof": "AxesController",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to move<ko>이동할 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "If provided, it'll use its {@link setTo} method instead",
        "name": "axesEvent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "meta": {
      "lineno": 201,
      "filename": "AxesController.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n\n</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/AxesController.ts",
    "order": 115
  },
  {
    "sort": 9999999,
    "id": "Control#moveToPosition",
    "longname": "Control#moveToPosition",
    "name": "moveToPosition",
    "kind": "function",
    "scope": "instance",
    "description": "Move {@link Camera} to the given position",
    "memberof": "Control",
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "meta": {
      "lineno": 72,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link Camera}를 주어진 좌표로 이동합니다",
    "virtual": true,
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The target position to move<ko>이동할 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "order": 122
  },
  {
    "sort": 9999999,
    "id": "Control#init",
    "longname": "Control#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "description": "Initialize Control",
    "memberof": "Control",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "meta": {
      "lineno": 122,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "Control을 초기화합니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "chainable": true,
    "order": 123
  },
  {
    "sort": 9999999,
    "id": "Control#destroy",
    "longname": "Control#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Destroy Control and return to initial state",
    "memberof": "Control",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 134,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "Control을 초기 상태로 되돌립니다",
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "params": [],
    "order": 124
  },
  {
    "sort": 9999999,
    "id": "Control#enable",
    "longname": "Control#enable",
    "name": "enable",
    "kind": "function",
    "scope": "instance",
    "description": "Enable input from the user (mouse/touch)",
    "memberof": "Control",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 147,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "사용자의 입력(마우스/터치)를 활성화합니다",
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "params": [],
    "chainable": true,
    "order": 125
  },
  {
    "sort": 9999999,
    "id": "Control#disable",
    "longname": "Control#disable",
    "name": "disable",
    "kind": "function",
    "scope": "instance",
    "description": "Disable input from the user (mouse/touch)",
    "memberof": "Control",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 159,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "사용자의 입력(마우스/터치)를 막습니다",
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "params": [],
    "chainable": true,
    "order": 126
  },
  {
    "sort": 9999999,
    "id": "Control#updateInput",
    "longname": "Control#updateInput",
    "name": "updateInput",
    "kind": "function",
    "scope": "instance",
    "description": "Update {@link Control#controller controller}'s state",
    "memberof": "Control",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 171,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link Control#controller controller}의 내부 상태를 갱신합니다",
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "params": [],
    "chainable": true,
    "order": 127
  },
  {
    "sort": 9999999,
    "id": "Control#resetActivePanel",
    "longname": "Control#resetActivePanel",
    "name": "resetActivePanel",
    "kind": "function",
    "scope": "instance",
    "description": "Reset {@link Control#activePanel activePanel} to `null`",
    "memberof": "Control",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 183,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link Control#activePanel activePanel}을 `null`로 초기화합니다",
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "params": [],
    "chainable": true,
    "order": 128
  },
  {
    "sort": 9999999,
    "id": "Control#moveToPanel",
    "longname": "Control#moveToPanel",
    "name": "moveToPanel",
    "kind": "function",
    "scope": "instance",
    "description": "Move {@link Camera} to the given panel",
    "memberof": "Control",
    "params": [
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "The target panel to move<ko>이동할 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An options object<ko>옵션 오브젝트</ko>",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}",
        "name": "axesEvent"
      },
      {
        "type": {
          "names": [
            "Constants#DIRECTION"
          ]
        },
        "optional": true,
        "defaultvalue": "DIRECTION.NONE",
        "description": "Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "direction"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "meta": {
      "lineno": 227,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link Camera}를 해당 패널 위로 이동합니다",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "async": true,
    "order": 129
  },
  {
    "sort": 9999999,
    "id": "FreeControl#moveToPosition",
    "longname": "FreeControl#moveToPosition",
    "name": "moveToPosition",
    "kind": "function",
    "scope": "instance",
    "overrides": "Control#moveToPosition",
    "description": "Move {@link Camera} to the given position",
    "memberof": "FreeControl",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The target position to move<ko>이동할 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "meta": {
      "lineno": 53,
      "filename": "FreeControl.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link Camera}를 주어진 좌표로 이동합니다",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/control/FreeControl.ts",
    "async": true,
    "order": 131
  },
  {
    "sort": 9999999,
    "id": "SnapControl#moveToPosition",
    "longname": "SnapControl#moveToPosition",
    "name": "moveToPosition",
    "kind": "function",
    "scope": "instance",
    "overrides": "Control#moveToPosition",
    "description": "Move {@link Camera} to the given position",
    "memberof": "SnapControl",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The target position to move<ko>이동할 좌표</ko>",
        "name": "position"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "meta": {
      "lineno": 54,
      "filename": "SnapControl.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "ko": "{@link Camera}를 주어진 좌표로 이동합니다",
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "filename": "/home/wn/egjs-flicking/src/control/SnapControl.ts",
    "async": true,
    "order": 133
  },
  {
    "sort": 9999999,
    "id": "State#onHold",
    "longname": "State#onHold",
    "name": "onHold",
    "kind": "function",
    "scope": "instance",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event",
    "memberof": "State",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "meta": {
      "lineno": 49,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "order": 152
  },
  {
    "sort": 9999999,
    "id": "State#onChange",
    "longname": "State#onChange",
    "name": "onChange",
    "kind": "function",
    "scope": "instance",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event",
    "memberof": "State",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "meta": {
      "lineno": 67,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "order": 153
  },
  {
    "sort": 9999999,
    "id": "State#onRelease",
    "longname": "State#onRelease",
    "name": "onRelease",
    "kind": "function",
    "scope": "instance",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event",
    "memberof": "State",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "meta": {
      "lineno": 85,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "order": 154
  },
  {
    "sort": 9999999,
    "id": "State#onAnimationEnd",
    "longname": "State#onAnimationEnd",
    "name": "onAnimationEnd",
    "kind": "function",
    "scope": "instance",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event",
    "memberof": "State",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "meta": {
      "lineno": 103,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "order": 155
  },
  {
    "sort": 9999999,
    "id": "State#onFinish",
    "longname": "State#onFinish",
    "name": "onFinish",
    "kind": "function",
    "scope": "instance",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event",
    "memberof": "State",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "meta": {
      "lineno": 120,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "order": 156
  },
  {
    "sort": 9999999,
    "id": "Panel#resize",
    "longname": "Panel#resize",
    "name": "resize",
    "kind": "function",
    "scope": "instance",
    "description": "Update size of the panel",
    "memberof": "Panel",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 166,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 크기를 갱신합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "params": [],
    "chainable": true,
    "order": 178
  },
  {
    "sort": 9999999,
    "id": "Panel#contains",
    "longname": "Panel#contains",
    "name": "contains",
    "kind": "function",
    "scope": "instance",
    "description": "Check whether the given element is inside of this panel's {@link Panel#element element}",
    "memberof": "Panel",
    "params": [
      {
        "type": {
          "names": [
            "HTMLElement"
          ]
        },
        "description": "The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>",
        "name": "element"
      }
    ],
    "meta": {
      "lineno": 201,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "order": 179
  },
  {
    "sort": 9999999,
    "id": "Panel#destroy",
    "longname": "Panel#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Reset internal state and set {@link Panel#removed removed} to `true`",
    "memberof": "Panel",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 210,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.",
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "params": [],
    "order": 180
  },
  {
    "sort": 9999999,
    "id": "Panel#includePosition",
    "longname": "Panel#includePosition",
    "name": "includePosition",
    "kind": "function",
    "scope": "instance",
    "description": "Check whether the given position is inside of this panel's {@link Panel#range range}",
    "memberof": "Panel",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인하고자 하는 좌표</ko>",
        "name": "pos"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "false",
        "description": "Include {@link margin} to the range<ko>패널 영역에 {@link margin}값을 포함시킵니다</ko>",
        "name": "includeMargin"
      }
    ],
    "meta": {
      "lineno": 222,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "order": 181
  },
  {
    "sort": 9999999,
    "id": "Panel#includeRange",
    "longname": "Panel#includeRange",
    "name": "includeRange",
    "kind": "function",
    "scope": "instance",
    "description": "Check whether the given range is fully included in this panel's area",
    "memberof": "Panel",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>",
        "name": "max"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "false",
        "description": "Include {@link margin} to the range<ko>패널 영역에 {@link margin}값을 포함시킵니다</ko>",
        "name": "includeMargin"
      }
    ],
    "meta": {
      "lineno": 234,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "order": 182
  },
  {
    "sort": 9999999,
    "id": "Panel#focus",
    "longname": "Panel#focus",
    "name": "focus",
    "kind": "function",
    "scope": "instance",
    "description": "Move {@link Camera} to this panel",
    "memberof": "Panel",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      }
    ],
    "meta": {
      "lineno": 252,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "{@link Camera}를 이 패널로 이동합니다",
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "order": 183
  },
  {
    "sort": 9999999,
    "id": "Panel#prev",
    "longname": "Panel#prev",
    "name": "prev",
    "kind": "function",
    "scope": "instance",
    "description": "Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\nIf the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel",
    "memberof": "Panel",
    "returns": [
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "The previous panel<ko>이전 패널</ko>"
      }
    ],
    "meta": {
      "lineno": 263,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n{@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "params": [],
    "order": 184
  },
  {
    "sort": 9999999,
    "id": "Panel#next",
    "longname": "Panel#next",
    "name": "next",
    "kind": "function",
    "scope": "instance",
    "description": "Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\nIf the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel",
    "memberof": "Panel",
    "returns": [
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "The previous panel<ko>다음 패널</ko>"
      }
    ],
    "meta": {
      "lineno": 283,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n{@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "params": [],
    "order": 185
  },
  {
    "sort": 9999999,
    "id": "Panel#increaseIndex",
    "longname": "Panel#increaseIndex",
    "name": "increaseIndex",
    "kind": "function",
    "scope": "instance",
    "description": "Increase panel's index by the given value",
    "memberof": "Panel",
    "params": [
      {
        "description": "An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>",
        "name": "val",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/Panel.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 304,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 인덱스를 주어진 값만큼 증가시킵니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "chainable": true,
    "order": 186
  },
  {
    "sort": 9999999,
    "id": "Panel#decreaseIndex",
    "longname": "Panel#decreaseIndex",
    "name": "decreaseIndex",
    "kind": "function",
    "scope": "instance",
    "description": "Decrease panel's index by the given value",
    "memberof": "Panel",
    "params": [
      {
        "description": "An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>",
        "name": "val",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/Panel.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 317,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 인덱스를 주어진 값만큼 감소시킵니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "chainable": true,
    "order": 187
  },
  {
    "sort": 9999999,
    "id": "Panel#increasePosition",
    "longname": "Panel#increasePosition",
    "name": "increasePosition",
    "kind": "function",
    "scope": "instance",
    "description": "Increase panel's position by the given value",
    "memberof": "Panel",
    "params": [
      {
        "description": "An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>",
        "name": "val",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/Panel.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 330,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 위치를 주어진 값만큼 증가시킵니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "chainable": true,
    "order": 188
  },
  {
    "sort": 9999999,
    "id": "Panel#decreasePosition",
    "longname": "Panel#decreasePosition",
    "name": "decreasePosition",
    "kind": "function",
    "scope": "instance",
    "description": "Decrease panel's position by the given value",
    "memberof": "Panel",
    "params": [
      {
        "description": "An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>",
        "name": "val",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/Panel.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 343,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의위치를 주어진 값만큼 감소시킵니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "chainable": true,
    "order": 189
  },
  {
    "sort": 9999999,
    "id": "Panel#increaseOffset",
    "longname": "Panel#increaseOffset",
    "name": "increaseOffset",
    "kind": "function",
    "scope": "instance",
    "description": "Increase panel's offset by the given value",
    "memberof": "Panel",
    "params": [
      {
        "description": "An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>",
        "name": "val",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/Panel.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 356,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 오프셋을 주어진 값만큼 증가시킵니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "chainable": true,
    "order": 190
  },
  {
    "sort": 9999999,
    "id": "Panel#decreaseOffset",
    "longname": "Panel#decreaseOffset",
    "name": "decreaseOffset",
    "kind": "function",
    "scope": "instance",
    "description": "Decrease panel's offset by the given value",
    "memberof": "Panel",
    "params": [
      {
        "description": "An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>",
        "name": "val",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/core/Panel.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 369,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 오프셋을 주어진 값만큼 감소시킵니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "chainable": true,
    "order": 191
  },
  {
    "sort": 9999999,
    "id": "Panel#resetOffset",
    "longname": "Panel#resetOffset",
    "name": "resetOffset",
    "kind": "function",
    "scope": "instance",
    "description": "Reset panel's offset to 0",
    "memberof": "Panel",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 381,
      "filename": "Panel.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "패널의 오프셋을 0으로 초기화합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Panel.ts",
    "params": [],
    "customTags": [
      {
        "tag": "internal"
      }
    ],
    "chainable": true,
    "order": 192
  },
  {
    "sort": 9999999,
    "id": "Viewport#setSize",
    "longname": "Viewport#setSize",
    "name": "setSize",
    "kind": "function",
    "scope": "instance",
    "description": "Change viewport's size.\nThis will change the actual size of `.flicking-viewport` element by changing its CSS width/height property",
    "memberof": "Viewport",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "New viewport size<ko>새 뷰포트 크기</ko>",
        "name": "size"
      },
      {
        "type": {
          "names": [
            "number",
            "string"
          ]
        },
        "optional": true,
        "description": "CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>",
        "name": "size.width"
      },
      {
        "type": {
          "names": [
            "number",
            "string"
          ]
        },
        "optional": true,
        "description": "CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>",
        "name": "size.height"
      }
    ],
    "meta": {
      "lineno": 57,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "뷰포트 크기를 변경합니다.\n`.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "returns": [],
    "order": 198
  },
  {
    "sort": 9999999,
    "id": "Viewport#resize",
    "longname": "Viewport#resize",
    "name": "resize",
    "kind": "function",
    "scope": "instance",
    "description": "Update width/height to the current viewport element's size",
    "memberof": "Viewport",
    "meta": {
      "lineno": 78,
      "filename": "Viewport.ts",
      "path": "/home/wn/egjs-flicking/src/core"
    },
    "ko": "현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/core/Viewport.ts",
    "params": [],
    "returns": [],
    "order": 199
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#init",
    "longname": "OffsetManipulator#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "description": "Initialize OffsetManipulator",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "meta": {
      "lineno": 45,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "OffsetManipulator를 초기화합니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 203
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#destroy",
    "longname": "OffsetManipulator#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Destroy Renderer and return to initial state",
    "memberof": "OffsetManipulator",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 54,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "Renderer를 초기 상태로 되돌립니다",
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "params": [],
    "order": 204
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#insertPanelElements",
    "longname": "OffsetManipulator#insertPanelElements",
    "name": "insertPanelElements",
    "kind": "function",
    "scope": "instance",
    "description": "Insert panel elements before nextSibling",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of panels to add<ko>추가할 패널의 배열</ko>",
        "name": "panels"
      },
      {
        "name": "nextSibling",
        "type": {
          "names": [
            "$ts:Panel | null<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "meta": {
      "lineno": 65,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 엘리먼트들을 기준 패널(`nextSibling`) 이전에 추가합니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 205
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#movePanelElementsToStart",
    "longname": "OffsetManipulator#movePanelElementsToStart",
    "name": "movePanelElementsToStart",
    "kind": "function",
    "scope": "instance",
    "description": "Move panel element as the first child of the camera element",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      },
      {
        "type": {
          "names": [
            "Array<TogglePoint>"
          ]
        },
        "description": "An array of the positions that triggered element order change<ko>패널 순서를 변경시킨 좌표 정보들의 배열</ko>",
        "name": "togglePoints"
      }
    ],
    "meta": {
      "lineno": 78,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 엘리먼트들을 카메라 엘리먼트의 첫번째 child로 이동시킨다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 206
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#movePanelElementsToEnd",
    "longname": "OffsetManipulator#movePanelElementsToEnd",
    "name": "movePanelElementsToEnd",
    "kind": "function",
    "scope": "instance",
    "description": "Move panel element as the last child of the camera element",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      },
      {
        "type": {
          "names": [
            "Array<TogglePoint>"
          ]
        },
        "description": "An array of the positions that triggered element order change<ko>패널 순서를 변경시킨 좌표 정보들의 배열</ko>",
        "name": "togglePoints"
      }
    ],
    "meta": {
      "lineno": 100,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 엘리먼트들을 카메라 엘리먼트의 마지막 child로 이동시킨다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 207
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#resetPanelElementOrder",
    "longname": "OffsetManipulator#resetPanelElementOrder",
    "name": "resetPanelElementOrder",
    "kind": "function",
    "scope": "instance",
    "description": "Reset panel element order by the panel's index",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      }
    ],
    "meta": {
      "lineno": 121,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 엘리먼트 순서를 인덱스 순으로 변경한다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 208
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#removePanelElements",
    "longname": "OffsetManipulator#removePanelElements",
    "name": "removePanelElements",
    "kind": "function",
    "scope": "instance",
    "description": "Remove panel elements",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to remove<ko>삭제할 패널들</ko>",
        "name": "panels"
      }
    ],
    "meta": {
      "lineno": 139,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 엘리먼트들을 삭제한다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 209
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#removeAllChildNodes",
    "longname": "OffsetManipulator#removeAllChildNodes",
    "name": "removeAllChildNodes",
    "kind": "function",
    "scope": "instance",
    "description": "Remove all child nodes inside the given element",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "description": "A HTMLElement to remove all child nodes<ko>Child node를 전부 삭제할 HTMLElement</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 151,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "주어진 엘리먼트 내의 모든 child node를 제거한다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 210
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#removeAllTextNodes",
    "longname": "OffsetManipulator#removeAllTextNodes",
    "name": "removeAllTextNodes",
    "kind": "function",
    "scope": "instance",
    "description": "Remove all text nodes inside the given element",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "description": "A HTMLElement to remove all text nodes<ko>Text node를 전부 삭제할 HTMLElement</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 163,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "주어진 엘리먼트 내의 모든 text node를 제거한다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "chainable": true,
    "order": 211
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#render",
    "longname": "RawRenderer#render",
    "name": "render",
    "kind": "function",
    "scope": "instance",
    "overrides": "Renderer#render",
    "description": "Render panel elements inside the camera element",
    "memberof": "RawRenderer",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 18,
      "filename": "RawRenderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다",
    "filename": "/home/wn/egjs-flicking/src/renderer/RawRenderer.ts",
    "params": [],
    "chainable": true,
    "order": 214
  },
  {
    "sort": 9999999,
    "id": "Renderer#render",
    "longname": "Renderer#render",
    "name": "render",
    "kind": "function",
    "scope": "instance",
    "description": "Render panel elements inside the camera element",
    "memberof": "Renderer",
    "meta": {
      "lineno": 85,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다",
    "virtual": true,
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "params": [],
    "chainable": true,
    "order": 221
  },
  {
    "sort": 9999999,
    "id": "Renderer#init",
    "longname": "Renderer#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "description": "Initialize Renderer",
    "memberof": "Renderer",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "meta": {
      "lineno": 105,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "Renderer를 초기화합니다",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "chainable": true,
    "order": 222
  },
  {
    "sort": 9999999,
    "id": "Renderer#destroy",
    "longname": "Renderer#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "description": "Destroy Renderer and return to initial state",
    "memberof": "Renderer",
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 117,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "Renderer를 초기 상태로 되돌립니다",
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "params": [],
    "order": 223
  },
  {
    "sort": 9999999,
    "id": "Renderer#getPanel",
    "longname": "Renderer#getPanel",
    "name": "getPanel",
    "kind": "function",
    "scope": "instance",
    "description": "Return the {@link Panel} at the given index. `null` if it doesn't exists.",
    "memberof": "Renderer",
    "params": [
      {
        "name": "index",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/renderer/Renderer.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>"
      }
    ],
    "meta": {
      "lineno": 129,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.",
    "see": [
      "Panel"
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "order": 224
  },
  {
    "sort": 9999999,
    "id": "Renderer#insert",
    "longname": "Renderer#insert",
    "name": "insert",
    "kind": "function",
    "scope": "instance",
    "description": "Insert new panels at given index\nThis will increase index of panels after by the number of panels added",
    "memberof": "Renderer",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Flicking.ElementLike",
            "Array.<Flicking.ElementLike>"
          ]
        },
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element"
      }
    ],
    "meta": {
      "lineno": 143,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "주어진 인덱스에 새로운 패널들을 추가합니다\n해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.",
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of prepended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "order": 225
  },
  {
    "sort": 9999999,
    "id": "Renderer#remove",
    "longname": "Renderer#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "description": "Remove the panel at the given index\nThis will decrease index of panels after by the number of panels removed",
    "memberof": "Renderer",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index of panel to remove<ko>제거할 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 1,
        "description": "Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>",
        "name": "deleteCount"
      }
    ],
    "meta": {
      "lineno": 203,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "주어진 인덱스의 패널을 제거합니다\n해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다",
    "returns": [
      {
        "description": "An array of removed panels<ko>제거된 패널들의 배열</ko>",
        "type": {
          "names": [
            "$ts:Panel[]<file>/home/wn/egjs-flicking/src/renderer/Renderer.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "order": 226
  },
  {
    "sort": 9999999,
    "id": "Renderer#updatePanelSize",
    "longname": "Renderer#updatePanelSize",
    "name": "updatePanelSize",
    "kind": "function",
    "scope": "instance",
    "description": "Update all panel sizes",
    "memberof": "Renderer",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 265,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "모든 패널의 크기를 업데이트합니다",
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "params": [],
    "chainable": true,
    "order": 227
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#render",
    "longname": "VisibleRenderer#render",
    "name": "render",
    "kind": "function",
    "scope": "instance",
    "overrides": "RawRenderer#render",
    "description": "Render visible panel elements inside the camera element",
    "memberof": "VisibleRenderer",
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "meta": {
      "lineno": 20,
      "filename": "VisibleRenderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "보이는 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다",
    "filename": "/home/wn/egjs-flicking/src/renderer/VisibleRenderer.ts",
    "params": [],
    "chainable": true,
    "order": 229
  },
  {
    "sort": 9999999,
    "id": "Component#trigger",
    "longname": "Component#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "description": "Trigger a custom event.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "커스텀 이벤트를 발생시킨다",
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 249
  },
  {
    "sort": 9999999,
    "id": "Component#once",
    "longname": "Component#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "description": "Executed event just one time.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "이벤트가 한번만 실행된다.",
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 250
  },
  {
    "sort": 9999999,
    "id": "Component#hasOn",
    "longname": "Component#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 251
  },
  {
    "sort": 9999999,
    "id": "Component#on",
    "longname": "Component#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "description": "Attaches an event to a component.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 252
  },
  {
    "sort": 9999999,
    "id": "Component#off",
    "longname": "Component#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "memberof": "Component",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "order": 253
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#trigger",
    "longname": "Flicking#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#trigger",
    "inherited": true,
    "description": "Trigger a custom event.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "커스텀 이벤트를 발생시킨다",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#trigger",
    "memberof": "Flicking",
    "order": 254
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#once",
    "longname": "Flicking#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#once",
    "inherited": true,
    "description": "Executed event just one time.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "이벤트가 한번만 실행된다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#once",
    "memberof": "Flicking",
    "order": 255
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#hasOn",
    "longname": "Flicking#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#hasOn",
    "inherited": true,
    "overrides": "Component#hasOn",
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "Flicking",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 256
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#on",
    "longname": "Flicking#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#on",
    "inherited": true,
    "description": "Attaches an event to a component.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#on",
    "memberof": "Flicking",
    "order": 257
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "Flicking#off",
    "longname": "Flicking#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#off",
    "inherited": true,
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#off",
    "memberof": "Flicking",
    "order": 258
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#init",
    "meta": {
      "lineno": 191,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#init",
    "inherited": true,
    "description": "Initialize Camera",
    "memberof": "BoundCamera",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera를 초기화합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n<ko>{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 272
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#destroy",
    "meta": {
      "lineno": 208,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#destroy",
    "inherited": true,
    "description": "Destroy Camera and return to initial state",
    "memberof": "BoundCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Camera를 초기 상태로 되돌립니다",
    "order": 273
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#lookAt",
    "meta": {
      "lineno": 223,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#lookAt",
    "name": "lookAt",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#lookAt",
    "inherited": true,
    "description": "Move to the given position and apply CSS transform",
    "memberof": "BoundCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A new position<ko>움직일 위치</ko>",
        "name": "pos"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "해당 좌표로 이동하고, CSS transform을 적용합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "order": 274
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#getPrevAnchor",
    "meta": {
      "lineno": 243,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#getPrevAnchor",
    "name": "getPrevAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#getPrevAnchor",
    "inherited": true,
    "description": "Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "BoundCamera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "order": 275
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#getNextAnchor",
    "meta": {
      "lineno": 255,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#getNextAnchor",
    "name": "getNextAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#getNextAnchor",
    "inherited": true,
    "description": "Return a next {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "BoundCamera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "order": 276
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#findAnchorIncludePosition",
    "meta": {
      "lineno": 267,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#findAnchorIncludePosition",
    "name": "findAnchorIncludePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#findAnchorIncludePosition",
    "inherited": true,
    "description": "Return {@link AnchorPoint} that includes given position\nIf there's no {@link AnchorPoint} that includes the given position, return `null` instead",
    "memberof": "BoundCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다",
    "order": 277
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#findNearestAnchor",
    "meta": {
      "lineno": 287,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#findNearestAnchor",
    "name": "findNearestAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#findNearestAnchor",
    "inherited": true,
    "description": "Return {@link AnchorPoint} nearest to given position\nIf there're no {@link AnchorPoint}s, return `null` instead",
    "memberof": "BoundCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n{@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다",
    "order": 278
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#clampToReachablePosition",
    "meta": {
      "lineno": 315,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#clampToReachablePosition",
    "name": "clampToReachablePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#clampToReachablePosition",
    "inherited": true,
    "description": "Clamp the given position between camera's range",
    "memberof": "BoundCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to clamp<ko>범위를 제한할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A clamped position<ko>범위 제한된 좌표</ko>"
      }
    ],
    "ko": "주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다",
    "order": 279
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#canReach",
    "meta": {
      "lineno": 326,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#canReach",
    "name": "canReach",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#canReach",
    "inherited": true,
    "description": "Check whether the given panel is inside of the Camera's range",
    "memberof": "BoundCamera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>"
      }
    ],
    "ko": "해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다",
    "order": 280
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#canSee",
    "meta": {
      "lineno": 342,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#canSee",
    "name": "canSee",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#canSee",
    "inherited": true,
    "description": "Check whether the given panel element is visible at the current position",
    "memberof": "BoundCamera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>",
        "type": {
          "names": [
            "$ts:boolean<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "ko": "현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다",
    "order": 281
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#updateAlignPos",
    "meta": {
      "lineno": 354,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#updateAlignPos",
    "name": "updateAlignPos",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updateAlignPos",
    "inherited": true,
    "description": "Update Camera's {@link Camera#alignPosition alignPosition}",
    "memberof": "BoundCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다",
    "chainable": true,
    "order": 282
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 375,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "BoundCamera#updateAnchors",
    "longname": "BoundCamera#updateAnchors",
    "name": "updateAnchors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updateAnchors",
    "inherited": true,
    "overrides": "Camera#updateAnchors",
    "description": "Update Camera's {@link Camera#anchorPoints anchorPoints}",
    "memberof": "BoundCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 283
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#updatePosition",
    "meta": {
      "lineno": 397,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#updatePosition",
    "name": "updatePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updatePosition",
    "inherited": true,
    "description": "Update position after resizing",
    "memberof": "BoundCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "resize 이후에 position을 업데이트합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 284
  },
  {
    "sort": 9999999,
    "id": "BoundCamera#resetNeedPanelHistory",
    "meta": {
      "lineno": 414,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "BoundCamera#resetNeedPanelHistory",
    "name": "resetNeedPanelHistory",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#resetNeedPanelHistory",
    "inherited": true,
    "description": "Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again",
    "memberof": "BoundCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다",
    "chainable": true,
    "order": 285
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#init",
    "meta": {
      "lineno": 191,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#init",
    "inherited": true,
    "description": "Initialize Camera",
    "memberof": "CircularCamera",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera를 초기화합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n<ko>{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 299
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#destroy",
    "meta": {
      "lineno": 208,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#destroy",
    "inherited": true,
    "description": "Destroy Camera and return to initial state",
    "memberof": "CircularCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Camera를 초기 상태로 되돌립니다",
    "order": 300
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 223,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "id": "CircularCamera#lookAt",
    "longname": "CircularCamera#lookAt",
    "name": "lookAt",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#lookAt",
    "inherited": true,
    "overrides": "Camera#lookAt",
    "description": "Move to the given position and apply CSS transform",
    "memberof": "CircularCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A new position<ko>움직일 위치</ko>",
        "name": "pos"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "해당 좌표로 이동하고, CSS transform을 적용합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "order": 301
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#getPrevAnchor",
    "meta": {
      "lineno": 243,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#getPrevAnchor",
    "name": "getPrevAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#getPrevAnchor",
    "inherited": true,
    "overrides": "Camera#getPrevAnchor",
    "description": "Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "CircularCamera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "order": 302
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#getNextAnchor",
    "meta": {
      "lineno": 255,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#getNextAnchor",
    "name": "getNextAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#getNextAnchor",
    "inherited": true,
    "overrides": "Camera#getNextAnchor",
    "description": "Return a next {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "CircularCamera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "order": 303
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#findAnchorIncludePosition",
    "meta": {
      "lineno": 267,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#findAnchorIncludePosition",
    "name": "findAnchorIncludePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#findAnchorIncludePosition",
    "inherited": true,
    "overrides": "Camera#findAnchorIncludePosition",
    "description": "Return {@link AnchorPoint} that includes given position\nIf there's no {@link AnchorPoint} that includes the given position, return `null` instead",
    "memberof": "CircularCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다",
    "order": 304
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#findNearestAnchor",
    "meta": {
      "lineno": 287,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#findNearestAnchor",
    "name": "findNearestAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#findNearestAnchor",
    "inherited": true,
    "description": "Return {@link AnchorPoint} nearest to given position\nIf there're no {@link AnchorPoint}s, return `null` instead",
    "memberof": "CircularCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n{@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다",
    "order": 305
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#clampToReachablePosition",
    "meta": {
      "lineno": 315,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#clampToReachablePosition",
    "name": "clampToReachablePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#clampToReachablePosition",
    "inherited": true,
    "overrides": "Camera#clampToReachablePosition",
    "description": "Clamp the given position between camera's range",
    "memberof": "CircularCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to clamp<ko>범위를 제한할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A clamped position<ko>범위 제한된 좌표</ko>"
      }
    ],
    "ko": "주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다",
    "order": 306
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#canReach",
    "meta": {
      "lineno": 326,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#canReach",
    "name": "canReach",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#canReach",
    "inherited": true,
    "overrides": "Camera#canReach",
    "description": "Check whether the given panel is inside of the Camera's range",
    "memberof": "CircularCamera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>"
      }
    ],
    "ko": "해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다",
    "order": 307
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#canSee",
    "meta": {
      "lineno": 342,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#canSee",
    "name": "canSee",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#canSee",
    "inherited": true,
    "overrides": "Camera#canSee",
    "description": "Check whether the given panel element is visible at the current position",
    "memberof": "CircularCamera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>",
        "type": {
          "names": [
            "$ts:boolean<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "ko": "현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다",
    "order": 308
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#updateAlignPos",
    "meta": {
      "lineno": 354,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#updateAlignPos",
    "name": "updateAlignPos",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updateAlignPos",
    "inherited": true,
    "description": "Update Camera's {@link Camera#alignPosition alignPosition}",
    "memberof": "CircularCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다",
    "chainable": true,
    "order": 309
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#updateAnchors",
    "meta": {
      "lineno": 375,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#updateAnchors",
    "name": "updateAnchors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updateAnchors",
    "inherited": true,
    "description": "Update Camera's {@link Camera#anchorPoints anchorPoints}",
    "memberof": "CircularCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 310
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#updatePosition",
    "meta": {
      "lineno": 397,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#updatePosition",
    "name": "updatePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updatePosition",
    "inherited": true,
    "description": "Update position after resizing",
    "memberof": "CircularCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "resize 이후에 position을 업데이트합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 311
  },
  {
    "sort": 9999999,
    "id": "CircularCamera#resetNeedPanelHistory",
    "meta": {
      "lineno": 414,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "CircularCamera#resetNeedPanelHistory",
    "name": "resetNeedPanelHistory",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#resetNeedPanelHistory",
    "inherited": true,
    "description": "Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again",
    "memberof": "CircularCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다",
    "chainable": true,
    "order": 312
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#init",
    "meta": {
      "lineno": 191,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#init",
    "inherited": true,
    "description": "Initialize Camera",
    "memberof": "LinearCamera",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera를 초기화합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n<ko>{@link Constants.ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 326
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#destroy",
    "meta": {
      "lineno": 208,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#destroy",
    "inherited": true,
    "description": "Destroy Camera and return to initial state",
    "memberof": "LinearCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Camera를 초기 상태로 되돌립니다",
    "order": 327
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#lookAt",
    "meta": {
      "lineno": 223,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#lookAt",
    "name": "lookAt",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#lookAt",
    "inherited": true,
    "description": "Move to the given position and apply CSS transform",
    "memberof": "LinearCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A new position<ko>움직일 위치</ko>",
        "name": "pos"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "해당 좌표로 이동하고, CSS transform을 적용합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "order": 328
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#getPrevAnchor",
    "meta": {
      "lineno": 243,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#getPrevAnchor",
    "name": "getPrevAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#getPrevAnchor",
    "inherited": true,
    "description": "Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "LinearCamera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "order": 329
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#getNextAnchor",
    "meta": {
      "lineno": 255,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#getNextAnchor",
    "name": "getNextAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#getNextAnchor",
    "inherited": true,
    "description": "Return a next {@link AnchorPoint} of given {@link AnchorPoint}\nIf it does not exist, return `null` instead",
    "memberof": "LinearCamera",
    "params": [
      {
        "type": {
          "names": [
            "AnchorPoint"
          ]
        },
        "description": "A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>",
        "name": "anchor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n존재하지 않을 경우 `null`을 반환합니다",
    "order": 330
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#findAnchorIncludePosition",
    "meta": {
      "lineno": 267,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#findAnchorIncludePosition",
    "name": "findAnchorIncludePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#findAnchorIncludePosition",
    "inherited": true,
    "description": "Return {@link AnchorPoint} that includes given position\nIf there's no {@link AnchorPoint} that includes the given position, return `null` instead",
    "memberof": "LinearCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다",
    "order": 331
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#findNearestAnchor",
    "meta": {
      "lineno": 287,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#findNearestAnchor",
    "name": "findNearestAnchor",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#findNearestAnchor",
    "inherited": true,
    "description": "Return {@link AnchorPoint} nearest to given position\nIf there're no {@link AnchorPoint}s, return `null` instead",
    "memberof": "LinearCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to check<ko>확인할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "AnchorPoint",
            "null"
          ]
        },
        "description": "The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>"
      }
    ],
    "ko": "해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n{@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다",
    "order": 332
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#clampToReachablePosition",
    "meta": {
      "lineno": 315,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#clampToReachablePosition",
    "name": "clampToReachablePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#clampToReachablePosition",
    "inherited": true,
    "description": "Clamp the given position between camera's range",
    "memberof": "LinearCamera",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A position to clamp<ko>범위를 제한할 좌표</ko>",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "A clamped position<ko>범위 제한된 좌표</ko>"
      }
    ],
    "ko": "주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다",
    "order": 333
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#canReach",
    "meta": {
      "lineno": 326,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#canReach",
    "name": "canReach",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#canReach",
    "inherited": true,
    "description": "Check whether the given panel is inside of the Camera's range",
    "memberof": "LinearCamera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>"
      }
    ],
    "ko": "해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다",
    "order": 334
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#canSee",
    "meta": {
      "lineno": 342,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#canSee",
    "name": "canSee",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#canSee",
    "inherited": true,
    "description": "Check whether the given panel element is visible at the current position",
    "memberof": "LinearCamera",
    "params": [
      {
        "description": "An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>",
        "name": "panel",
        "type": {
          "names": [
            "$ts:Panel<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>",
        "type": {
          "names": [
            "$ts:boolean<file>/home/wn/egjs-flicking/src/camera/Camera.ts</file>"
          ]
        }
      }
    ],
    "ko": "현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다",
    "order": 335
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#updateAlignPos",
    "meta": {
      "lineno": 354,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#updateAlignPos",
    "name": "updateAlignPos",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updateAlignPos",
    "inherited": true,
    "description": "Update Camera's {@link Camera#alignPosition alignPosition}",
    "memberof": "LinearCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다",
    "chainable": true,
    "order": 336
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#updateAnchors",
    "meta": {
      "lineno": 375,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#updateAnchors",
    "name": "updateAnchors",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updateAnchors",
    "inherited": true,
    "description": "Update Camera's {@link Camera#anchorPoints anchorPoints}",
    "memberof": "LinearCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 337
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#updatePosition",
    "meta": {
      "lineno": 397,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#updatePosition",
    "name": "updatePosition",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#updatePosition",
    "inherited": true,
    "description": "Update position after resizing",
    "memberof": "LinearCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "resize 이후에 position을 업데이트합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n<ko>{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>"
      }
    ],
    "chainable": true,
    "order": 338
  },
  {
    "sort": 9999999,
    "id": "LinearCamera#resetNeedPanelHistory",
    "meta": {
      "lineno": 414,
      "filename": "Camera.ts",
      "path": "/home/wn/egjs-flicking/src/camera"
    },
    "filename": "/home/wn/egjs-flicking/src/camera/Camera.ts",
    "longname": "LinearCamera#resetNeedPanelHistory",
    "name": "resetNeedPanelHistory",
    "kind": "function",
    "scope": "instance",
    "inherits": "Camera#resetNeedPanelHistory",
    "inherited": true,
    "description": "Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again",
    "memberof": "LinearCamera",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다",
    "chainable": true,
    "order": 339
  },
  {
    "sort": 9999999,
    "id": "FreeControl#init",
    "meta": {
      "lineno": 122,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "FreeControl#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#init",
    "inherited": true,
    "description": "Initialize Control",
    "memberof": "FreeControl",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Control을 초기화합니다",
    "chainable": true,
    "order": 345
  },
  {
    "sort": 9999999,
    "id": "FreeControl#destroy",
    "meta": {
      "lineno": 134,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "FreeControl#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#destroy",
    "inherited": true,
    "description": "Destroy Control and return to initial state",
    "memberof": "FreeControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Control을 초기 상태로 되돌립니다",
    "order": 346
  },
  {
    "sort": 9999999,
    "id": "FreeControl#enable",
    "meta": {
      "lineno": 147,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "FreeControl#enable",
    "name": "enable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#enable",
    "inherited": true,
    "description": "Enable input from the user (mouse/touch)",
    "memberof": "FreeControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "사용자의 입력(마우스/터치)를 활성화합니다",
    "chainable": true,
    "order": 347
  },
  {
    "sort": 9999999,
    "id": "FreeControl#disable",
    "meta": {
      "lineno": 159,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "FreeControl#disable",
    "name": "disable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#disable",
    "inherited": true,
    "description": "Disable input from the user (mouse/touch)",
    "memberof": "FreeControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "사용자의 입력(마우스/터치)를 막습니다",
    "chainable": true,
    "order": 348
  },
  {
    "sort": 9999999,
    "id": "FreeControl#updateInput",
    "meta": {
      "lineno": 171,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "FreeControl#updateInput",
    "name": "updateInput",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#updateInput",
    "inherited": true,
    "description": "Update {@link Control#controller controller}'s state",
    "memberof": "FreeControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "{@link Control#controller controller}의 내부 상태를 갱신합니다",
    "chainable": true,
    "order": 349
  },
  {
    "sort": 9999999,
    "id": "FreeControl#resetActivePanel",
    "meta": {
      "lineno": 183,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "FreeControl#resetActivePanel",
    "name": "resetActivePanel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#resetActivePanel",
    "inherited": true,
    "description": "Reset {@link Control#activePanel activePanel} to `null`",
    "memberof": "FreeControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "{@link Control#activePanel activePanel}을 `null`로 초기화합니다",
    "chainable": true,
    "order": 350
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 227,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "FreeControl#moveToPanel",
    "longname": "FreeControl#moveToPanel",
    "name": "moveToPanel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#moveToPanel",
    "inherited": true,
    "description": "Move {@link Camera} to the given panel",
    "memberof": "FreeControl",
    "params": [
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "The target panel to move<ko>이동할 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An options object<ko>옵션 오브젝트</ko>",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}",
        "name": "axesEvent"
      },
      {
        "type": {
          "names": [
            "Constants#DIRECTION"
          ]
        },
        "optional": true,
        "defaultvalue": "DIRECTION.NONE",
        "description": "Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "direction"
      }
    ],
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "ko": "{@link Camera}를 해당 패널 위로 이동합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "async": true,
    "order": 351
  },
  {
    "sort": 9999999,
    "id": "SnapControl#init",
    "meta": {
      "lineno": 122,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "SnapControl#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#init",
    "inherited": true,
    "description": "Initialize Control",
    "memberof": "SnapControl",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Control을 초기화합니다",
    "chainable": true,
    "order": 357
  },
  {
    "sort": 9999999,
    "id": "SnapControl#destroy",
    "meta": {
      "lineno": 134,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "SnapControl#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#destroy",
    "inherited": true,
    "description": "Destroy Control and return to initial state",
    "memberof": "SnapControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Control을 초기 상태로 되돌립니다",
    "order": 358
  },
  {
    "sort": 9999999,
    "id": "SnapControl#enable",
    "meta": {
      "lineno": 147,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "SnapControl#enable",
    "name": "enable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#enable",
    "inherited": true,
    "description": "Enable input from the user (mouse/touch)",
    "memberof": "SnapControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "사용자의 입력(마우스/터치)를 활성화합니다",
    "chainable": true,
    "order": 359
  },
  {
    "sort": 9999999,
    "id": "SnapControl#disable",
    "meta": {
      "lineno": 159,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "SnapControl#disable",
    "name": "disable",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#disable",
    "inherited": true,
    "description": "Disable input from the user (mouse/touch)",
    "memberof": "SnapControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "사용자의 입력(마우스/터치)를 막습니다",
    "chainable": true,
    "order": 360
  },
  {
    "sort": 9999999,
    "id": "SnapControl#updateInput",
    "meta": {
      "lineno": 171,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "SnapControl#updateInput",
    "name": "updateInput",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#updateInput",
    "inherited": true,
    "description": "Update {@link Control#controller controller}'s state",
    "memberof": "SnapControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "{@link Control#controller controller}의 내부 상태를 갱신합니다",
    "chainable": true,
    "order": 361
  },
  {
    "sort": 9999999,
    "id": "SnapControl#resetActivePanel",
    "meta": {
      "lineno": 183,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "longname": "SnapControl#resetActivePanel",
    "name": "resetActivePanel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#resetActivePanel",
    "inherited": true,
    "description": "Reset {@link Control#activePanel activePanel} to `null`",
    "memberof": "SnapControl",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "{@link Control#activePanel activePanel}을 `null`로 초기화합니다",
    "chainable": true,
    "order": 362
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 227,
      "filename": "Control.ts",
      "path": "/home/wn/egjs-flicking/src/control"
    },
    "filename": "/home/wn/egjs-flicking/src/control/Control.ts",
    "id": "SnapControl#moveToPanel",
    "longname": "SnapControl#moveToPanel",
    "name": "moveToPanel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Control#moveToPanel",
    "inherited": true,
    "description": "Move {@link Camera} to the given panel",
    "memberof": "SnapControl",
    "params": [
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "The target panel to move<ko>이동할 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An options object<ko>옵션 오브젝트</ko>",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>",
        "name": "duration"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}",
        "name": "axesEvent"
      },
      {
        "type": {
          "names": [
            "Constants#DIRECTION"
          ]
        },
        "optional": true,
        "defaultvalue": "DIRECTION.NONE",
        "description": "Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "direction"
      }
    ],
    "fires": [
      "Flicking#event:moveStart",
      "Flicking#event:move",
      "Flicking#event:moveEnd",
      "Flicking#event:willChange",
      "Flicking#event:changed",
      "Flicking#event:willRestore",
      "Flicking#event:restored",
      "Flicking#event:needPanel",
      "Flicking#event:visibleChange",
      "Flicking#event:reachEdge"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise<void>"
          ]
        },
        "description": "A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>"
      }
    ],
    "ko": "{@link Camera}를 해당 패널 위로 이동합니다",
    "exceptions": [
      {
        "type": {
          "names": [
            "FlickingError"
          ]
        },
        "description": "|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n<ko>\n\n|code|condition|\n|---|---|\n|{@link Constants.ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n|{@link Constants.ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n|{@link Constants.ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n|{@link Constants.ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n\n</ko>"
      }
    ],
    "async": true,
    "order": 363
  },
  {
    "sort": 9999999,
    "id": "IdleState#onHold",
    "meta": {
      "lineno": 49,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "IdleState#onHold",
    "name": "onHold",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onHold",
    "inherited": true,
    "overrides": "State#onHold",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event",
    "memberof": "IdleState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러",
    "order": 364
  },
  {
    "sort": 9999999,
    "id": "IdleState#onChange",
    "meta": {
      "lineno": 67,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "IdleState#onChange",
    "name": "onChange",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onChange",
    "inherited": true,
    "overrides": "State#onChange",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event",
    "memberof": "IdleState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러",
    "order": 365
  },
  {
    "sort": 9999999,
    "id": "IdleState#onRelease",
    "meta": {
      "lineno": 85,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "IdleState#onRelease",
    "name": "onRelease",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onRelease",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event",
    "memberof": "IdleState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러",
    "order": 366
  },
  {
    "sort": 9999999,
    "id": "IdleState#onAnimationEnd",
    "meta": {
      "lineno": 103,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "IdleState#onAnimationEnd",
    "name": "onAnimationEnd",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onAnimationEnd",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event",
    "memberof": "IdleState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러",
    "order": 367
  },
  {
    "sort": 9999999,
    "id": "IdleState#onFinish",
    "meta": {
      "lineno": 120,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "IdleState#onFinish",
    "name": "onFinish",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onFinish",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event",
    "memberof": "IdleState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러",
    "order": 368
  },
  {
    "sort": 9999999,
    "id": "HoldingState#onHold",
    "meta": {
      "lineno": 49,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "HoldingState#onHold",
    "name": "onHold",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onHold",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event",
    "memberof": "HoldingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러",
    "order": 369
  },
  {
    "sort": 9999999,
    "id": "HoldingState#onChange",
    "meta": {
      "lineno": 67,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "HoldingState#onChange",
    "name": "onChange",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onChange",
    "inherited": true,
    "overrides": "State#onChange",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event",
    "memberof": "HoldingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러",
    "order": 370
  },
  {
    "sort": 9999999,
    "id": "HoldingState#onRelease",
    "meta": {
      "lineno": 85,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "HoldingState#onRelease",
    "name": "onRelease",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onRelease",
    "inherited": true,
    "overrides": "State#onRelease",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event",
    "memberof": "HoldingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러",
    "order": 371
  },
  {
    "sort": 9999999,
    "id": "HoldingState#onAnimationEnd",
    "meta": {
      "lineno": 103,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "HoldingState#onAnimationEnd",
    "name": "onAnimationEnd",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onAnimationEnd",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event",
    "memberof": "HoldingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러",
    "order": 372
  },
  {
    "sort": 9999999,
    "id": "HoldingState#onFinish",
    "meta": {
      "lineno": 120,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "HoldingState#onFinish",
    "name": "onFinish",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onFinish",
    "inherited": true,
    "overrides": "State#onFinish",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event",
    "memberof": "HoldingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러",
    "order": 373
  },
  {
    "sort": 9999999,
    "id": "DraggingState#onHold",
    "meta": {
      "lineno": 49,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DraggingState#onHold",
    "name": "onHold",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onHold",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event",
    "memberof": "DraggingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러",
    "order": 374
  },
  {
    "sort": 9999999,
    "id": "DraggingState#onChange",
    "meta": {
      "lineno": 67,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DraggingState#onChange",
    "name": "onChange",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onChange",
    "inherited": true,
    "overrides": "State#onChange",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event",
    "memberof": "DraggingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러",
    "order": 375
  },
  {
    "sort": 9999999,
    "id": "DraggingState#onRelease",
    "meta": {
      "lineno": 85,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DraggingState#onRelease",
    "name": "onRelease",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onRelease",
    "inherited": true,
    "overrides": "State#onRelease",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event",
    "memberof": "DraggingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러",
    "order": 376
  },
  {
    "sort": 9999999,
    "id": "DraggingState#onAnimationEnd",
    "meta": {
      "lineno": 103,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DraggingState#onAnimationEnd",
    "name": "onAnimationEnd",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onAnimationEnd",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event",
    "memberof": "DraggingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러",
    "order": 377
  },
  {
    "sort": 9999999,
    "id": "DraggingState#onFinish",
    "meta": {
      "lineno": 120,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DraggingState#onFinish",
    "name": "onFinish",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onFinish",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event",
    "memberof": "DraggingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러",
    "order": 378
  },
  {
    "sort": 9999999,
    "id": "AnimatingState#onHold",
    "meta": {
      "lineno": 49,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "AnimatingState#onHold",
    "name": "onHold",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onHold",
    "inherited": true,
    "overrides": "State#onHold",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event",
    "memberof": "AnimatingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러",
    "order": 379
  },
  {
    "sort": 9999999,
    "id": "AnimatingState#onChange",
    "meta": {
      "lineno": 67,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "AnimatingState#onChange",
    "name": "onChange",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onChange",
    "inherited": true,
    "overrides": "State#onChange",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event",
    "memberof": "AnimatingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러",
    "order": 380
  },
  {
    "sort": 9999999,
    "id": "AnimatingState#onRelease",
    "meta": {
      "lineno": 85,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "AnimatingState#onRelease",
    "name": "onRelease",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onRelease",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event",
    "memberof": "AnimatingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러",
    "order": 381
  },
  {
    "sort": 9999999,
    "id": "AnimatingState#onAnimationEnd",
    "meta": {
      "lineno": 103,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "AnimatingState#onAnimationEnd",
    "name": "onAnimationEnd",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onAnimationEnd",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event",
    "memberof": "AnimatingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러",
    "order": 382
  },
  {
    "sort": 9999999,
    "id": "AnimatingState#onFinish",
    "meta": {
      "lineno": 120,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "AnimatingState#onFinish",
    "name": "onFinish",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onFinish",
    "inherited": true,
    "overrides": "State#onFinish",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event",
    "memberof": "AnimatingState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러",
    "order": 383
  },
  {
    "sort": 9999999,
    "id": "DisabledState#onHold",
    "meta": {
      "lineno": 49,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DisabledState#onHold",
    "name": "onHold",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onHold",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event",
    "memberof": "DisabledState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러",
    "order": 384
  },
  {
    "sort": 9999999,
    "id": "DisabledState#onChange",
    "meta": {
      "lineno": 67,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DisabledState#onChange",
    "name": "onChange",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onChange",
    "inherited": true,
    "overrides": "State#onChange",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event",
    "memberof": "DisabledState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러",
    "order": 385
  },
  {
    "sort": 9999999,
    "id": "DisabledState#onRelease",
    "meta": {
      "lineno": 85,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DisabledState#onRelease",
    "name": "onRelease",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onRelease",
    "inherited": true,
    "overrides": "State#onRelease",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event",
    "memberof": "DisabledState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러",
    "order": 386
  },
  {
    "sort": 9999999,
    "id": "DisabledState#onAnimationEnd",
    "meta": {
      "lineno": 103,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DisabledState#onAnimationEnd",
    "name": "onAnimationEnd",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onAnimationEnd",
    "inherited": true,
    "overrides": "State#onAnimationEnd",
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event",
    "memberof": "DisabledState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러",
    "order": 387
  },
  {
    "sort": 9999999,
    "id": "DisabledState#onFinish",
    "meta": {
      "lineno": 120,
      "filename": "State.ts",
      "path": "/home/wn/egjs-flicking/src/control/states"
    },
    "filename": "/home/wn/egjs-flicking/src/control/states/State.ts",
    "longname": "DisabledState#onFinish",
    "name": "onFinish",
    "kind": "function",
    "scope": "instance",
    "inherits": "State#onFinish",
    "inherited": true,
    "description": "An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event",
    "memberof": "DisabledState",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Event context<ko>이벤트 콘텍스트</ko>",
        "name": "ctx"
      },
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "optional": true,
        "description": "An instance of Flicking<ko>Flicking 인스턴스</ko>",
        "name": "ctx.flicking"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "ctx.axesEvent"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>",
        "name": "ctx.transitTo"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러",
    "order": 388
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#init",
    "meta": {
      "lineno": 45,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#init",
    "inherited": true,
    "description": "Initialize OffsetManipulator",
    "memberof": "ElementManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "OffsetManipulator를 초기화합니다",
    "chainable": true,
    "order": 390
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#destroy",
    "meta": {
      "lineno": 54,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#destroy",
    "inherited": true,
    "description": "Destroy Renderer and return to initial state",
    "memberof": "ElementManipulator",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Renderer를 초기 상태로 되돌립니다",
    "order": 391
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#insertPanelElements",
    "meta": {
      "lineno": 65,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#insertPanelElements",
    "name": "insertPanelElements",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#insertPanelElements",
    "inherited": true,
    "overrides": "OffsetManipulator#insertPanelElements",
    "description": "Insert panel elements before nextSibling",
    "memberof": "ElementManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of panels to add<ko>추가할 패널의 배열</ko>",
        "name": "panels"
      },
      {
        "name": "nextSibling",
        "type": {
          "names": [
            "$ts:Panel | null<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 기준 패널(`nextSibling`) 이전에 추가합니다",
    "chainable": true,
    "order": 392
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#movePanelElementsToStart",
    "meta": {
      "lineno": 78,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#movePanelElementsToStart",
    "name": "movePanelElementsToStart",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#movePanelElementsToStart",
    "inherited": true,
    "overrides": "OffsetManipulator#movePanelElementsToStart",
    "description": "Move panel element as the first child of the camera element",
    "memberof": "ElementManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      },
      {
        "type": {
          "names": [
            "Array<TogglePoint>"
          ]
        },
        "description": "An array of the positions that triggered element order change<ko>패널 순서를 변경시킨 좌표 정보들의 배열</ko>",
        "name": "togglePoints"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 카메라 엘리먼트의 첫번째 child로 이동시킨다",
    "chainable": true,
    "order": 393
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#movePanelElementsToEnd",
    "meta": {
      "lineno": 100,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#movePanelElementsToEnd",
    "name": "movePanelElementsToEnd",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#movePanelElementsToEnd",
    "inherited": true,
    "overrides": "OffsetManipulator#movePanelElementsToEnd",
    "description": "Move panel element as the last child of the camera element",
    "memberof": "ElementManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      },
      {
        "type": {
          "names": [
            "Array<TogglePoint>"
          ]
        },
        "description": "An array of the positions that triggered element order change<ko>패널 순서를 변경시킨 좌표 정보들의 배열</ko>",
        "name": "togglePoints"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 카메라 엘리먼트의 마지막 child로 이동시킨다",
    "chainable": true,
    "order": 394
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#resetPanelElementOrder",
    "meta": {
      "lineno": 121,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#resetPanelElementOrder",
    "name": "resetPanelElementOrder",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#resetPanelElementOrder",
    "inherited": true,
    "overrides": "OffsetManipulator#resetPanelElementOrder",
    "description": "Reset panel element order by the panel's index",
    "memberof": "ElementManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트 순서를 인덱스 순으로 변경한다",
    "chainable": true,
    "order": 395
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#removePanelElements",
    "meta": {
      "lineno": 139,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#removePanelElements",
    "name": "removePanelElements",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#removePanelElements",
    "inherited": true,
    "overrides": "OffsetManipulator#removePanelElements",
    "description": "Remove panel elements",
    "memberof": "ElementManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to remove<ko>삭제할 패널들</ko>",
        "name": "panels"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 삭제한다",
    "chainable": true,
    "order": 396
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#removeAllChildNodes",
    "meta": {
      "lineno": 151,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#removeAllChildNodes",
    "name": "removeAllChildNodes",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#removeAllChildNodes",
    "inherited": true,
    "overrides": "OffsetManipulator#removeAllChildNodes",
    "description": "Remove all child nodes inside the given element",
    "memberof": "ElementManipulator",
    "params": [
      {
        "description": "A HTMLElement to remove all child nodes<ko>Child node를 전부 삭제할 HTMLElement</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "주어진 엘리먼트 내의 모든 child node를 제거한다",
    "chainable": true,
    "order": 397
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#removeAllTextNodes",
    "meta": {
      "lineno": 163,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#removeAllTextNodes",
    "name": "removeAllTextNodes",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#removeAllTextNodes",
    "inherited": true,
    "overrides": "OffsetManipulator#removeAllTextNodes",
    "description": "Remove all text nodes inside the given element",
    "memberof": "ElementManipulator",
    "params": [
      {
        "description": "A HTMLElement to remove all text nodes<ko>Text node를 전부 삭제할 HTMLElement</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "주어진 엘리먼트 내의 모든 text node를 제거한다",
    "chainable": true,
    "order": 398
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#trigger",
    "longname": "OffsetManipulator#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#trigger",
    "inherited": true,
    "description": "Trigger a custom event.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "커스텀 이벤트를 발생시킨다",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#trigger",
    "memberof": "OffsetManipulator",
    "order": 399
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#once",
    "longname": "OffsetManipulator#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#once",
    "inherited": true,
    "description": "Executed event just one time.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "이벤트가 한번만 실행된다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#once",
    "memberof": "OffsetManipulator",
    "order": 400
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#hasOn",
    "longname": "OffsetManipulator#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#hasOn",
    "inherited": true,
    "overrides": "Component#hasOn",
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "OffsetManipulator",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 401
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#on",
    "longname": "OffsetManipulator#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#on",
    "inherited": true,
    "description": "Attaches an event to a component.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#on",
    "memberof": "OffsetManipulator",
    "order": 402
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OffsetManipulator#off",
    "longname": "OffsetManipulator#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#off",
    "inherited": true,
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "overrides": "Component#off",
    "memberof": "OffsetManipulator",
    "order": 403
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#init",
    "meta": {
      "lineno": 45,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#init",
    "inherited": true,
    "description": "Initialize OffsetManipulator",
    "memberof": "OrderManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "OffsetManipulator를 초기화합니다",
    "chainable": true,
    "order": 405
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#destroy",
    "meta": {
      "lineno": 54,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#destroy",
    "inherited": true,
    "description": "Destroy Renderer and return to initial state",
    "memberof": "OrderManipulator",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Renderer를 초기 상태로 되돌립니다",
    "order": 406
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#insertPanelElements",
    "meta": {
      "lineno": 65,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#insertPanelElements",
    "name": "insertPanelElements",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#insertPanelElements",
    "inherited": true,
    "description": "Insert panel elements before nextSibling",
    "memberof": "OrderManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of panels to add<ko>추가할 패널의 배열</ko>",
        "name": "panels"
      },
      {
        "name": "nextSibling",
        "type": {
          "names": [
            "$ts:Panel | null<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 기준 패널(`nextSibling`) 이전에 추가합니다",
    "chainable": true,
    "order": 407
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#movePanelElementsToStart",
    "meta": {
      "lineno": 78,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#movePanelElementsToStart",
    "name": "movePanelElementsToStart",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#movePanelElementsToStart",
    "inherited": true,
    "overrides": "OffsetManipulator#movePanelElementsToStart",
    "description": "Move panel element as the first child of the camera element",
    "memberof": "OrderManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      },
      {
        "type": {
          "names": [
            "Array<TogglePoint>"
          ]
        },
        "description": "An array of the positions that triggered element order change<ko>패널 순서를 변경시킨 좌표 정보들의 배열</ko>",
        "name": "togglePoints"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 카메라 엘리먼트의 첫번째 child로 이동시킨다",
    "chainable": true,
    "order": 408
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#movePanelElementsToEnd",
    "meta": {
      "lineno": 100,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#movePanelElementsToEnd",
    "name": "movePanelElementsToEnd",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#movePanelElementsToEnd",
    "inherited": true,
    "overrides": "OffsetManipulator#movePanelElementsToEnd",
    "description": "Move panel element as the last child of the camera element",
    "memberof": "OrderManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      },
      {
        "type": {
          "names": [
            "Array<TogglePoint>"
          ]
        },
        "description": "An array of the positions that triggered element order change<ko>패널 순서를 변경시킨 좌표 정보들의 배열</ko>",
        "name": "togglePoints"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 카메라 엘리먼트의 마지막 child로 이동시킨다",
    "chainable": true,
    "order": 409
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#resetPanelElementOrder",
    "meta": {
      "lineno": 121,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#resetPanelElementOrder",
    "name": "resetPanelElementOrder",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#resetPanelElementOrder",
    "inherited": true,
    "overrides": "OffsetManipulator#resetPanelElementOrder",
    "description": "Reset panel element order by the panel's index",
    "memberof": "OrderManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to move<ko>위치를 변경할 패널들</ko>",
        "name": "panels"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트 순서를 인덱스 순으로 변경한다",
    "chainable": true,
    "order": 410
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#removePanelElements",
    "meta": {
      "lineno": 139,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#removePanelElements",
    "name": "removePanelElements",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#removePanelElements",
    "inherited": true,
    "description": "Remove panel elements",
    "memberof": "OrderManipulator",
    "params": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels to remove<ko>삭제할 패널들</ko>",
        "name": "panels"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "패널 엘리먼트들을 삭제한다",
    "chainable": true,
    "order": 411
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#removeAllChildNodes",
    "meta": {
      "lineno": 151,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#removeAllChildNodes",
    "name": "removeAllChildNodes",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#removeAllChildNodes",
    "inherited": true,
    "description": "Remove all child nodes inside the given element",
    "memberof": "OrderManipulator",
    "params": [
      {
        "description": "A HTMLElement to remove all child nodes<ko>Child node를 전부 삭제할 HTMLElement</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "주어진 엘리먼트 내의 모든 child node를 제거한다",
    "chainable": true,
    "order": 412
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#removeAllTextNodes",
    "meta": {
      "lineno": 163,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#removeAllTextNodes",
    "name": "removeAllTextNodes",
    "kind": "function",
    "scope": "instance",
    "inherits": "OffsetManipulator#removeAllTextNodes",
    "inherited": true,
    "description": "Remove all text nodes inside the given element",
    "memberof": "OrderManipulator",
    "params": [
      {
        "description": "A HTMLElement to remove all text nodes<ko>Text node를 전부 삭제할 HTMLElement</ko>",
        "name": "element",
        "type": {
          "names": [
            "$ts:HTMLElement<file>/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts</file>"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "주어진 엘리먼트 내의 모든 text node를 제거한다",
    "chainable": true,
    "order": 413
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 78,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OrderManipulator#trigger",
    "longname": "OrderManipulator#trigger",
    "name": "trigger",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#trigger",
    "inherited": true,
    "description": "Trigger a custom event.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "ComponentEvent"
          ]
        },
        "description": "The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>",
        "name": "event"
      },
      {
        "type": {
          "names": [
            "Array<any>",
            "$ts:..."
          ]
        },
        "description": "Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>",
        "name": "params",
        "variable": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n  hi: { foo: { a: number; b: boolean } };\n  someEvent: (foo: number, bar: string) => void;\n  someOtherEvent: void; // When there's no event argument\n}> {\n  some(){\n    if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n      this.trigger(\"hi\");// fire hi event.\n    }\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", e => {\n  if(condition){\n    e.stop(); // When event call to stop, `hi` event not call.\n  }\n  // `currentTarget` is component instance.\n  console.log(some === e.currentTarget); // true\n\n  typeof e.foo; // number\n  typeof e.bar; // string\n});\nsome.on(\"hi\", e => {\n  typeof e.foo.b; // boolean\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "커스텀 이벤트를 발생시킨다",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:ComponentEvent<T[K], K, this> & T[K]<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "event",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "...params",
            "optional": null,
            "type": {
              "names": [
                "$ts:EventTriggerParams<T, K><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OrderManipulator",
    "order": 414
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 136,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OrderManipulator#once",
    "longname": "OrderManipulator#once",
    "name": "once",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#once",
    "inherited": true,
    "description": "Executed event just one time.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: ComponentEvent;\n}> {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(new ComponentEvent(\"hi\"));\n// fire alert(\"hi\");\nsome.trigger(new ComponentEvent(\"hi\"));\n// Nothing happens\n```"
    ],
    "returns": [
      {
        "description": "An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "이벤트가 한번만 실행된다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public once(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OrderManipulator",
    "order": 415
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 175,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OrderManipulator#hasOn",
    "longname": "OrderManipulator#hasOn",
    "name": "hasOn",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#hasOn",
    "inherited": true,
    "description": "Checks whether an event has been attached to a component.",
    "memberof": "OrderManipulator",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>",
        "name": "eventName"
      }
    ],
    "examples": [
      "```ts\nimport Component from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>"
      }
    ],
    "ko": "컴포넌트에 이벤트가 등록됐는지 확인한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "order": 416
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 203,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OrderManipulator#on",
    "longname": "OrderManipulator#on",
    "name": "on",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#on",
    "inherited": true,
    "description": "Attaches an event to a component.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "description": "The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>",
        "name": "eventName"
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "description": "The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToAttach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 이벤트를 등록한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToAttach",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public on(eventHash: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": "",
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OrderManipulator",
    "order": 417
  },
  {
    "sort": 9999999,
    "meta": {
      "lineno": 251,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "id": "OrderManipulator#off",
    "longname": "OrderManipulator#off",
    "name": "off",
    "kind": "function",
    "scope": "instance",
    "inherits": "Component#off",
    "inherited": true,
    "description": "Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The name of the event to be detached <ko>해제할 이벤트의 이름</ko>",
        "name": "eventName",
        "optional": true
      },
      {
        "type": {
          "names": [
            "function",
            "$ts:..."
          ]
        },
        "nullable": true,
        "description": "The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>",
        "name": "handlerToDetach",
        "optional": true
      }
    ],
    "examples": [
      "```ts\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nclass Some extends Component<{\n  hi: void;\n}> {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n```"
    ],
    "returns": [
      {
        "description": "An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>",
        "type": {
          "names": [
            "$ts:this<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
          ]
        }
      }
    ],
    "ko": "컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.",
    "typeParameters": {
      "params": [
        {
          "constraint": {
            "typeName": {
              "typeAnnotation": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "EventKey",
              "optional": "",
              "id": "EventKey",
              "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
              "nodeType": "Identifier",
              "string": "EventKey",
              "html": "EventKey",
              "typeId": "<Function getTypeId>"
            },
            "typeParameters": {
              "params": [
                {
                  "typeName": {
                    "typeAnnotation": {
                      "string": "",
                      "html": "",
                      "nodeType": "",
                      "typeId": "<Function getTypeId>"
                    },
                    "name": "T",
                    "optional": "",
                    "id": "T",
                    "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                    "nodeType": "Identifier",
                    "string": "T",
                    "html": "T",
                    "typeId": "<Function getTypeId>"
                  },
                  "typeParameters": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "template": "${typeName}${typeParameters}",
                  "nodeType": "TSTypeReference",
                  "string": "T",
                  "html": "T",
                  "typeId": "<Function getTypeId>"
                }
              ],
              "template": "$if{params, \"<\" + params + \">\"}",
              "nodeType": "TSTypeParameterInstantiation",
              "string": "<T>",
              "html": "&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            },
            "template": "${typeName}${typeParameters}",
            "nodeType": "TSTypeReference",
            "string": "EventKey<T>",
            "html": "EventKey&lt;T&gt;",
            "typeId": "<Function getTypeId>"
          },
          "default": {
            "string": "",
            "html": "",
            "nodeType": "",
            "typeId": "<Function getTypeId>"
          },
          "name": "K",
          "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
          "nodeType": "TSTypeParameter",
          "string": "K extends EventKey<T>",
          "html": "K extends EventKey&lt;T&gt;",
          "typeId": "<Function getTypeId>"
        }
      ],
      "template": "$if{params, \"<\" + params + \">\"}",
      "nodeType": "TSTypeParameterDeclaration",
      "string": "<K extends EventKey<T>>",
      "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
      "typeId": "<Function getTypeId>"
    },
    "extras": [
      {
        "string": "public off(eventHash?: EventHash<T, this>): this",
        "typeParameters": {
          "string": "",
          "html": "",
          "nodeType": "",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventHash",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventHash<T, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "string": "public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this",
        "typeParameters": {
          "params": [
            {
              "constraint": {
                "typeName": {
                  "typeAnnotation": {
                    "string": "",
                    "html": "",
                    "nodeType": "",
                    "typeId": "<Function getTypeId>"
                  },
                  "name": "EventKey",
                  "optional": "",
                  "id": "EventKey",
                  "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                  "nodeType": "Identifier",
                  "string": "EventKey",
                  "html": "EventKey",
                  "typeId": "<Function getTypeId>"
                },
                "typeParameters": {
                  "params": [
                    {
                      "typeName": {
                        "typeAnnotation": {
                          "string": "",
                          "html": "",
                          "nodeType": "",
                          "typeId": "<Function getTypeId>"
                        },
                        "name": "T",
                        "optional": "",
                        "id": "T",
                        "template": "${id}$if{optional, \"?\"}$if{typeAnnotation, \": \" + typeAnnotation}",
                        "nodeType": "Identifier",
                        "string": "T",
                        "html": "T",
                        "typeId": "<Function getTypeId>"
                      },
                      "typeParameters": {
                        "string": "",
                        "html": "",
                        "nodeType": "",
                        "typeId": "<Function getTypeId>"
                      },
                      "template": "${typeName}${typeParameters}",
                      "nodeType": "TSTypeReference",
                      "string": "T",
                      "html": "T",
                      "typeId": "<Function getTypeId>"
                    }
                  ],
                  "template": "$if{params, \"<\" + params + \">\"}",
                  "nodeType": "TSTypeParameterInstantiation",
                  "string": "<T>",
                  "html": "&lt;T&gt;",
                  "typeId": "<Function getTypeId>"
                },
                "template": "${typeName}${typeParameters}",
                "nodeType": "TSTypeReference",
                "string": "EventKey<T>",
                "html": "EventKey&lt;T&gt;",
                "typeId": "<Function getTypeId>"
              },
              "default": {
                "string": "",
                "html": "",
                "nodeType": "",
                "typeId": "<Function getTypeId>"
              },
              "name": "K",
              "template": "${name}$if{constraint, \" extends \" + constraint}$if{default, \" = \" + default}",
              "nodeType": "TSTypeParameter",
              "string": "K extends EventKey<T>",
              "html": "K extends EventKey&lt;T&gt;",
              "typeId": "<Function getTypeId>"
            }
          ],
          "template": "$if{params, \"<\" + params + \">\"}",
          "nodeType": "TSTypeParameterDeclaration",
          "string": "<K extends EventKey<T>>",
          "html": "&lt;K extends EventKey&lt;T&gt;&gt;",
          "typeId": "<Function getTypeId>"
        },
        "returnType": {
          "typeAnnotation": {
            "template": "this",
            "nodeType": "TSThisType",
            "string": "this",
            "html": "this",
            "typeId": "<Function getTypeId>"
          },
          "template": "${typeAnnotation}",
          "nodeType": "TSTypeAnnotation",
          "string": "this",
          "html": "this",
          "typeId": "<Function getTypeId>"
        },
        "parameters": [
          {
            "name": "eventName",
            "optional": "",
            "type": {
              "names": [
                "$ts:K<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          },
          {
            "name": "handlerToDetach",
            "optional": true,
            "type": {
              "names": [
                "$ts:EventCallback<T, K, this><file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "memberof": "OrderManipulator",
    "order": 418
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#init",
    "meta": {
      "lineno": 105,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "RawRenderer#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#init",
    "inherited": true,
    "description": "Initialize Renderer",
    "memberof": "RawRenderer",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Renderer를 초기화합니다",
    "chainable": true,
    "order": 423
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#destroy",
    "meta": {
      "lineno": 117,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "RawRenderer#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#destroy",
    "inherited": true,
    "description": "Destroy Renderer and return to initial state",
    "memberof": "RawRenderer",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Renderer를 초기 상태로 되돌립니다",
    "order": 424
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#getPanel",
    "meta": {
      "lineno": 129,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "RawRenderer#getPanel",
    "name": "getPanel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#getPanel",
    "inherited": true,
    "description": "Return the {@link Panel} at the given index. `null` if it doesn't exists.",
    "memberof": "RawRenderer",
    "params": [
      {
        "name": "index",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/renderer/Renderer.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>"
      }
    ],
    "ko": "주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.",
    "see": [
      "Panel"
    ],
    "order": 425
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#insert",
    "meta": {
      "lineno": 143,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "RawRenderer#insert",
    "name": "insert",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#insert",
    "inherited": true,
    "description": "Insert new panels at given index\nThis will increase index of panels after by the number of panels added",
    "memberof": "RawRenderer",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Flicking.ElementLike",
            "Array.<Flicking.ElementLike>"
          ]
        },
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of prepended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "ko": "주어진 인덱스에 새로운 패널들을 추가합니다\n해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.",
    "order": 426
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#remove",
    "meta": {
      "lineno": 203,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "RawRenderer#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#remove",
    "inherited": true,
    "description": "Remove the panel at the given index\nThis will decrease index of panels after by the number of panels removed",
    "memberof": "RawRenderer",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index of panel to remove<ko>제거할 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 1,
        "description": "Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>",
        "name": "deleteCount"
      }
    ],
    "returns": [
      {
        "description": "An array of removed panels<ko>제거된 패널들의 배열</ko>",
        "type": {
          "names": [
            "$ts:Panel[]<file>/home/wn/egjs-flicking/src/renderer/Renderer.ts</file>"
          ]
        }
      }
    ],
    "ko": "주어진 인덱스의 패널을 제거합니다\n해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다",
    "order": 427
  },
  {
    "sort": 9999999,
    "id": "RawRenderer#updatePanelSize",
    "meta": {
      "lineno": 265,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "RawRenderer#updatePanelSize",
    "name": "updatePanelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#updatePanelSize",
    "inherited": true,
    "description": "Update all panel sizes",
    "memberof": "RawRenderer",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "모든 패널의 크기를 업데이트합니다",
    "chainable": true,
    "order": 428
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#init",
    "meta": {
      "lineno": 105,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "VisibleRenderer#init",
    "name": "init",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#init",
    "inherited": true,
    "description": "Initialize Renderer",
    "memberof": "VisibleRenderer",
    "params": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>",
        "name": "flicking"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "Renderer를 초기화합니다",
    "chainable": true,
    "order": 433
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#destroy",
    "meta": {
      "lineno": 117,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "VisibleRenderer#destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#destroy",
    "inherited": true,
    "description": "Destroy Renderer and return to initial state",
    "memberof": "VisibleRenderer",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "ko": "Renderer를 초기 상태로 되돌립니다",
    "order": 434
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#getPanel",
    "meta": {
      "lineno": 129,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "VisibleRenderer#getPanel",
    "name": "getPanel",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#getPanel",
    "inherited": true,
    "description": "Return the {@link Panel} at the given index. `null` if it doesn't exists.",
    "memberof": "VisibleRenderer",
    "params": [
      {
        "name": "index",
        "type": {
          "names": [
            "$ts:number<file>/home/wn/egjs-flicking/src/renderer/Renderer.ts</file>"
          ]
        },
        "description": "",
        "optional": "",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>"
      }
    ],
    "ko": "주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.",
    "see": [
      "Panel"
    ],
    "order": 435
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#insert",
    "meta": {
      "lineno": 143,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "VisibleRenderer#insert",
    "name": "insert",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#insert",
    "inherited": true,
    "description": "Insert new panels at given index\nThis will increase index of panels after by the number of panels added",
    "memberof": "VisibleRenderer",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Flicking.ElementLike",
            "Array.<Flicking.ElementLike>"
          ]
        },
        "description": "A new HTMLElement, a outerHTML of element, or an array of both\n<ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>",
        "name": "element"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "An array of prepended panels<ko>추가된 패널들의 배열</ko>"
      }
    ],
    "ko": "주어진 인덱스에 새로운 패널들을 추가합니다\n해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.",
    "order": 436
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#remove",
    "meta": {
      "lineno": 203,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "VisibleRenderer#remove",
    "name": "remove",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#remove",
    "inherited": true,
    "description": "Remove the panel at the given index\nThis will decrease index of panels after by the number of panels removed",
    "memberof": "VisibleRenderer",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index of panel to remove<ko>제거할 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 1,
        "description": "Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>",
        "name": "deleteCount"
      }
    ],
    "returns": [
      {
        "description": "An array of removed panels<ko>제거된 패널들의 배열</ko>",
        "type": {
          "names": [
            "$ts:Panel[]<file>/home/wn/egjs-flicking/src/renderer/Renderer.ts</file>"
          ]
        }
      }
    ],
    "ko": "주어진 인덱스의 패널을 제거합니다\n해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다",
    "order": 437
  },
  {
    "sort": 9999999,
    "id": "VisibleRenderer#updatePanelSize",
    "meta": {
      "lineno": 265,
      "filename": "Renderer.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/Renderer.ts",
    "longname": "VisibleRenderer#updatePanelSize",
    "name": "updatePanelSize",
    "kind": "function",
    "scope": "instance",
    "inherits": "Renderer#updatePanelSize",
    "inherited": true,
    "description": "Update all panel sizes",
    "memberof": "VisibleRenderer",
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "this"
          ]
        }
      }
    ],
    "ko": "모든 패널의 크기를 업데이트합니다",
    "chainable": true,
    "order": 438
  },
  {
    "sort": 9999999,
    "id": "OffsetManipulator#event:orderChanged",
    "longname": "OffsetManipulator#event:orderChanged",
    "name": "orderChanged",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when order of the elements is changed",
    "memberof": "OffsetManipulator",
    "meta": {
      "lineno": 14,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "ko": "엘리먼트 순서 변경시 트리거되는 이벤트",
    "returns": [],
    "type": {
      "names": [
        "void"
      ]
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "params": [],
    "order": 201
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:ready",
    "longname": "Flicking#event:ready",
    "name": "ready",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's {@link Flicking#init init()} is called",
    "memberof": "Flicking",
    "meta": {
      "lineno": 12,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 {@link Flicking#init init()}이 호출되었을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 230
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:beforeResize",
    "longname": "Flicking#event:beforeResize",
    "name": "beforeResize",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's {@link Flicking#resize resize()} is called, before updating the sizes of panels and viewport.\nYou can update the sizes of panels and viewport with this event, and it'll be applied after {@link Flicking#resize resize()} is finished.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 22,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 {@link Flicking#resize resize())}이 호출되었을 때 발생하는 이벤트로, 패널 및 뷰포트의 크기를 업데이트하기 전에 발생합니다.\n이 이벤트 단계에서 패널 및 뷰포트의 크기를 업데이트할 경우, 해당 크기가 최종적으로 반영됩니다.",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Previous width of the viewport<ko>기존 뷰포트 너비</ko>",
        "name": "width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Previous height of the viewport<ko>기존 뷰포트 높이</ko>",
        "name": "height"
      },
      {
        "type": {
          "names": [
            "HTMLElement"
          ]
        },
        "description": "The viewport element<ko>뷰포트 엘리먼트</ko>",
        "name": "element"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 231
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:afterResize",
    "longname": "Flicking#event:afterResize",
    "name": "afterResize",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's {@link Flicking#resize resize()} is called, after updating the sizes of panels and viewport.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 41,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 {@link Flicking#resize resize())}이 호출되었을 때 발생하는 이벤트로, 패널 및 뷰포트의 크기를 업데이트한 이후에 발생합니다.",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New width of the viewport<ko>업데이트된 뷰포트 너비</ko>",
        "name": "width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New height of the viewport<ko>업데이트된 뷰포트 높이</ko>",
        "name": "height"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Previous size of the viewport<ko>기존 뷰포트 크기</ko>",
        "name": "prev"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Previous width of the viewport<ko>기존 뷰포트 너비</ko>",
        "name": "prev.width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Previous height of the viewport<ko>기존 뷰포트 높이</ko>",
        "name": "prev.height"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "A Boolean value indicating whether the width/height of the viewport element is changed<ko>뷰포트 너비/크기가 변경되었는지 여부를 나타내는 값</ko>",
        "name": "sizeChanged"
      },
      {
        "type": {
          "names": [
            "HTMLElement"
          ]
        },
        "description": "The viewport element<ko>뷰포트 엘리먼트</ko>",
        "name": "element"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 232
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:holdStart",
    "longname": "Flicking#event:holdStart",
    "name": "holdStart",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when user started dragging.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 67,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자가 드래그를 시작했을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 233
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:holdEnd",
    "longname": "Flicking#event:holdEnd",
    "name": "holdEnd",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when user stopped dragging.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 82,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자가 드래그를 끝냈을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 234
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:moveStart",
    "longname": "Flicking#event:moveStart",
    "name": "moveStart",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires once before first {@link Flicking#event:move move} event",
    "memberof": "Flicking",
    "meta": {
      "lineno": 96,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "첫 번째 {@link Flicking#event:move move} 이벤트 직전에 단 한번 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the user is dragging the viewport element<ko>사용자가 현재 viewport 엘리먼트를 드래그하고있는지를 나타내는 값</ko>",
        "name": "holding"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 235
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:move",
    "longname": "Flicking#event:move",
    "name": "move",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires for every movement",
    "memberof": "Flicking",
    "meta": {
      "lineno": 117,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "이동시마다 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the user is dragging the viewport element<ko>사용자가 현재 viewport 엘리먼트를 드래그하고있는지를 나타내는 값</ko>",
        "name": "holding"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 236
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:moveEnd",
    "longname": "Flicking#event:moveEnd",
    "name": "moveEnd",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when the movement is finished by user input release or animation end.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 138,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자 입력 중단/애니메이션 종료 등 이동이 끝났을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the user is dragging the viewport element<ko>사용자가 현재 viewport 엘리먼트를 드래그하고있는지를 나타내는 값</ko>",
        "name": "holding"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "{@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of {@link https://naver.github.io/egjs-axes/ Axes}\n<ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>",
        "name": "axesEvent"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 237
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:willChange",
    "longname": "Flicking#event:willChange",
    "name": "willChange",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's active index will be changed. Index will be changed at the {@link Flicking#event:changed changed} event.\nIt can be triggered when user finished input, or flicking start to move by method.\nCalling `stop()` in event will prevent index change and camera movement.",
    "memberof": "Flicking",
    "meta": {
      "lineno": 157,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking의 인덱스가 변경될 것임을 나타내는 이벤트. 실제 인덱스는 {@link Flicking#event:changed changed} 이벤트에서 변경된다.\n사용자가 입력을 마쳤을 때, 혹은 메소드를 통해 이동을 시작했을 때 발생한다.\n이벤트의 stop()을 호출시 인덱스 변경 및 패널로의 이동을 막는다.",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다.</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New active index<ko>변경할 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "New active panel<ko>인덱스 변경 이후 활성화된 패널로 설정할 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction from the active panel to the target panel<ko>현재 활성화된 패널로부터 이동하고자 하는 패널의 방향</ko>",
        "name": "direction"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 238
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:changed",
    "longname": "Flicking#event:changed",
    "name": "changed",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking's index is changed.",
    "memberof": "Flicking",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "New index<ko>새 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "New active panel<ko>새로 선택된 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Previous index<ko>이전 인덱스</ko>",
        "name": "prevIndex"
      },
      {
        "type": {
          "names": [
            "Panel",
            "null"
          ]
        },
        "description": "Previous active panel<ko>이전 패널</ko>",
        "name": "prevPanel"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction from the active panel to the target panel<ko>현재 활성화된 패널로부터 이동하고자 하는 패널의 방향</ko>",
        "name": "direction"
      }
    ],
    "meta": {
      "lineno": 181,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 239
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:willRestore",
    "longname": "Flicking#event:willRestore",
    "name": "willRestore",
    "kind": "event",
    "scope": "instance",
    "description": "Event fires when user drag amount not reached {@link Flicking#threshold threshold} and is returning to {@link Flicking#currentPanel currentPanel}",
    "memberof": "Flicking",
    "meta": {
      "lineno": 203,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "사용자가 드래그하여 이동한 거리가 {@link Flicking#threshold threshold}에 도달하지 못해, 기존 {@link Flicking#currentPanel currentPanel}로 돌아갈 것임을 나타내는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Stop the event action and prevent user from dragging<ko>이벤트 동작을 멈추고, 사용자가 드래그하지 못하도록 막습니다</ko>",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Index of the panel to restore<ko>복귀하고자 하는 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "Panel to restore<ko>복귀하고자 하는 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Moving direction relative to previous position of the camera<ko>이전 카메라 위치 대비 이동 방향</ko>",
        "name": "direction"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 240
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:restored",
    "longname": "Flicking#event:restored",
    "name": "restored",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when Flicking has returned to {@link Flicking#currentPanel currentPanel}",
    "memberof": "Flicking",
    "meta": {
      "lineno": 223,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "Flicking이 {@link Flicking#currentPanel currentPanel}의 위치로 다시 돌아왔을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Boolean that indicates whether the event was generated by a user action<ko>이벤트가 사용자 입력에 의하여 발생되었는지를 나타내는 값</ko>",
        "name": "isTrusted"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 241
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:select",
    "longname": "Flicking#event:select",
    "name": "select",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when panel is statically click / touched",
    "memberof": "Flicking",
    "meta": {
      "lineno": 236,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "패널이 정적으로 클릭(혹은 터치)되었을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Selected panel's index<ko>선택된 패널의 인덱스</ko>",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "Panel"
          ]
        },
        "description": "Selected panel<ko>선택된 패널</ko>",
        "name": "panel"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Direction from current camera position to the selected panel's position<ko>현재 카메라 위치 대비 선택된 패널의 위치</ko>",
        "name": "direction"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 242
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:needPanel",
    "longname": "Flicking#event:needPanel",
    "name": "needPanel",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when an empty panel area is visible at the edge of viewport\nYou can set its threshold with {@link Flicking#needPanelThreshold needPanelThreshold}",
    "memberof": "Flicking",
    "meta": {
      "lineno": 253,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "빈 패널 영역이 뷰포트 끝에 도달했을 때 발생하는 이벤트\n{@link Flicking#needPanelThreshold needPanelThreshold}를 이용해서 이벤트가 발생하는 지점을 조절할 수 있습니다",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Direction where new panel is needed.\n`DIRECTION.PREV` means panels should be {@link Flicking#prepend prepend}ed and `DIRECTION.NEXT` means panels should be {@link Flicking#append append}ed\n<ko>패널이 필요한 방향.\n`DIRECTION.PREV`의 경우 패널이 {@link Flicking#prepend prepend}되어야 함을 의미하고, `DIRECTION.NEXT`는 패널이 {@link Flicking#append append}되어야 함을 의미한다</ko>",
        "name": "direction"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 243
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:visibleChange",
    "longname": "Flicking#event:visibleChange",
    "name": "visibleChange",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when visible panel inside the viewport changes",
    "memberof": "Flicking",
    "meta": {
      "lineno": 271,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "현재 뷰포트 내에서 보이는 패널이 변경되었을 때 발생되는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels that added from previous visible panels<ko>새로 보이는 패널의 배열</ko>",
        "name": "added"
      },
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Panels that removed from previous visible panels<ko>보이지 않게 된 패널의 배열</ko>",
        "name": "removed"
      },
      {
        "type": {
          "names": [
            "Array<Panel>"
          ]
        },
        "description": "Current visible panels<ko>현재 보이는 패널의 배열</ko>",
        "name": "visiblePanels"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 244
  },
  {
    "sort": 9999999,
    "id": "Flicking#event:reachEdge",
    "longname": "Flicking#event:reachEdge",
    "name": "reachEdge",
    "kind": "event",
    "scope": "instance",
    "description": "Event that fires when camera reaches the maximum/minimum range",
    "memberof": "Flicking",
    "meta": {
      "lineno": 288,
      "filename": "event.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "카메라가 이동 가능한 영역의 끝에 도달했을 때 발생하는 이벤트",
    "params": [],
    "returns": [],
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Flicking"
          ]
        },
        "description": "An Flicking instance that triggered this event<ko>이 이벤트를 트리거한 Flicking의 인스턴스</ko>",
        "name": "currentTaget"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the event<ko>이벤트명</ko>",
        "name": "eventType"
      },
      {
        "type": {
          "names": [
            "Constants.DIRECTION"
          ]
        },
        "description": "Direction indicates whether the camera's position is at the maximum range({@link Constants.DIRECTION DIRECTION.NEXT}) or minimum range({@link Constants.DIRECTION DIRECTION.PREV})\n<ko>카메라의 위치가 이동 가능한 범위의 최대점({@link Constants.DIRECTION DIRECTION.NEXT}) 혹은 최소점({@link Constants.DIRECTION DIRECTION.PREV})에 도달했는지를 나타내는 값</ko>",
        "name": "direction"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/type/event.ts",
    "order": 245
  },
  {
    "sort": 9999999,
    "id": "ElementManipulator#event:orderChanged",
    "meta": {
      "lineno": 14,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "ElementManipulator#event:orderChanged",
    "name": "orderChanged",
    "kind": "event",
    "scope": "instance",
    "inherits": "OffsetManipulator#event:orderChanged",
    "inherited": true,
    "description": "Event that fires when order of the elements is changed",
    "memberof": "ElementManipulator",
    "params": [],
    "returns": [],
    "ko": "엘리먼트 순서 변경시 트리거되는 이벤트",
    "type": {
      "names": [
        "void"
      ]
    },
    "order": 389
  },
  {
    "sort": 9999999,
    "id": "OrderManipulator#event:orderChanged",
    "meta": {
      "lineno": 14,
      "filename": "OffsetManipulator.ts",
      "path": "/home/wn/egjs-flicking/src/renderer"
    },
    "filename": "/home/wn/egjs-flicking/src/renderer/OffsetManipulator.ts",
    "longname": "OrderManipulator#event:orderChanged",
    "name": "orderChanged",
    "kind": "event",
    "scope": "instance",
    "inherits": "OffsetManipulator#event:orderChanged",
    "inherited": true,
    "description": "Event that fires when order of the elements is changed",
    "memberof": "OrderManipulator",
    "params": [],
    "returns": [],
    "ko": "엘리먼트 순서 변경시 트리거되는 이벤트",
    "type": {
      "names": [
        "void"
      ]
    },
    "order": 404
  },
  {
    "sort": 9999999,
    "id": "Flicking.VERSION",
    "longname": "Flicking.VERSION",
    "name": "VERSION",
    "kind": "member",
    "scope": "static",
    "description": "Version info string",
    "memberof": "Flicking",
    "examples": [
      "Flicking.VERSION;  // ex) 4.0.0"
    ],
    "meta": {
      "lineno": 110,
      "filename": "Flicking.ts",
      "path": "/home/wn/egjs-flicking/src"
    },
    "ko": "버전정보 문자열",
    "filename": "/home/wn/egjs-flicking/src/Flicking.ts",
    "params": [],
    "returns": [],
    "order": 2
  },
  {
    "sort": 9999999,
    "id": "Component.VERSION",
    "longname": "Component.VERSION",
    "name": "VERSION",
    "kind": "member",
    "scope": "static",
    "description": "Version info string",
    "returns": [],
    "meta": {
      "lineno": 15,
      "filename": "Component.ts",
      "path": "/home/wn/egjs-flicking/node_modules/@egjs/component/src"
    },
    "ko": "버전정보 문자열",
    "memberof": "Component",
    "examples": [
      "Component.VERSION;  // ex) 3.0.0"
    ],
    "filename": "/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts",
    "params": [],
    "type": {
      "names": [
        "$ts:string<file>/home/wn/egjs-flicking/node_modules/@egjs/component/src/Component.ts</file>"
      ]
    },
    "order": 247
  },
  {
    "sort": 9999999,
    "id": "Constants.ERROR_CODE",
    "longname": "Constants.ERROR_CODE",
    "name": "ERROR_CODE",
    "kind": "constant",
    "scope": "static",
    "description": "Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.",
    "params": [],
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>",
        "name": "WRONG_TYPE"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>",
        "name": "ELEMENT_NOT_FOUND"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>",
        "name": "VAL_MUST_NOT_NULL"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>",
        "name": "NOT_ATTACHED_TO_FLICKING"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>",
        "name": "WRONG_OPTION"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>",
        "name": "INDEX_OUT_OF_RANGE"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>",
        "name": "POSITION_NOT_REACHABLE"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>",
        "name": "TRANSFORM_NOT_SUPPORTED"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>",
        "name": "STOP_CALLED_BY_USER"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>",
        "name": "ANIMATION_INTERRUPTED"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>",
        "name": "ANIMATION_ALREADY_PLAYING"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "When the non-allowed method is called from frameworks (React, Angular, Vue...)\n<ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>",
        "name": "NOT_ALLOWED_IN_FRAMEWORK"
      }
    ],
    "meta": {
      "lineno": 7,
      "filename": "error.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "{@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.",
    "memberof": "Constants",
    "type": {
      "names": [
        "object"
      ]
    },
    "filename": "/home/wn/egjs-flicking/src/const/error.ts",
    "returns": [],
    "order": 98
  },
  {
    "sort": 9999999,
    "id": "Constants.EVENTS",
    "longname": "Constants.EVENTS",
    "name": "EVENTS",
    "kind": "constant",
    "scope": "static",
    "description": "Event type object with event name strings of {@link Flicking}",
    "memberof": "Constants",
    "params": [],
    "examples": [
      "```ts\nimport { EVENTS } from \"@egjs/flicking\";\nEVENTS.MOVE_START; // \"moveStart\"\n```"
    ],
    "type": {
      "names": [
        "object"
      ]
    },
    "meta": {
      "lineno": 42,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "{@link Flicking}의 이벤트 이름 문자열들을 담은 객체",
    "properties": [
      {
        "type": {
          "names": [
            "\"holdStart\""
          ]
        },
        "description": "holdStart event<ko>holdStart 이벤트</ko>",
        "name": "HOLD_START"
      },
      {
        "type": {
          "names": [
            "\"holdEnd\""
          ]
        },
        "description": "holdEnd event<ko>holdEnd 이벤트</ko>",
        "name": "HOLD_END"
      },
      {
        "type": {
          "names": [
            "\"moveStart\""
          ]
        },
        "description": "moveStart event<ko>moveStart 이벤트</ko>",
        "name": "MOVE_START"
      },
      {
        "type": {
          "names": [
            "\"move\""
          ]
        },
        "description": "move event<ko>move 이벤트</ko>",
        "name": "MOVE"
      },
      {
        "type": {
          "names": [
            "\"moveEnd\""
          ]
        },
        "description": "moveEnd event<ko>moveEnd 이벤트</ko>",
        "name": "MOVE_END"
      },
      {
        "type": {
          "names": [
            "\"willChange\""
          ]
        },
        "description": "willChange event<ko>willChange 이벤트</ko>",
        "name": "WILL_CHANGE"
      },
      {
        "type": {
          "names": [
            "\"changed\""
          ]
        },
        "description": "changed event<ko>changed 이벤트</ko>",
        "name": "CHANGED"
      },
      {
        "type": {
          "names": [
            "\"willRestore\""
          ]
        },
        "description": "willRestore event<ko>willRestore 이벤트</ko>",
        "name": "WILL_RESTORE"
      },
      {
        "type": {
          "names": [
            "\"restored\""
          ]
        },
        "description": "restored event<ko>restored 이벤트</ko>",
        "name": "RESTORED"
      },
      {
        "type": {
          "names": [
            "\"select\""
          ]
        },
        "description": "select event<ko>select 이벤트</ko>",
        "name": "SELECT"
      },
      {
        "type": {
          "names": [
            "\"needPanel\""
          ]
        },
        "description": "needPanel event<ko>needPanel 이벤트</ko>",
        "name": "NEED_PANEL"
      }
    ],
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "returns": [],
    "order": 100
  },
  {
    "sort": 9999999,
    "id": "Constants.ALIGN",
    "longname": "Constants.ALIGN",
    "name": "ALIGN",
    "kind": "constant",
    "scope": "static",
    "description": "An object with all possible predefined literal string for the {@link Flicking#align align} option",
    "memberof": "Constants",
    "returns": [],
    "properties": [
      {
        "type": {
          "names": [
            "\"prev\""
          ]
        },
        "description": "left/top align<ko>좌/상 정렬</ko>",
        "name": "PREV"
      },
      {
        "type": {
          "names": [
            "\"center\""
          ]
        },
        "description": "center align<ko>중앙 정렬</ko>",
        "name": "CENTER"
      },
      {
        "type": {
          "names": [
            "\"next\""
          ]
        },
        "description": "right/bottom align<ko>우/하 정렬</ko>",
        "name": "NEXT"
      }
    ],
    "meta": {
      "lineno": 70,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "{@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체",
    "type": {
      "names": [
        "object"
      ]
    },
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "params": [],
    "order": 101
  },
  {
    "sort": 9999999,
    "id": "Constants.DIRECTION",
    "longname": "Constants.DIRECTION",
    "name": "DIRECTION",
    "kind": "constant",
    "scope": "static",
    "description": "An object of directions",
    "memberof": "Constants",
    "returns": [],
    "properties": [
      {
        "type": {
          "names": [
            "\"PREV\""
          ]
        },
        "description": "\"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n<ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>",
        "name": "PREV"
      },
      {
        "type": {
          "names": [
            "\"NEXT\""
          ]
        },
        "description": "\"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n<ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>",
        "name": "NEXT"
      },
      {
        "type": {
          "names": [
            "null"
          ]
        },
        "description": "This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>",
        "name": "NONE"
      }
    ],
    "meta": {
      "lineno": 87,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "방향을 나타내는 값들을 담고 있는 객체",
    "type": {
      "names": [
        "object"
      ]
    },
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "params": [],
    "order": 102
  },
  {
    "sort": 9999999,
    "id": "Constants.MOVE_TYPE",
    "longname": "Constants.MOVE_TYPE",
    "name": "MOVE_TYPE",
    "kind": "constant",
    "scope": "static",
    "description": "An object with all possible {@link Flicking#moveType moveType}s",
    "memberof": "Constants",
    "returns": [],
    "properties": [
      {
        "type": {
          "names": [
            "\"snap\""
          ]
        },
        "description": "Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n<ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>",
        "name": "SNAP"
      },
      {
        "type": {
          "names": [
            "\"freeScroll\""
          ]
        },
        "description": "Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n<ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>",
        "name": "FREE_SCROLL"
      }
    ],
    "meta": {
      "lineno": 103,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/const"
    },
    "ko": "Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체",
    "type": {
      "names": [
        "object"
      ]
    },
    "filename": "/home/wn/egjs-flicking/src/const/external.ts",
    "params": [],
    "order": 103
  },
  {
    "sort": 9999999,
    "id": "eg.Flicking.withFlickingMethods",
    "longname": "eg.Flicking.withFlickingMethods",
    "name": "withFlickingMethods",
    "kind": "function",
    "scope": "static",
    "description": "Decorator that makes the method of flicking available in the framework.",
    "memberof": "eg.Flicking",
    "examples": [
      "```js\nimport Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n\nclass Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n  &#64;withFlickingMethods\n  private flicking: Flicking;\n}\n```"
    ],
    "meta": {
      "lineno": 23,
      "filename": "withFlickingMethods.ts",
      "path": "/home/wn/egjs-flicking/src/cfc"
    },
    "ko": "프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.",
    "returns": [],
    "access": "private",
    "filename": "/home/wn/egjs-flicking/src/cfc/withFlickingMethods.ts",
    "params": [],
    "order": 95
  },
  {
    "sort": 9999999,
    "id": "Flicking.ElementLike",
    "longname": "Flicking.ElementLike",
    "name": "ElementLike",
    "kind": "typedef",
    "scope": "static",
    "description": "HTML `string` of single/mutiple HTMLElement, or an instance of `HTMLElement`",
    "params": [],
    "meta": {
      "lineno": 7,
      "filename": "external.ts",
      "path": "/home/wn/egjs-flicking/src/type"
    },
    "ko": "단일/복수의 HTMLElement의 outerHTML에 해당하는 `string`, 혹은 `HTMLElement`의 인스턴스",
    "memberof": "Flicking",
    "filename": "/home/wn/egjs-flicking/src/type/external.ts",
    "returns": [],
    "type": {
      "names": [
        "$ts:string | HTMLElement<file>/home/wn/egjs-flicking/src/type/external.ts</file>"
      ]
    },
    "order": 246
  }
]
