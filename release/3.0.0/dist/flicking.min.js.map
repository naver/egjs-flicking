{"version":3,"file":"flicking.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/components/Viewport.ts","../src/Flicking.ts"],"sourcesContent":["import { ElementLike } from \"./types\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n","import { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\n\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  // willChange: \"transform\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","import { OriginalStyle, FlickingOptions } from \"../types\";\nimport { DEFAULT_PANEL_CSS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression } from \"../utils\";\n\nclass Panel {\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  private element: HTMLElement;\n  private state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    clonedPanels: Panel[];\n    cachedBbox: ClientRect | null;\n  };\n  private options: FlickingOptions;\n  private original?: Panel;\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    options: FlickingOptions,\n  ) {\n    this.element = element;\n    this.prevSibling = null;\n    this.nextSibling = null;\n\n    this.state = {\n      index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      clonedPanels: [],\n      isClone: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\") || null,\n        style: element.getAttribute(\"style\") || null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n  }\n\n  public resize(): void {\n    const state = this.state;\n    const bbox = this.getBbox();\n\n    state.size = this.options.horizontal\n      ? bbox.width\n      : bbox.height;\n    state.relativeAnchorPosition = parseArithmeticExpression(this.options.anchor, state.size);\n\n    if (!state.isClone) {\n      state.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public reset(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public destroy(): void {\n    const el = this.element;\n    const originalStyle = this.state.originalStyle;\n\n    originalStyle.className\n      ? el.setAttribute(\"class\", originalStyle.className)\n      : el.removeAttribute(\"class\");\n    originalStyle.style\n      ? el.setAttribute(\"style\", originalStyle.style)\n      : el.removeAttribute(\"style\");\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : state.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...state.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number) {\n    const state = this.state;\n\n    state.index = index;\n    state.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number) {\n    const state = this.state;\n    const options = this.options;\n    const elementStyle = this.element.style;\n\n    state.position = pos;\n    options.horizontal\n      ? elementStyle.left = `${pos}px`\n      : elementStyle.top = `${pos}px`;\n  }\n\n  public clone(cloneIndex: number): Panel {\n    const state = this.state;\n\n    const cloneElement = this.element.cloneNode(true) as HTMLElement;\n    const clonedPanel = new Panel(cloneElement, state.index, this.options);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = this;\n    clonedState.isClone = true;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n    state.clonedPanels.push(clonedPanel);\n\n    return clonedPanel;\n  }\n\n  public remove(): void {\n    const element = this.element;\n    element.parentNode!.removeChild(element);\n\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const state = this.state;\n    const removingPanels = state.clonedPanels.splice(start);\n\n    removingPanels.forEach(panel => {\n      panel.remove();\n    });\n  }\n}\n\nexport default Panel;\n","import Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private options: FlickingOptions;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clonedPanels(),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel> {\n    return this.clones.reduce((allClones, clones) => [...allClones, ...clones], []);\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.clones.length;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      removingPanels.forEach(panel => panel.remove());\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n    }\n  }\n\n  public append(newPanels: Panel[]): void {\n    const range = this.range;\n    this.panels.push(...newPanels);\n\n    if (newPanels.length > 0) {\n      range.min = Math.max(0, range.min);\n      range.max += newPanels.length;\n      this.length += newPanels.length;\n    }\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        removedPanels.forEach(panel => panel.remove());\n        this.length -= removedPanels.length;\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): void {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n    replacedPanels.forEach(panel => {\n      if (panel) {\n        panel.remove();\n      }\n    });\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    deletedPanels.forEach(panel => {\n      panel.remove();\n    });\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 0) {\n      return;\n    }\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanelsCount - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanelsCount - 1];\n\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  // Clear both original & cloned\n  public clear(): void {\n    this.panels.forEach(panel => {\n      panel.remove();\n      panel.removeClonedPanelsAfter(0);\n    });\n\n    this.panels = [];\n    this.clones = [];\n    this.length = 0;\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n  }\n\n  public clearClone(): void {\n    this.panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(0);\n    });\n    this.clones = [];\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels) {\n      if (panel && panel.getIndex() >= index) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n}\n\nexport default PanelManager;\n","import Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public targetOffset: number = 0;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.targetOffset = prevState.targetOffset;\n    this.lastPosition = prevState.lastPosition;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","import State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.targetOffset = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: viewport.castToFlickingPanel(clickedPanel),\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","import State from \"./State\";\nimport Panel from \"../components/Panel\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext, MoveTypeObjectOption, MoveTypeSnapOption } from \"../types\";\nimport { clamp } from \"../utils\";\nimport Viewport from \"../components/Viewport\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onEnter(prevState: State): void {\n    super.onEnter(prevState);\n    this.delta = 0;\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const defaultDuration = options.duration;\n    const halfGap = options.gap / 2;\n    const moveType = options.moveType as MoveTypeObjectOption;\n    const isFreeScroll = moveType.type === \"freeScroll\";\n    const snapCount = isFreeScroll ? Infinity : (moveType as MoveTypeSnapOption).count;\n    const inputEvent = e.inputEvent;\n    const eventDelta = Math.abs(e.delta.flick);\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : Math.abs(delta) > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = Math.max(Math.abs(delta), Math.abs(inputDelta));\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (!overThreshold && this.targetPanel) {\n      // Interrupted while animating\n      viewport.moveTo(this.targetPanel, \"\", e, this.targetOffset);\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - currentPanel.getRelativeAnchorPosition() + halfGap\n      : currentPanel.getRelativeAnchorPosition() + halfGap;\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    let duration = defaultDuration;\n    let panelToMove: Panel;\n    let offset: number = 0;\n\n    if (overThreshold) {\n      if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n        const basePanel = isFreeScroll\n          ? nearestPanel\n          : viewport.findNearestIdenticalPanel(currentPanel);\n\n        // FreeScroll & snap\n        const { panelAtDestPos, snapOffset, indexDiff } = this.findPanelWhenSnapIsOn({\n          isNextDirection,\n          e,\n          viewport,\n          basePanel,\n        });\n\n        panelToMove = panelAtDestPos;\n        offset = snapOffset;\n        duration = clamp(e.duration, defaultDuration, defaultDuration * indexDiff);\n      } else if (\n        !isFreeScroll\n        && !viewport.isOutOfBound()\n        && (\n          swipeDistance <= minimumDistanceToChange\n          || (!options.circular && nearestPanel.getIndex() === currentPanel.getIndex())\n        )\n      ) {\n        panelToMove = this.findAdjacentPanel(isNextDirection, viewport);\n      } else {\n        panelToMove = nearestPanel;\n      }\n    } else {\n      panelToMove = options.circular\n        ? this.findRestorePanelInCircularMode(isNextDirection, viewport)\n        : currentPanel;\n    }\n\n    const panelPosition = panelToMove.getPosition() + offset;\n    const movingToSamePanel = panelPosition === currentPanel.getPosition();\n    const eventType = (!overThreshold || movingToSamePanel)\n      ? isFreeScroll\n        ? \"\"\n        : EVENTS.RESTORE\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      panelToMove,\n      eventType,\n      e,\n      offset,\n      duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n\n  private findRestorePanelInCircularMode(isNextDirection: boolean, viewport: Viewport): Panel {\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    const panelToMove = (!isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n\n    return panelToMove;\n  }\n\n  private findPanelWhenSnapIsOn(params: {\n    isNextDirection: boolean,\n    e: any,\n    viewport: Viewport,\n    basePanel: Panel,\n  }): {\n    panelAtDestPos: Panel,\n    snapOffset: number,\n    indexDiff: number,\n  } {\n    const { isNextDirection, e, viewport, basePanel } = params;\n\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const indexRange = viewport.panelManager.getRange();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = e.destPos.flick + viewport.getRelativeHangerPosition();\n    const moveType = options.moveType as MoveTypeObjectOption;\n    const snapCount = moveType.type === \"freeScroll\" ? Infinity : moveType.count;\n    let panelToMove = basePanel;\n    let passedPanelCount = 0;\n    let cycleIndex = panelToMove.getIndex() === indexRange.min\n      ? basePanel.getCloneIndex() + 1\n      : 0;\n\n    while (passedPanelCount < snapCount) {\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n\n      // Since panlToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && (panelPosition + panelSize + halfGap) > estimatedHangerPos)\n        || (!isNextDirection && (panelPosition - halfGap) < estimatedHangerPos)\n      ) {\n        break;\n      }\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n    const offset = cycleIndex * scrollAreaSize - (panelToMove.getPosition() - originalPosition);\n\n    return {\n      panelAtDestPos: panelToMove,\n      snapOffset: offset,\n      indexDiff: passedPanelCount,\n    };\n  }\n\n  private findAdjacentPanel(isNextDirection: boolean, viewport: Viewport): Panel {\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n\n    return panelToMove;\n  }\n}\n\nexport default DraggingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onEnter(e: any): void {\n    super.onEnter(e);\n    this.delta = 0;\n  }\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Update current panel as current nearest panel\n    this.lastPosition = viewport.getCameraPosition();\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","import State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","import State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","import Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, getProgress } from \"../utils\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: {[key: string]: any};\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n\n  private state: {\n    size: number;\n    position: number;\n    relativeHangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n  };\n\n  constructor(\n    flicking: Flicking,\n    viewportElement: HTMLElement,\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      relativeHangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.panelManager = new PanelManager(cameraElement, options);\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    offset: number = 0,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const freeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n\n    const currentPosition = state.position;\n    const castedPanel = this.castToFlickingPanel(panel, offset);\n\n    let estimatedPosition = castedPanel.getAnchorPosition() - state.relativeHangerPosition;\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, state.scrollArea.prev, state.scrollArea.next)\n      : estimatedPosition;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = estimatedPosition > currentPosition\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel: castedPanel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.targetPanel = panel;\n      currentState.targetOffset = offset;\n      currentState.direction = estimatedPosition > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n      if (estimatedPosition === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: freeScroll ? axesEvent.destPos.flick : estimatedPosition }, duration);\n      } else {\n        this.axes.setTo({ flick: estimatedPosition }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n\n    // Update position & nearestPanel\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    const moveVector = options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public resize(): void {\n    const panelManager = this.panelManager;\n\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n    this.updateCameraPosition();\n  }\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this.options))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (isBetween(index, min, max)) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      } else if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this.options))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    panelManager.replace(index, panels);\n\n    const currentPanel = this.currentPanel;\n    if (!currentPanel) {\n      this.currentPanel = panels[0];\n    } else if (isBetween(currentPanel.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (index <= max && index + panels.length > min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      }\n    });\n\n    this.resize();\n\n    return panels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n    this.resize();\n\n    return removedPanels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    let sizeToApply: number;\n    if (options.adaptive) {\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(): void {\n    const viewportElement = this.viewportElement;\n    const wrapper = viewportElement.parentElement;\n\n    wrapper!.removeChild(viewportElement);\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    this.panelManager.originalPanels().forEach(panel => {\n      wrapper!.appendChild(panel.getElement());\n      panel.destroy();\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    panelManager.clear();\n    cameraElement.innerHTML = status.panels.map(panel => panel.html).join(\"\");\n\n    this.createPanels();\n    this.currentPanel = panelManager.get(status.index);\n\n    // Reset panel index\n    panelManager.originalPanels().forEach((panel, idx) => {\n      panel.setIndex(panels[idx].index);\n    });\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const {prev: prevRange, next: nextRange} = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : basePosition = nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public connectAxesHandler(handlers: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public castToFlickingPanel = (panel: Panel, offset = 0): FlickingPanel => {\n    const viewport = this;\n    const options = viewport.options;\n\n    return {\n      getElement() {\n        return panel.getElement();\n      },\n      getIndex() {\n        return panel.getIndex();\n      },\n      getPosition() {\n        return panel.getPosition() + offset;\n      },\n      getAnchorPosition() {\n        return this.getPosition() + panel.getRelativeAnchorPosition();\n      },\n      getSize() {\n        return panel.getSize();\n      },\n      getProgress() {\n        let progress: number = NaN;\n\n        // single\n        const panelCount = viewport.panelManager.getPanelCount();\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n\n        progress = relativeIndex - viewport.getCurrentProgress();\n        return progress;\n      },\n      getOutsetProgress(this: FlickingPanel) {\n        let outsetProgress: number = NaN;\n\n        const outsetRange = [\n          -this.getSize(),\n          viewport.getRelativeHangerPosition() - panel.getRelativeAnchorPosition(),\n          viewport.getSize(),\n        ];\n        const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n\n        outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n        return outsetProgress;\n      },\n      getVisibleRatio(this: FlickingPanel) {\n        let visibleRatio = 0;\n\n        const panelSize = panel.getSize();\n        const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n        const rightRelativePanelPosition = relativePanelPosition + panelSize;\n        const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n\n        visibleRatio = visibleSize >= 0\n          ? visibleSize / panelSize\n          : 0;\n\n        return visibleRatio;\n      },\n      focus(this: FlickingPanel, duration?: number): void {\n        const currentPanel = viewport.getCurrentPanel();\n        const hangerPosition = viewport.getHangerPosition();\n        const anchorPosition = panel.getAnchorPosition();\n        if (hangerPosition === anchorPosition || !currentPanel) {\n          return;\n        }\n\n        const currentPosition = currentPanel.getPosition();\n        const eventType = currentPosition === this.getPosition()\n          ? \"\"\n          : EVENTS.CHANGE;\n        viewport.moveTo(panel, eventType, null, offset, duration);\n      },\n      update(this: FlickingPanel, updateFunction: (element: HTMLElement) => any): void {\n        panel.getIdenticalPanels()\n          .forEach(eachPanel => updateFunction(eachPanel.getElement()));\n      },\n      prev(this: FlickingPanel): FlickingPanel | null {\n        const prevSibling = panel.prevSibling;\n\n        if (!prevSibling) {\n          return null;\n        }\n\n        const currentIndex = this.getIndex();\n        const prevIndex = prevSibling.getIndex();\n\n        const hasEmptyPanelBetween = currentIndex - prevIndex > 1;\n        const notYetMinPanel = options.infinite\n          && currentIndex > 0\n          && prevIndex > currentIndex;\n\n        if (hasEmptyPanelBetween || notYetMinPanel) {\n          // Empty panel exists between\n          return null;\n        }\n\n        const prevPanelSize = prevSibling.getSize();\n        const newPosition = this.getPosition() - prevPanelSize - options.gap;\n        const newOffset = newPosition - prevSibling.getPosition();\n\n        return viewport.castToFlickingPanel(prevSibling, newOffset);\n      },\n      next(this: FlickingPanel): FlickingPanel | null {\n        const nextSibling = panel.nextSibling;\n        const lastIndex = viewport.panelManager.getLastIndex();\n\n        if (!nextSibling) {\n          return null;\n        }\n\n        const currentIndex = this.getIndex();\n        const nextIndex = nextSibling.getIndex();\n\n        const hasEmptyPanelBetween = nextIndex - currentIndex > 1;\n        const notYetMaxPanel = options.infinite\n          && currentIndex < lastIndex\n          && nextIndex < currentIndex;\n\n        if (hasEmptyPanelBetween || notYetMaxPanel) {\n          return null;\n        }\n\n        const newPosition = this.getPosition() + panel.getSize() + options.gap;\n        const newOffset = newPosition - nextSibling.getPosition();\n\n        return viewport.castToFlickingPanel(nextSibling, newOffset);\n      },\n      insertBefore(this: FlickingPanel, element: ElementLike | ElementLike[]): FlickingPanel[] {\n        const parsedElements = parseElement(element);\n        const firstPanel = viewport.panelManager.firstPanel()!;\n        const prevSibling = panel.prevSibling;\n        // Finding correct inserting index\n        // While it should insert removing empty spaces,\n        // It also should have to be bigger than prevSibling' s index\n        const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n          ? Math.max(prevSibling.getIndex() + 1, panel.getIndex() - parsedElements.length)\n          : Math.max(panel.getIndex() - parsedElements.length, 0);\n\n        return viewport.insert(targetIndex, parsedElements);\n      },\n      insertAfter(this: FlickingPanel, element: ElementLike | ElementLike[]): FlickingPanel[] {\n        return viewport.insert(panel.getIndex() + 1, element);\n      },\n      remove(this: FlickingPanel): FlickingPanel {\n        return viewport.remove(panel.getIndex())[0];\n      },\n    };\n  }\n\n  private build(): void {\n    this.applyCSSValue();\n    this.setAxesInstance();\n    this.createPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const classPrefix = options.classPrefix;\n\n    // Set default css values for each element\n    viewportElement.className = `${classPrefix}-viewport`;\n    cameraElement.className = `${classPrefix}-camera`;\n\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    if (options.zIndex) {\n      viewportElement.style.zIndex = `${options.zIndex}`;\n    }\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this.options),\n    );\n\n    if (panels.length > 0) {\n      this.panelManager.append(panels);\n    }\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const panelManager = this.panelManager;\n\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + this.options.gap;\n    const visibleAreaSize = viewportSize + firstPanel.getRelativeAnchorPosition();\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n\n    const cloneCount = Math.ceil(visibleAreaSize / sumOriginalPanelSize);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n\n          this.cameraElement.appendChild(clonedPanel.getElement());\n          return clonedPanel;\n        });\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const panels = this.panelManager.originalPanels();\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n      viewportElement.style.minWidth = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n    state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n\n    // Resize all panels\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if ((currentState.holding || currentState.playing) && nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const currentPosition = panel.getPosition();\n      const panelSize = panel.getSize();\n\n      if (currentPosition !== newPosition) {\n        panel.setPosition(newPosition);\n      }\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .filter(panel => !!panel);\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      if (!panel) {\n        continue;\n      }\n\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const axes = this.axes;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n\n    if (!currentPanel || currentState.holding || currentState.playing) {\n      return;\n    }\n\n    let newPosition = currentPanel.getAnchorPosition() - state.relativeHangerPosition;\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.axes.off();\n    axes.setTo({\n      flick: newPosition,\n    }, 0);\n    this.axes.on(this.axesHandlers);\n    this.moveCamera(newPosition);\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        index: 0,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      let lastPanel = panelManager.lastPanel()!;\n      let atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          index: checkingPanel.getIndex(),\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel()!;\n        const firstIndex = firstPanel.getIndex();\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            index: checkingPanel.getIndex(),\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      lastPanel = panelManager.lastPanel()!;\n      atLastPanel = currentIndex === lastPanel.getIndex();\n\n      if (atLastPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      let firstPanel = panelManager.firstPanel()!;\n      let atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          index: checkingPanel.getIndex(),\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel()!;\n        const lastIndex = lastPanel.getIndex();\n\n        if (lastIndex < maxLastIndex) {\n          this.triggerNeedPanel({\n            axesEvent,\n            index: checkingPanel.getIndex(),\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      firstPanel = panelManager.firstPanel()!;\n      atFirstPanel = checkingIndex === firstPanel.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    index: number;\n    siblingPanel?: Panel,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, index, siblingPanel, direction, indexRange } = params;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const panel = siblingPanel\n      ? this.castToFlickingPanel(siblingPanel)\n      : null;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel,\n        direction,\n        range: indexRange,\n      } as NeedPanelEvent,\n    );\n  }\n}\n","import Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\n\nimport { merge, getProgress, toArray, parseElement, isString } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike } from \"./types\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private plugins: Plugin[] = [];\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class name will be added for the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching last panel's index reaches lastIndex<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when event's panel index is greater than it.<br>Also, if last panel's index reached given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether resize() method should be called automatically after window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent view from going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Reference position of hanger in viewport, which hangs panel anchors should be stopped at.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Reference position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels. Should be given in number.(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input.(ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n    this.build();\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const options = this.options;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const currentIndex = viewport.getCurrentIndex();\n    const indexRange = panelManager.getRange();\n    const panelCount = panelManager.getPanelCount();\n    const lastIndex = panelManager.getLastIndex();\n    const minimumRange = options.infinite\n      ? 0\n      : indexRange.min;\n    let prevIndex = currentIndex - 1;\n\n    if (prevIndex < minimumRange) {\n      prevIndex = this.options.circular && panelCount > 0\n        ? options.infinite\n          ? lastIndex\n          : indexRange.max\n        : -1;\n    }\n\n    return this.moveTo(prevIndex, duration);\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const options = this.options;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const currentIndex = viewport.getCurrentIndex();\n    const indexRange = panelManager.getRange();\n    const panelCount = panelManager.getPanelCount();\n    const lastIndex = panelManager.getLastIndex();\n    const maximumRange = options.infinite\n      ? lastIndex\n      : indexRange.max;\n    let nextIndex = currentIndex + 1;\n\n    if (nextIndex > maximumRange) {\n      nextIndex = options.circular && panelCount > 0\n        ? options.infinite\n          ? 0\n          : indexRange.min\n        : -1;\n    }\n\n    return this.moveTo(nextIndex, duration);\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let offset = 0;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity);\n\n      offset = nearestPosition - anchorPosition;\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === anchorPosition + offset && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      panel,\n      eventType,\n      null,\n      offset,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? viewport.castToFlickingPanel(panel)\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? viewport.castToFlickingPanel(panel)\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel)\n      .map(panel => viewport.castToFlickingPanel(panel));\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(panel => {\n      const outsetProgress = panel.getOutsetProgress();\n\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Set last panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Last panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this);\n    });\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(): void {\n    this.off();\n\n    this.viewport.destroy();\n\n    this.plugins.forEach(plugin => {\n      plugin.destroy(this);\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize(): this {\n    const viewport = this.viewport;\n\n    viewport.panelManager.allPanels()\n      .forEach(panel => panel.reset());\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  private build(): void {\n    this.initViewport();\n    this.listenInput();\n    this.listenResize();\n  }\n\n  private initViewport(): void {\n    const wrapper = this.wrapper;\n    const options = this.options;\n    const cameraElement = document.createElement(\"div\");\n\n    // Make all panels to be a child of camera element\n    // wrapper <- viewport <- camera <- panels[1...n]\n    toArray(wrapper.children).forEach(child => {\n      cameraElement.appendChild(child);\n    });\n\n    // Clipping area for camera element\n    const viewportElement = document.createElement(\"div\");\n    viewportElement.appendChild(cameraElement);\n\n    // Add viewport element to wrapper\n    wrapper.appendChild(viewportElement);\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, viewportElement, cameraElement, options, this.triggerEvent);\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", () => {\n        this.resize();\n      });\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = -Math.sign(cameraChange) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","el","isString","tempDiv","document","createElement","innerHTML","push","toArray","children","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","name","has3d","length","cssObj","property","val","min","max","Math","iterable","slice","call","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","DEFAULT_VIEWPORT_CSS","position","width","height","DEFAULT_CAMERA_CSS","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","DIRECTION","PREV","NEXT","TRANSFORM","index","options","className","prevSibling","nextSibling","state","relativeAnchorPosition","size","clonedPanels","isClone","cloneIndex","originalStyle","getAttribute","cachedBbox","classList","add","indexOf","replace","applyCSS","this","bbox","getBbox","parseArithmeticExpression","panel","resize","setAttribute","removeAttribute","getBoundingClientRect","original","getClonedPanels","getIdenticalPanels","elementStyle","left","top","clonedPanel","Panel","cloneNode","clonedState","parentNode","removeClonedPanelsAfter","start","splice","remove","cameraElement","panels","clones","reduce","allClones","firstPanel","lastPanel","getIndex","removingPanels","possibleLastPanel","filter","newPanels","_a","isCircular","findFirstPanelFrom","siblingElement","getElement","fragment","createDocumentFragment","appendChild","pushedIndex","offset","panelsAfterIndex","emptyPanelCount","findIndex","removedPanels","Boolean","setIndex","addNewClones","updateIndex","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","cloneSet","nonEmptyIndexFromLast","concat","reverse","allPanels","allPanelsCount","prevPanel","nextPanel","insertTarget_1","newClones_1","allPanels_1","contains","originalPanels","cloneCount","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","newClones","map","clone","this_1","insertClones","counterArray","counter","insertingIndex","newLastIndex","prevState","delta","direction","targetPanel","targetOffset","lastPosition","nextState","e","context","_this","tslib_1","flicking","viewport","triggerEvent","transitTo","getPanelCount","getCameraPosition","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","clickedElement","srcEvent","clickedPanel","panelManager","findPanelOf","cameraPosition","clickedPanelPosition","getPosition","castToFlickingPanel","_super","onEnter","moveCamera","stopCamera","defaultDuration","halfGap","isFreeScroll","snapCount","eventDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTo","currentPanel","getCurrentPanel","nearestPanel","getNearestPanel","stop","minimumDistanceToChange","getSize","getRelativeAnchorPosition","panelToMove","basePanel","findNearestIdenticalPanel","panelAtDestPos","snapOffset","indexDiff","isOutOfBound","findAdjacentPanel","findRestorePanelInCircularMode","movingToSamePanel","eventType","originalPanel","getOriginalPanel","hangerPosition","getHangerPosition","firstClonedPanel","lapped","getAnchorPosition","params","scrollAreaSize","getScrollAreaSize","indexRange","getRange","estimatedHangerPos","destPos","getRelativeHangerPosition","passedPanelCount","cycleIndex","getCloneIndex","siblingPanel","panelIndex","siblingIndex","panelPosition","panelSize","originalPosition","currentIndex","getCurrentIndex","get","adjacentPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onHold","onRelease","onAnimationEnd","onFinish","viewportElement","axesEvent","stateMachine","getProgress","panelCount","floor","getCurrentProgress","getOutsetProgress","outsetRange","getVisibleRatio","relativePanelPosition","rightRelativePanelPosition","visibleSize","focus","update","updateFunction","eachPanel","prev","prevIndex","hasEmptyPanelBetween","notYetMinPanel","prevPanelSize","newOffset","next","getLastIndex","nextIndex","notYetMaxPanel","parsedElements","parseElement","targetIndex","insert","insertAfter","relativeHangerPosition","scrollArea","translate","checkedIndexes","StateMachine","PanelManager","build","getState","currentPosition","castedPanel","estimatedPosition","canSetBoundMode","eventResult","axes","findNearestPanel","originalNearestPosition","checkNeedPanel","moveCoord","coord","round","join","updateSize","updateOriginalPanelPositions","updateScrollArea","clonePanels","updateClonedPanelPositions","chainAllPanels","updateCameraPosition","findNearestPanelAt","minimumDistance","prevPosition","nextPosition","distance","isBetween","nearest","shortestDistance","identical","anchorPosition","panInput","enable","disable","indexes","newCurrentIndex","sizeToApply","panelBbox","maximum","viewportStyle","minHeight","minWidth","wrapper","destroy","status","clear","html","createPanels","playing","holding","NaN","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","basePosition","targetPosition","progressBetween","setLastIndex","handlers","axesHandlers","on","applyCSSValue","setAxesInstance","setDefaultPanel","moveToDefaultPanel","Axes","easing","interruptable","PanInput","scale","connect","append","viewportSize","sumOriginalPanelSize","visibleAreaSize","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","summedPanelSize","nextPanelPos","maintainingPanel","accumulatedSize","total","newPosition","setPosition","clonedPanels_1","clonedPanelPos","lastReplacePosition","_b","replacePosition","arr","parsedBounce","constructor","parsedVal","axis","off","maxLastIndex","checkingPanel","atLastPanel","currentNearestPosition","triggerNeedPanel","firstIndex","cameraPrev","checkingIndex","atFirstPanel","alreadyTriggered","some","hasHandler","hasOn","eventName","canceled","progress","trigger","merge","previousPosition","inputOffset","cameraChange","looped","currentDirection","querySelector","nodeName","nodeType","currentOptions","current","includeClone","getAllPanels","outsetProgress","outerHTML","restore","plugins","newPlugins","plugin","init","currentPlugins","reset","initViewport","listenInput","listenResize","child","Viewport","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component"],"mappings":"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"}