{"version":3,"file":"flicking.esm.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/components/Viewport.ts","../src/Flicking.ts"],"sourcesContent":["import { ElementLike } from \"./types\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n","import { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\n\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  // willChange: \"transform\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","import { OriginalStyle, FlickingOptions } from \"../types\";\nimport { DEFAULT_PANEL_CSS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression } from \"../utils\";\n\nclass Panel {\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  private element: HTMLElement;\n  private state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    clonedPanels: Panel[];\n    cachedBbox: ClientRect | null;\n  };\n  private options: FlickingOptions;\n  private original?: Panel;\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    options: FlickingOptions,\n  ) {\n    this.element = element;\n    this.prevSibling = null;\n    this.nextSibling = null;\n\n    this.state = {\n      index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      clonedPanels: [],\n      isClone: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\") || null,\n        style: element.getAttribute(\"style\") || null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n  }\n\n  public resize(): void {\n    const state = this.state;\n    const bbox = this.getBbox();\n\n    state.size = this.options.horizontal\n      ? bbox.width\n      : bbox.height;\n    state.relativeAnchorPosition = parseArithmeticExpression(this.options.anchor, state.size);\n\n    if (!state.isClone) {\n      state.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public reset(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public destroy(): void {\n    const el = this.element;\n    const originalStyle = this.state.originalStyle;\n\n    originalStyle.className\n      ? el.setAttribute(\"class\", originalStyle.className)\n      : el.removeAttribute(\"class\");\n    originalStyle.style\n      ? el.setAttribute(\"style\", originalStyle.style)\n      : el.removeAttribute(\"style\");\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : state.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...state.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number) {\n    const state = this.state;\n\n    state.index = index;\n    state.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number) {\n    const state = this.state;\n    const options = this.options;\n    const elementStyle = this.element.style;\n\n    state.position = pos;\n    options.horizontal\n      ? elementStyle.left = `${pos}px`\n      : elementStyle.top = `${pos}px`;\n  }\n\n  public clone(cloneIndex: number): Panel {\n    const state = this.state;\n\n    const cloneElement = this.element.cloneNode(true) as HTMLElement;\n    const clonedPanel = new Panel(cloneElement, state.index, this.options);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = this;\n    clonedState.isClone = true;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n    state.clonedPanels.push(clonedPanel);\n\n    return clonedPanel;\n  }\n\n  public remove(): void {\n    const element = this.element;\n    element.parentNode!.removeChild(element);\n\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const state = this.state;\n    const removingPanels = state.clonedPanels.splice(start);\n\n    removingPanels.forEach(panel => {\n      panel.remove();\n    });\n  }\n}\n\nexport default Panel;\n","import Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private options: FlickingOptions;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clonedPanels(),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel> {\n    return this.clones.reduce((allClones, clones) => [...allClones, ...clones], []);\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.clones.length;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      removingPanels.forEach(panel => panel.remove());\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n    }\n  }\n\n  public append(newPanels: Panel[]): void {\n    const range = this.range;\n    this.panels.push(...newPanels);\n\n    if (newPanels.length > 0) {\n      range.min = Math.max(0, range.min);\n      range.max += newPanels.length;\n      this.length += newPanels.length;\n    }\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        removedPanels.forEach(panel => panel.remove());\n        this.length -= removedPanels.length;\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): void {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n    replacedPanels.forEach(panel => {\n      if (panel) {\n        panel.remove();\n      }\n    });\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    deletedPanels.forEach(panel => {\n      panel.remove();\n    });\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 0) {\n      return;\n    }\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanelsCount - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanelsCount - 1];\n\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  // Clear both original & cloned\n  public clear(): void {\n    this.panels.forEach(panel => {\n      panel.remove();\n      panel.removeClonedPanelsAfter(0);\n    });\n\n    this.panels = [];\n    this.clones = [];\n    this.length = 0;\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n  }\n\n  public clearClone(): void {\n    this.panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(0);\n    });\n    this.clones = [];\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels) {\n      if (panel && panel.getIndex() >= index) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n}\n\nexport default PanelManager;\n","import Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public targetOffset: number = 0;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.targetOffset = prevState.targetOffset;\n    this.lastPosition = prevState.lastPosition;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","import State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.targetOffset = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: viewport.castToFlickingPanel(clickedPanel),\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","import State from \"./State\";\nimport Panel from \"../components/Panel\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext, MoveTypeObjectOption, MoveTypeSnapOption } from \"../types\";\nimport { clamp } from \"../utils\";\nimport Viewport from \"../components/Viewport\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onEnter(prevState: State): void {\n    super.onEnter(prevState);\n    this.delta = 0;\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const defaultDuration = options.duration;\n    const halfGap = options.gap / 2;\n    const moveType = options.moveType as MoveTypeObjectOption;\n    const isFreeScroll = moveType.type === \"freeScroll\";\n    const snapCount = isFreeScroll ? Infinity : (moveType as MoveTypeSnapOption).count;\n    const inputEvent = e.inputEvent;\n    const eventDelta = Math.abs(e.delta.flick);\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : Math.abs(delta) > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = Math.max(Math.abs(delta), Math.abs(inputDelta));\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (!overThreshold && this.targetPanel) {\n      // Interrupted while animating\n      viewport.moveTo(this.targetPanel, \"\", e, this.targetOffset);\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - currentPanel.getRelativeAnchorPosition() + halfGap\n      : currentPanel.getRelativeAnchorPosition() + halfGap;\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    let duration = defaultDuration;\n    let panelToMove: Panel;\n    let offset: number = 0;\n\n    if (overThreshold) {\n      if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n        const basePanel = isFreeScroll\n          ? nearestPanel\n          : viewport.findNearestIdenticalPanel(currentPanel);\n\n        // FreeScroll & snap\n        const { panelAtDestPos, snapOffset, indexDiff } = this.findPanelWhenSnapIsOn({\n          isNextDirection,\n          e,\n          viewport,\n          basePanel,\n        });\n\n        panelToMove = panelAtDestPos;\n        offset = snapOffset;\n        duration = clamp(e.duration, defaultDuration, defaultDuration * indexDiff);\n      } else if (\n        !isFreeScroll\n        && !viewport.isOutOfBound()\n        && (\n          swipeDistance <= minimumDistanceToChange\n          || (!options.circular && nearestPanel.getIndex() === currentPanel.getIndex())\n        )\n      ) {\n        panelToMove = this.findAdjacentPanel(isNextDirection, viewport);\n      } else {\n        panelToMove = nearestPanel;\n      }\n    } else {\n      panelToMove = options.circular\n        ? this.findRestorePanelInCircularMode(isNextDirection, viewport)\n        : currentPanel;\n    }\n\n    const panelPosition = panelToMove.getPosition() + offset;\n    const movingToSamePanel = panelPosition === currentPanel.getPosition();\n    const eventType = (!overThreshold || movingToSamePanel)\n      ? isFreeScroll\n        ? \"\"\n        : EVENTS.RESTORE\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      panelToMove,\n      eventType,\n      e,\n      offset,\n      duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n\n  private findRestorePanelInCircularMode(isNextDirection: boolean, viewport: Viewport): Panel {\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    const panelToMove = (!isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n\n    return panelToMove;\n  }\n\n  private findPanelWhenSnapIsOn(params: {\n    isNextDirection: boolean,\n    e: any,\n    viewport: Viewport,\n    basePanel: Panel,\n  }): {\n    panelAtDestPos: Panel,\n    snapOffset: number,\n    indexDiff: number,\n  } {\n    const { isNextDirection, e, viewport, basePanel } = params;\n\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const indexRange = viewport.panelManager.getRange();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = e.destPos.flick + viewport.getRelativeHangerPosition();\n    const moveType = options.moveType as MoveTypeObjectOption;\n    const snapCount = moveType.type === \"freeScroll\" ? Infinity : moveType.count;\n    let panelToMove = basePanel;\n    let passedPanelCount = 0;\n    let cycleIndex = panelToMove.getIndex() === indexRange.min\n      ? basePanel.getCloneIndex() + 1\n      : 0;\n\n    while (passedPanelCount < snapCount) {\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n\n      // Since panlToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && (panelPosition + panelSize + halfGap) > estimatedHangerPos)\n        || (!isNextDirection && (panelPosition - halfGap) < estimatedHangerPos)\n      ) {\n        break;\n      }\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n    const offset = cycleIndex * scrollAreaSize - (panelToMove.getPosition() - originalPosition);\n\n    return {\n      panelAtDestPos: panelToMove,\n      snapOffset: offset,\n      indexDiff: passedPanelCount,\n    };\n  }\n\n  private findAdjacentPanel(isNextDirection: boolean, viewport: Viewport): Panel {\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n\n    return panelToMove;\n  }\n}\n\nexport default DraggingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onEnter(e: any): void {\n    super.onEnter(e);\n    this.delta = 0;\n  }\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Update current panel as current nearest panel\n    this.lastPosition = viewport.getCameraPosition();\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    transitTo(STATE_TYPE.IDLE);\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n  }\n}\n\nexport default AnimatingState;\n","import State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","import State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","import Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, getProgress } from \"../utils\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: {[key: string]: any};\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n\n  private state: {\n    size: number;\n    position: number;\n    relativeHangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n  };\n\n  constructor(\n    flicking: Flicking,\n    viewportElement: HTMLElement,\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      relativeHangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.panelManager = new PanelManager(cameraElement, options);\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    offset: number = 0,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const freeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n\n    const currentPosition = state.position;\n    const castedPanel = this.castToFlickingPanel(panel, offset);\n\n    let estimatedPosition = castedPanel.getAnchorPosition() - state.relativeHangerPosition;\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, state.scrollArea.prev, state.scrollArea.next)\n      : estimatedPosition;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = estimatedPosition > currentPosition\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel: castedPanel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.targetPanel = panel;\n      currentState.targetOffset = offset;\n      currentState.direction = estimatedPosition > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n      if (estimatedPosition === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: freeScroll ? axesEvent.destPos.flick : estimatedPosition }, duration);\n      } else {\n        this.axes.setTo({ flick: estimatedPosition }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n\n    // Update position & nearestPanel\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    const moveVector = options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public resize(): void {\n    const panelManager = this.panelManager;\n\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n    this.updateCameraPosition();\n  }\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this.options))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (isBetween(index, min, max)) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      } else if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this.options))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    panelManager.replace(index, panels);\n\n    const currentPanel = this.currentPanel;\n    if (!currentPanel) {\n      this.currentPanel = panels[0];\n    } else if (isBetween(currentPanel.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (index <= max && index + panels.length > min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      }\n    });\n\n    this.resize();\n\n    return panels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n    this.resize();\n\n    return removedPanels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    let sizeToApply: number;\n    if (options.adaptive) {\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(): void {\n    const viewportElement = this.viewportElement;\n    const wrapper = viewportElement.parentElement;\n\n    wrapper!.removeChild(viewportElement);\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    this.panelManager.originalPanels().forEach(panel => {\n      wrapper!.appendChild(panel.getElement());\n      panel.destroy();\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    panelManager.clear();\n    cameraElement.innerHTML = status.panels.map(panel => panel.html).join(\"\");\n\n    this.createPanels();\n    this.currentPanel = panelManager.get(status.index);\n\n    // Reset panel index\n    panelManager.originalPanels().forEach((panel, idx) => {\n      panel.setIndex(panels[idx].index);\n    });\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const {prev: prevRange, next: nextRange} = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : basePosition = nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public connectAxesHandler(handlers: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public castToFlickingPanel = (panel: Panel, offset = 0): FlickingPanel => {\n    const viewport = this;\n    const options = viewport.options;\n\n    return {\n      getElement() {\n        return panel.getElement();\n      },\n      getIndex() {\n        return panel.getIndex();\n      },\n      getPosition() {\n        return panel.getPosition() + offset;\n      },\n      getAnchorPosition() {\n        return this.getPosition() + panel.getRelativeAnchorPosition();\n      },\n      getSize() {\n        return panel.getSize();\n      },\n      getProgress() {\n        let progress: number = NaN;\n\n        // single\n        const panelCount = viewport.panelManager.getPanelCount();\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n\n        progress = relativeIndex - viewport.getCurrentProgress();\n        return progress;\n      },\n      getOutsetProgress(this: FlickingPanel) {\n        let outsetProgress: number = NaN;\n\n        const outsetRange = [\n          -this.getSize(),\n          viewport.getRelativeHangerPosition() - panel.getRelativeAnchorPosition(),\n          viewport.getSize(),\n        ];\n        const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n\n        outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n        return outsetProgress;\n      },\n      getVisibleRatio(this: FlickingPanel) {\n        let visibleRatio = 0;\n\n        const panelSize = panel.getSize();\n        const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n        const rightRelativePanelPosition = relativePanelPosition + panelSize;\n        const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n\n        visibleRatio = visibleSize >= 0\n          ? visibleSize / panelSize\n          : 0;\n\n        return visibleRatio;\n      },\n      focus(this: FlickingPanel, duration?: number): void {\n        const currentPanel = viewport.getCurrentPanel();\n        const hangerPosition = viewport.getHangerPosition();\n        const anchorPosition = panel.getAnchorPosition();\n        if (hangerPosition === anchorPosition || !currentPanel) {\n          return;\n        }\n\n        const currentPosition = currentPanel.getPosition();\n        const eventType = currentPosition === this.getPosition()\n          ? \"\"\n          : EVENTS.CHANGE;\n        viewport.moveTo(panel, eventType, null, offset, duration);\n      },\n      update(this: FlickingPanel, updateFunction: (element: HTMLElement) => any): void {\n        panel.getIdenticalPanels()\n          .forEach(eachPanel => updateFunction(eachPanel.getElement()));\n      },\n      prev(this: FlickingPanel): FlickingPanel | null {\n        const prevSibling = panel.prevSibling;\n\n        if (!prevSibling) {\n          return null;\n        }\n\n        const currentIndex = this.getIndex();\n        const prevIndex = prevSibling.getIndex();\n\n        const hasEmptyPanelBetween = currentIndex - prevIndex > 1;\n        const notYetMinPanel = options.infinite\n          && currentIndex > 0\n          && prevIndex > currentIndex;\n\n        if (hasEmptyPanelBetween || notYetMinPanel) {\n          // Empty panel exists between\n          return null;\n        }\n\n        const prevPanelSize = prevSibling.getSize();\n        const newPosition = this.getPosition() - prevPanelSize - options.gap;\n        const newOffset = newPosition - prevSibling.getPosition();\n\n        return viewport.castToFlickingPanel(prevSibling, newOffset);\n      },\n      next(this: FlickingPanel): FlickingPanel | null {\n        const nextSibling = panel.nextSibling;\n        const lastIndex = viewport.panelManager.getLastIndex();\n\n        if (!nextSibling) {\n          return null;\n        }\n\n        const currentIndex = this.getIndex();\n        const nextIndex = nextSibling.getIndex();\n\n        const hasEmptyPanelBetween = nextIndex - currentIndex > 1;\n        const notYetMaxPanel = options.infinite\n          && currentIndex < lastIndex\n          && nextIndex < currentIndex;\n\n        if (hasEmptyPanelBetween || notYetMaxPanel) {\n          return null;\n        }\n\n        const newPosition = this.getPosition() + panel.getSize() + options.gap;\n        const newOffset = newPosition - nextSibling.getPosition();\n\n        return viewport.castToFlickingPanel(nextSibling, newOffset);\n      },\n      insertBefore(this: FlickingPanel, element: ElementLike | ElementLike[]): FlickingPanel[] {\n        const parsedElements = parseElement(element);\n        const firstPanel = viewport.panelManager.firstPanel()!;\n        const prevSibling = panel.prevSibling;\n        // Finding correct inserting index\n        // While it should insert removing empty spaces,\n        // It also should have to be bigger than prevSibling' s index\n        const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n          ? Math.max(prevSibling.getIndex() + 1, panel.getIndex() - parsedElements.length)\n          : Math.max(panel.getIndex() - parsedElements.length, 0);\n\n        return viewport.insert(targetIndex, parsedElements);\n      },\n      insertAfter(this: FlickingPanel, element: ElementLike | ElementLike[]): FlickingPanel[] {\n        return viewport.insert(panel.getIndex() + 1, element);\n      },\n      remove(this: FlickingPanel): FlickingPanel {\n        return viewport.remove(panel.getIndex())[0];\n      },\n    };\n  }\n\n  private build(): void {\n    this.applyCSSValue();\n    this.setAxesInstance();\n    this.createPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const classPrefix = options.classPrefix;\n\n    // Set default css values for each element\n    viewportElement.className = `${classPrefix}-viewport`;\n    cameraElement.className = `${classPrefix}-camera`;\n\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    if (options.zIndex) {\n      viewportElement.style.zIndex = `${options.zIndex}`;\n    }\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this.options),\n    );\n\n    if (panels.length > 0) {\n      this.panelManager.append(panels);\n    }\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const panelManager = this.panelManager;\n\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + this.options.gap;\n    const visibleAreaSize = viewportSize + firstPanel.getRelativeAnchorPosition();\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n\n    const cloneCount = Math.ceil(visibleAreaSize / sumOriginalPanelSize);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n\n          this.cameraElement.appendChild(clonedPanel.getElement());\n          return clonedPanel;\n        });\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const panels = this.panelManager.originalPanels();\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n      viewportElement.style.minWidth = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n    state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n\n    // Resize all panels\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if ((currentState.holding || currentState.playing) && nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const currentPosition = panel.getPosition();\n      const panelSize = panel.getSize();\n\n      if (currentPosition !== newPosition) {\n        panel.setPosition(newPosition);\n      }\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .filter(panel => !!panel);\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      if (!panel) {\n        continue;\n      }\n\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const axes = this.axes;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n\n    if (!currentPanel || currentState.holding || currentState.playing) {\n      return;\n    }\n\n    let newPosition = currentPanel.getAnchorPosition() - state.relativeHangerPosition;\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.axes.off();\n    axes.setTo({\n      flick: newPosition,\n    }, 0);\n    this.axes.on(this.axesHandlers);\n    this.moveCamera(newPosition);\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        index: 0,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      let lastPanel = panelManager.lastPanel()!;\n      let atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          index: checkingPanel.getIndex(),\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel()!;\n        const firstIndex = firstPanel.getIndex();\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            index: checkingPanel.getIndex(),\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      lastPanel = panelManager.lastPanel()!;\n      atLastPanel = currentIndex === lastPanel.getIndex();\n\n      if (atLastPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      let firstPanel = panelManager.firstPanel()!;\n      let atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          index: checkingPanel.getIndex(),\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel()!;\n        const lastIndex = lastPanel.getIndex();\n\n        if (lastIndex < maxLastIndex) {\n          this.triggerNeedPanel({\n            axesEvent,\n            index: checkingPanel.getIndex(),\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      firstPanel = panelManager.firstPanel()!;\n      atFirstPanel = checkingIndex === firstPanel.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    index: number;\n    siblingPanel?: Panel,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, index, siblingPanel, direction, indexRange } = params;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const panel = siblingPanel\n      ? this.castToFlickingPanel(siblingPanel)\n      : null;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel,\n        direction,\n        range: indexRange,\n      } as NeedPanelEvent,\n    );\n  }\n}\n","import Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\n\nimport { merge, getProgress, toArray, parseElement, isString } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike } from \"./types\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private plugins: Plugin[] = [];\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class name will be added for the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching last panel's index reaches lastIndex<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when event's panel index is greater than it.<br>Also, if last panel's index reached given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether resize() method should be called automatically after window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent view from going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Reference position of hanger in viewport, which hangs panel anchors should be stopped at.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Reference position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels. Should be given in number.(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input.(ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n    this.build();\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const options = this.options;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const currentIndex = viewport.getCurrentIndex();\n    const indexRange = panelManager.getRange();\n    const panelCount = panelManager.getPanelCount();\n    const lastIndex = panelManager.getLastIndex();\n    const minimumRange = options.infinite\n      ? 0\n      : indexRange.min;\n    let prevIndex = currentIndex - 1;\n\n    if (prevIndex < minimumRange) {\n      prevIndex = this.options.circular && panelCount > 0\n        ? options.infinite\n          ? lastIndex\n          : indexRange.max\n        : -1;\n    }\n\n    return this.moveTo(prevIndex, duration);\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const options = this.options;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const currentIndex = viewport.getCurrentIndex();\n    const indexRange = panelManager.getRange();\n    const panelCount = panelManager.getPanelCount();\n    const lastIndex = panelManager.getLastIndex();\n    const maximumRange = options.infinite\n      ? lastIndex\n      : indexRange.max;\n    let nextIndex = currentIndex + 1;\n\n    if (nextIndex > maximumRange) {\n      nextIndex = options.circular && panelCount > 0\n        ? options.infinite\n          ? 0\n          : indexRange.min\n        : -1;\n    }\n\n    return this.moveTo(nextIndex, duration);\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let offset = 0;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity);\n\n      offset = nearestPosition - anchorPosition;\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === anchorPosition + offset && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      panel,\n      eventType,\n      null,\n      offset,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? viewport.castToFlickingPanel(panel)\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? viewport.castToFlickingPanel(panel)\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel)\n      .map(panel => viewport.castToFlickingPanel(panel));\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(panel => {\n      const outsetProgress = panel.getOutsetProgress();\n\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Set last panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Last panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this);\n    });\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(): void {\n    this.off();\n\n    this.viewport.destroy();\n\n    this.plugins.forEach(plugin => {\n      plugin.destroy(this);\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize(): this {\n    const viewport = this.viewport;\n\n    viewport.panelManager.allPanels()\n      .forEach(panel => panel.reset());\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  private build(): void {\n    this.initViewport();\n    this.listenInput();\n    this.listenResize();\n  }\n\n  private initViewport(): void {\n    const wrapper = this.wrapper;\n    const options = this.options;\n    const cameraElement = document.createElement(\"div\");\n\n    // Make all panels to be a child of camera element\n    // wrapper <- viewport <- camera <- panels[1...n]\n    toArray(wrapper.children).forEach(child => {\n      cameraElement.appendChild(child);\n    });\n\n    // Clipping area for camera element\n    const viewportElement = document.createElement(\"div\");\n    viewportElement.appendChild(cameraElement);\n\n    // Add viewport element to wrapper\n    wrapper.appendChild(viewportElement);\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, viewportElement, cameraElement, options, this.triggerEvent);\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", () => {\n        this.resize();\n      });\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = -Math.sign(cameraChange) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","el","isString","tempDiv","document","createElement","innerHTML","push","toArray","children","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","name","has3d","length","className","classList","add","indexOf","replace","cssObj","property","val","min","max","Math","iterable","slice","call","arr","constructor","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","DEFAULT_VIEWPORT_CSS","position","width","height","DEFAULT_CAMERA_CSS","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","TRANSFORM","index","options","prevSibling","nextSibling","state","relativeAnchorPosition","size","clonedPanels","isClone","cloneIndex","originalStyle","getAttribute","cachedBbox","addClass","applyCSS","bbox","getBbox","parseArithmeticExpression","panel","resize","setAttribute","removeAttribute","getBoundingClientRect","original","getClonedPanels","getIdenticalPanels","elementStyle","left","top","cloneElement","cloneNode","clonedPanel","Panel","clonedState","parentNode","removeClonedPanelsAfter","start","removingPanels","splice","remove","cameraElement","panels","clones","reduce","allClones","firstPanel","lastPanel","getIndex","firstRemovedPanel","filter","possibleLastPanel","newPanels","_a","isCircular","findFirstPanelFrom","siblingElement","getElement","fragment","createDocumentFragment","appendChild","pushedIndex","offset","panelsAfterIndex","emptyPanelCount","findIndex","removedPanels","Boolean","setIndex","addNewClones","updateIndex","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","cloneSet","reversedPanels","concat","reverse","nonEmptyIndexFromLast","allPanels","allPanelsCount","prevPanel","nextPanel","newClones_1","insertTarget_1","allPanels_1","panelElement","contains","originalPanels","cloneCount","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","newClones","map","clone","this_1","insertClones","counter","insertingIndex","newLastIndex","prevState","delta","direction","targetPanel","targetOffset","lastPosition","nextState","e","context","tslib_1","_this","flicking","viewport","triggerEvent","transitTo","getPanelCount","getCameraPosition","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","clickedElement","srcEvent","clickedPanel","panelManager","findPanelOf","cameraPosition","clickedPanelPosition","getPosition","castToFlickingPanel","_super","onEnter","moveCamera","stopCamera","defaultDuration","halfGap","isFreeScroll","snapCount","eventDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTo","currentPanel","getCurrentPanel","nearestPanel","getNearestPanel","stop","minimumDistanceToChange","getSize","getRelativeAnchorPosition","panelToMove","basePanel","findNearestIdenticalPanel","panelAtDestPos","snapOffset","indexDiff","isOutOfBound","findAdjacentPanel","findRestorePanelInCircularMode","panelPosition","movingToSamePanel","eventType","originalPanel","getOriginalPanel","hangerPosition","getHangerPosition","firstClonedPanel","lapped","getAnchorPosition","params","scrollAreaSize","getScrollAreaSize","indexRange","getRange","estimatedHangerPos","destPos","getRelativeHangerPosition","passedPanelCount","cycleIndex","getCloneIndex","siblingPanel","panelIndex","siblingIndex","panelSize","originalPosition","currentIndex","getCurrentIndex","get","adjacentPanel","setCurrentPanel","isTrusted","updateAdaptiveSize","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onHold","onRelease","onAnimationEnd","onFinish","viewportElement","axesEvent","stateMachine","getProgress","progress","NaN","panelCount","relativeIndex","floor","getCurrentProgress","getOutsetProgress","outsetProgress","outsetRange","relativePanelPosition","getVisibleRatio","visibleRatio","rightRelativePanelPosition","visibleSize","focus","anchorPosition","currentPosition","update","updateFunction","eachPanel","prev","prevIndex","hasEmptyPanelBetween","notYetMinPanel","prevPanelSize","newPosition","newOffset","next","getLastIndex","nextIndex","notYetMaxPanel","parsedElements","parseElement","targetIndex","insert","insertAfter","relativeHangerPosition","scrollArea","translate","checkedIndexes","StateMachine","PanelManager","build","getState","castedPanel","estimatedPosition","canSetBoundMode","eventResult","axes","findNearestPanel","originalNearestPosition","checkNeedPanel","modifiedNearestPosition","moveVector","moveCoord","coord","round","join","updateSize","updateOriginalPanelPositions","updateScrollArea","clonePanels","updateClonedPanelPositions","chainAllPanels","updateCameraPosition","findNearestPanelAt","minimumDistance","prevPosition","nextPosition","distance","isBetween","minimumAnchorDistance","anchorDistance","nearest","shortestDistance","identicals","identical","panInput","enable","disable","indexes","newCurrentIndex","sizeToApply","panelBbox","maximumPanelSize","maximum","viewportStyle","minHeight","minWidth","wrapper","destroy","status","clear","html","createPanels","playing","holding","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","basePosition","targetPosition","progressBetween","startIndex","setLastIndex","handlers","axesHandlers","on","applyCSSValue","setAxesInstance","setDefaultPanel","moveToDefaultPanel","Axes","easing","interruptable","PanInput","scale","connect","panelElements","append","viewportSize","sumOriginalPanelSize","visibleAreaSize","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","summedPanelSize","nextPanelPos","maintainingPanel","looped","panelsBeforeMaintainPanel","accumulatedSize","total","setPosition","clonedPanels_1","cloneBasePos","clonedPanelPos","lastReplacePosition","_b","replacePosition","parsedBounce","parsedVal","axis","off","maxLastIndex","triggerNeedPanel","checkingPanel","atLastPanel","currentNearestPosition","panelRight","cameraNext","emptyPanelExistsBetween","firstIndex","cameraPrev","checkingIndex","atFirstPanel","panelLeft","alreadyTriggered","some","hasHandler","hasOn","eventName","canceled","trigger","merge","previousPosition","inputOffset","cameraChange","currentDirection","querySelector","nodeName","nodeType","currentOptions","minimumRange","maximumRange","possiblePositions","nearestPosition","current","includeClone","getAllPanels","outerHTML","restore","plugins","newPlugins","plugin","init","currentPlugins","removedPlugins","reset","initViewport","listenInput","listenResize","child","Viewport","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component"],"mappings":"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"}