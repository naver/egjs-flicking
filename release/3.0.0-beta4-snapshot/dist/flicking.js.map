{"version":3,"file":"flicking.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/components/Viewport.ts","../src/Flicking.ts"],"sourcesContent":["import { ElementLike } from \"./types\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n","import { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\n\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  // willChange: \"transform\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  NONE: \"\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","import { OriginalStyle, FlickingOptions } from \"../types\";\nimport { DEFAULT_PANEL_CSS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression } from \"../utils\";\n\nclass Panel {\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  private element: HTMLElement;\n  private state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    clonedPanels: Panel[];\n    cachedBbox: ClientRect | null;\n  };\n  private options: FlickingOptions;\n  private original?: Panel;\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    options: FlickingOptions,\n  ) {\n    this.element = element;\n    this.prevSibling = null;\n    this.nextSibling = null;\n\n    this.state = {\n      index,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      clonedPanels: [],\n      isClone: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\") || null,\n        style: element.getAttribute(\"style\") || null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n  }\n\n  public resize(): void {\n    const state = this.state;\n    const bbox = this.getBbox();\n\n    state.size = this.options.horizontal\n      ? bbox.width\n      : bbox.height;\n    state.relativeAnchorPosition = parseArithmeticExpression(this.options.anchor, state.size);\n\n    if (!state.isClone) {\n      state.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public reset(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public destroy(): void {\n    const el = this.element;\n    const originalStyle = this.state.originalStyle;\n\n    originalStyle.className\n      ? el.setAttribute(\"class\", originalStyle.className)\n      : el.removeAttribute(\"class\");\n    originalStyle.style\n      ? el.setAttribute(\"style\", originalStyle.style)\n      : el.removeAttribute(\"style\");\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : state.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...state.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number) {\n    const state = this.state;\n\n    state.index = index;\n    state.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number) {\n    const state = this.state;\n    const options = this.options;\n    const elementStyle = this.element.style;\n\n    state.position = pos;\n    options.horizontal\n      ? elementStyle.left = `${pos}px`\n      : elementStyle.top = `${pos}px`;\n  }\n\n  public clone(cloneIndex: number): Panel {\n    const state = this.state;\n\n    const cloneElement = this.element.cloneNode(true) as HTMLElement;\n    const clonedPanel = new Panel(cloneElement, state.index, this.options);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = this;\n    clonedState.isClone = true;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n    state.clonedPanels.push(clonedPanel);\n\n    return clonedPanel;\n  }\n\n  public remove(): void {\n    const element = this.element;\n    element.parentNode!.removeChild(element);\n\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const state = this.state;\n    const removingPanels = state.clonedPanels.splice(start);\n\n    removingPanels.forEach(panel => {\n      panel.remove();\n    });\n  }\n}\n\nexport default Panel;\n","import Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private options: FlickingOptions;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clonedPanels(),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel> {\n    return this.clones.reduce((allClones, clones) => [...allClones, ...clones], []);\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.clones.length;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      removingPanels.forEach(panel => panel.remove());\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n    }\n  }\n\n  public append(newPanels: Panel[]): void {\n    const range = this.range;\n    this.panels.push(...newPanels);\n\n    if (newPanels.length > 0) {\n      range.min = Math.max(0, range.min);\n      range.max += newPanels.length;\n      this.length += newPanels.length;\n    }\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        removedPanels.forEach(panel => panel.remove());\n        this.length -= removedPanels.length;\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): void {\n    const panels = this.panels;\n    const range = this.range;\n    const cameraElement = this.cameraElement;\n    const isCircular = this.options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    const fragment = document.createDocumentFragment();\n    newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n    cameraElement.insertBefore(fragment, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n    replacedPanels.forEach(panel => {\n      if (panel) {\n        panel.remove();\n      }\n    });\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    deletedPanels.forEach(panel => {\n      panel.remove();\n    });\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 0) {\n      return;\n    }\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanelsCount - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanelsCount - 1];\n\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  // Clear both original & cloned\n  public clear(): void {\n    this.panels.forEach(panel => {\n      panel.remove();\n      panel.removeClonedPanelsAfter(0);\n    });\n\n    this.panels = [];\n    this.clones = [];\n    this.length = 0;\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n  }\n\n  public clearClone(): void {\n    this.panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(0);\n    });\n    this.clones = [];\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels) {\n      if (panel && panel.getIndex() >= index) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n}\n\nexport default PanelManager;\n","import Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public targetOffset: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.targetOffset = prevState.targetOffset;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","import State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.targetOffset = 0;\n  }\n\n  public onHold(e: any, { flicking, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't be handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: viewport.castToFlickingPanel(clickedPanel),\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","import State from \"./State\";\nimport Panel from \"../components/Panel\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext, MoveTypeObjectOption, MoveTypeSnapOption } from \"../types\";\nimport { clamp } from \"../utils\";\nimport Viewport from \"../components/Viewport\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onEnter(prevState: State): void {\n    super.onEnter(prevState);\n    this.delta = 0;\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const defaultDuration = options.duration;\n    const halfGap = options.gap / 2;\n    const moveType = options.moveType as MoveTypeObjectOption;\n    const isFreeScroll = moveType.type === \"freeScroll\";\n    const snapCount = isFreeScroll ? Infinity : (moveType as MoveTypeSnapOption).count;\n    const inputEvent = e.inputEvent;\n    const eventDelta = Math.abs(e.delta.flick);\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = Math.abs(horizontal ? inputEvent.deltaX : inputEvent.deltaY);\n    const isNextDirection = Math.abs(velocity) > 0\n      ? velocity < 0\n      : delta > 0;\n    const swipeDistance = Math.max(Math.abs(delta), inputDelta);\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (!overThreshold && this.targetPanel) {\n      // Interrupted while animating\n      viewport.moveTo(this.targetPanel, EVENTS.NONE, e, this.targetOffset);\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - currentPanel.getRelativeAnchorPosition() + halfGap\n      : currentPanel.getRelativeAnchorPosition() + halfGap;\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    let duration = defaultDuration;\n    let panelToMove: Panel;\n    let offset: number = 0;\n\n    if (overThreshold) {\n      if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n        const basePanel = isFreeScroll\n          ? nearestPanel\n          : viewport.findNearestIdenticalPanel(currentPanel);\n\n        // FreeScroll & snap\n        const { panelAtDestPos, snapOffset, indexDiff } = this.findPanelWhenSnapIsOn({\n          isNextDirection,\n          e,\n          viewport,\n          basePanel,\n        });\n\n        panelToMove = panelAtDestPos;\n        offset = snapOffset;\n        duration = clamp(e.duration, defaultDuration, defaultDuration * indexDiff);\n      } else if (\n        !isFreeScroll\n        && !viewport.isOutOfBound()\n        && (\n          swipeDistance <= minimumDistanceToChange\n          // It's the same if there's not enough distance.\n          || nearestPanel.getIndex() === currentPanel.getIndex()\n        )\n      ) {\n        panelToMove = this.findAdjacentPanel(isNextDirection, viewport);\n      } else {\n        panelToMove = nearestPanel;\n      }\n    } else {\n      panelToMove = options.circular\n        ? this.findRestorePanelInCircularMode(isNextDirection, viewport)\n        : currentPanel;\n    }\n\n    const panelPosition = panelToMove.getPosition() + offset;\n    const movingToSamePanel = panelPosition === currentPanel.getPosition();\n    const eventType = (!overThreshold || movingToSamePanel)\n      ? isFreeScroll\n        ? EVENTS.NONE\n        : EVENTS.RESTORE\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      panelToMove,\n      eventType,\n      e,\n      offset,\n      duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n\n  private findRestorePanelInCircularMode(isNextDirection: boolean, viewport: Viewport): Panel {\n    const currentPanel = viewport.getCurrentPanel()!;\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    const panelToMove = (!isNextDirection && lapped)\n      ? firstClonedPanel\n      : currentPanel;\n\n    return panelToMove;\n  }\n\n  private findPanelWhenSnapIsOn(params: {\n    isNextDirection: boolean,\n    e: any,\n    viewport: Viewport,\n    basePanel: Panel,\n  }): {\n    panelAtDestPos: Panel,\n    snapOffset: number,\n    indexDiff: number,\n  } {\n    const { isNextDirection, e, viewport, basePanel } = params;\n\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const indexRange = viewport.panelManager.getRange();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = e.destPos.flick + viewport.getRelativeHangerPosition();\n    const moveType = options.moveType as MoveTypeObjectOption;\n    const snapCount = moveType.type === \"freeScroll\" ? Infinity : moveType.count;\n    let panelToMove = basePanel;\n    let passedPanelCount = 0;\n    let cycleIndex = panelToMove.getIndex() === indexRange.min\n      ? basePanel.getCloneIndex() + 1\n      : 0;\n\n    while (passedPanelCount < snapCount) {\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n\n      // Since panlToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && (panelPosition + panelSize + halfGap) > estimatedHangerPos)\n        || (!isNextDirection && (panelPosition - halfGap) < estimatedHangerPos)\n      ) {\n        break;\n      }\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n    const offset = cycleIndex * scrollAreaSize - (panelToMove.getPosition() - originalPosition);\n\n    return {\n      panelAtDestPos: panelToMove,\n      snapOffset: offset,\n      indexDiff: passedPanelCount,\n    };\n  }\n\n  private findAdjacentPanel(isNextDirection: boolean, viewport: Viewport): Panel {\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n\n    return panelToMove;\n  }\n}\n\nexport default DraggingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { triggerEvent, transitTo }: FlickingContext): void {\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted);\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n}\n\nexport default AnimatingState;\n","import State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","import State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","import Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, ChangeEvent, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, getProgress } from \"../utils\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: {[key: string]: any};\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n\n  private state: {\n    size: number;\n    position: number;\n    relativeHangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n  };\n\n  constructor(\n    flicking: Flicking,\n    viewportElement: HTMLElement,\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      relativeHangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.panelManager = new PanelManager(cameraElement, options);\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | EventType[\"NONE\"],\n    axesEvent: any,\n    offset: number = 0,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const freeScroll = (this.options.moveType as MoveTypeObjectOption).type === \"freeScroll\";\n\n    const currentPanel = this.currentPanel;\n    const currentPosition = state.position;\n    const castedPanel = this.castToFlickingPanel(panel, offset);\n\n    let estimatedPosition = castedPanel.getAnchorPosition() - state.relativeHangerPosition;\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, state.scrollArea.prev, state.scrollArea.next)\n      : estimatedPosition;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = estimatedPosition > currentPosition\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel: castedPanel,\n        direction,\n        prevIndex: currentPanel ? currentPanel.getIndex() : -1,\n        prevPanel: currentPanel ? this.castToFlickingPanel(currentPanel) : null,\n      } as ChangeEvent);\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      this.currentPanel = panel;\n      currentState.targetPanel = panel;\n      currentState.targetOffset = offset;\n      currentState.direction = estimatedPosition > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n      // freeScroll only occurs in release events\n      if (axesEvent && axesEvent.setTo) {\n        axesEvent.setTo({ flick: freeScroll ? axesEvent.destPos.flick : estimatedPosition }, duration);\n      } else {\n        if (estimatedPosition === currentPosition) {\n          // no move\n          this.nearestPanel = this.findNearestPanel();\n        } else {\n          this.axes.setTo({ flick: estimatedPosition }, duration);\n        }\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n\n    // Update position & nearestPanel\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    const moveVector = options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public resize(): void {\n    const panelManager = this.panelManager;\n\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n\n    panelManager.chainAllPanels();\n    this.updateCameraPosition();\n  }\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const { prev: prevRange, next: nextRange } = state.scrollArea;\n    const hangerPosition = this.getHangerPosition();\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n      const currentPanel = this.getCurrentPanel();\n\n      if (position < prevRange) {\n        return panelManager.firstPanel();\n      } else if (position > nextRange) {\n        return panelManager.lastPanel();\n      } else if (currentPanel) {\n        const currentAnchorPosition = currentPanel.getAnchorPosition();\n        if (\n          (position === prevRange && currentAnchorPosition <= prevRange + relativeHangerPosition) ||\n          (position === nextRange && currentAnchorPosition >= nextRange + relativeHangerPosition)\n         ) {\n          return currentPanel;\n        }\n      }\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance >= minimumDistance) {\n        break;\n      }\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this.options))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (isBetween(index, min, max)) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      } else if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this.options))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    panelManager.replace(index, panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n    }\n\n    // Update checked indexes in infinite mode\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (index <= max && index + panels.length > min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx, 1);\n      }\n    });\n\n    this.resize();\n\n    return panels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n    this.resize();\n\n    return removedPanels.map(panel => this.castToFlickingPanel(panel));\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    let sizeToApply: number;\n    if (options.adaptive) {\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(): void {\n    const viewportElement = this.viewportElement;\n    const wrapper = viewportElement.parentElement;\n\n    wrapper!.removeChild(viewportElement);\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    this.panelManager.originalPanels().forEach(panel => {\n      wrapper!.appendChild(panel.getElement());\n      panel.destroy();\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    panelManager.clear();\n    cameraElement.innerHTML = status.panels.map(panel => panel.html).join(\"\");\n\n    this.createPanels();\n    this.currentPanel = panelManager.get(status.index);\n\n    // Reset panel index\n    panelManager.originalPanels().forEach((panel, idx) => {\n      panel.setIndex(panels[idx].index);\n    });\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    let nearestPanel = this.nearestPanel;\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const {prev: prevRange, next: nextRange} = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : basePosition = nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const scrollArea = state.scrollArea;\n\n    return !this.options.circular\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public connectAxesHandler(handlers: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public castToFlickingPanel = (panel: Panel, offset = 0): FlickingPanel => {\n    const viewport = this;\n    const options = viewport.options;\n\n    return {\n      getElement() {\n        return panel.getElement();\n      },\n      getIndex() {\n        return panel.getIndex();\n      },\n      getPosition() {\n        return panel.getPosition() + offset;\n      },\n      getAnchorPosition() {\n        return this.getPosition() + panel.getRelativeAnchorPosition();\n      },\n      getSize() {\n        return panel.getSize();\n      },\n      getProgress() {\n        let progress: number = NaN;\n\n        const nearestPanel = viewport.getNearestPanel();\n        if (nearestPanel) {\n          // single\n          const panelCount = viewport.panelManager.getPanelCount();\n          const scrollAreaSize = viewport.getScrollAreaSize();\n          const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n\n          progress = relativeIndex - viewport.getCurrentProgress();\n        }\n        return progress;\n      },\n      getOutsetProgress(this: FlickingPanel) {\n        let outsetProgress: number = NaN;\n\n        const nearestPanel = viewport.getNearestPanel();\n        if (nearestPanel) {\n          const outsetRange = [\n            -this.getSize(),\n            viewport.getRelativeHangerPosition() - panel.getRelativeAnchorPosition(),\n            viewport.getSize(),\n          ];\n          const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n\n          outsetProgress = getProgress(relativePanelPosition, outsetRange);\n        }\n\n        return outsetProgress;\n      },\n      getVisibleRatio(this: FlickingPanel) {\n        let visibleRatio = 0;\n\n        const panelSize = panel.getSize();\n        const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n        const rightRelativePanelPosition = relativePanelPosition + panelSize;\n        const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n\n        visibleRatio = visibleSize >= 0\n          ? visibleSize / panelSize\n          : 0;\n\n        return visibleRatio;\n      },\n      focus(this: FlickingPanel, duration?: number): void {\n        const currentPanel = viewport.getCurrentPanel();\n        const hangerPosition = viewport.getHangerPosition();\n        const anchorPosition = panel.getAnchorPosition();\n        if (hangerPosition === anchorPosition || !currentPanel) {\n          return;\n        }\n\n        const currentPosition = currentPanel.getPosition();\n        viewport.moveTo(panel, currentPosition === this.getPosition() ? EVENTS.NONE : EVENTS.CHANGE, null, offset, duration);\n      },\n      update(this: FlickingPanel, updateFunction: (element: HTMLElement) => any): void {\n        panel.getIdenticalPanels()\n          .forEach(eachPanel => updateFunction(eachPanel.getElement()));\n      },\n      prev(this: FlickingPanel): FlickingPanel | null {\n        const prevSibling = panel.prevSibling;\n\n        if (!prevSibling) {\n          return null;\n        }\n\n        const currentIndex = this.getIndex();\n        const prevIndex = prevSibling.getIndex();\n\n        const hasEmptyPanelBetween = currentIndex - prevIndex > 1;\n        const notYetMinPanel = options.infinite\n          && currentIndex > 0\n          && prevIndex > currentIndex;\n\n        if (hasEmptyPanelBetween || notYetMinPanel) {\n          // Empty panel exists between\n          return null;\n        }\n\n        const prevPanelSize = prevSibling.getSize();\n        const newPosition = this.getPosition() - prevPanelSize - options.gap;\n        const newOffset = newPosition - prevSibling.getPosition();\n\n        return viewport.castToFlickingPanel(prevSibling, newOffset);\n      },\n      next(this: FlickingPanel): FlickingPanel | null {\n        const nextSibling = panel.nextSibling;\n        const lastIndex = viewport.panelManager.getLastIndex();\n\n        if (!nextSibling) {\n          return null;\n        }\n\n        const currentIndex = this.getIndex();\n        const nextIndex = nextSibling.getIndex();\n\n        const hasEmptyPanelBetween = nextIndex - currentIndex > 1;\n        const notYetMaxPanel = options.infinite\n          && currentIndex < lastIndex\n          && nextIndex < currentIndex;\n\n        if (hasEmptyPanelBetween || notYetMaxPanel) {\n          return null;\n        }\n\n        const newPosition = this.getPosition() + panel.getSize() + options.gap;\n        const newOffset = newPosition - nextSibling.getPosition();\n\n        return viewport.castToFlickingPanel(nextSibling, newOffset);\n      },\n      insertBefore(this: FlickingPanel, element: ElementLike | ElementLike[]): FlickingPanel[] {\n        const parsedElements = parseElement(element);\n        const firstPanel = viewport.panelManager.firstPanel()!;\n        const prevSibling = panel.prevSibling;\n        // Finding correct inserting index\n        // While it should insert removing empty spaces,\n        // It also should have to be bigger than prevSibling' s index\n        const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n          ? Math.max(prevSibling.getIndex() + 1, panel.getIndex() - parsedElements.length)\n          : Math.max(panel.getIndex() - parsedElements.length, 0);\n\n        return viewport.insert(targetIndex, parsedElements);\n      },\n      insertAfter(this: FlickingPanel, element: ElementLike | ElementLike[]): FlickingPanel[] {\n        return viewport.insert(panel.getIndex() + 1, element);\n      },\n      remove(this: FlickingPanel): FlickingPanel {\n        return viewport.remove(panel.getIndex())[0];\n      },\n    };\n  }\n\n  private build(): void {\n    this.applyCSSValue();\n    this.setAxesInstance();\n    this.createPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const classPrefix = options.classPrefix;\n\n    // Set default css values for each element\n    viewportElement.className = `${classPrefix}-viewport`;\n    cameraElement.className = `${classPrefix}-camera`;\n\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    if (options.zIndex) {\n      viewportElement.style.zIndex = `${options.zIndex}`;\n    }\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this.options),\n    );\n\n    if (panels.length > 0) {\n      this.panelManager.append(panels);\n    }\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const panelManager = this.panelManager;\n\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + this.options.gap;\n    const visibleAreaSize = viewportSize + firstPanel.getRelativeAnchorPosition();\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n\n    const cloneCount = Math.ceil(visibleAreaSize / sumOriginalPanelSize);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n\n          this.cameraElement.appendChild(clonedPanel.getElement());\n          return clonedPanel;\n        });\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const lastPanel = this.panelManager.lastPanel();\n    if (!lastPanel) {\n      return false;\n    }\n\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const panels = this.panelManager.originalPanels();\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n      viewportElement.style.minWidth = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n    state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n\n    // Resize all panels\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if ((currentState.holding || currentState.playing) && nearestPanel) {\n      // We should maintain nearestPanel's position\n      const currentIndex = currentPanel.getIndex()\n        + (currentPanel.getCloneIndex() + 1) * panels.length;\n      const nearestIndex = nearestPanel.getIndex()\n        + (nearestPanel.getCloneIndex() + 1) * panels.length;\n      const looped = (currentIndex >= nearestIndex && currentState.delta > 0)\n        || (currentIndex <= nearestIndex && currentState.delta < 0);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const currentPosition = panel.getPosition();\n      const panelSize = panel.getSize();\n\n      if (currentPosition !== newPosition) {\n        panel.setPosition(newPosition);\n      }\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .filter(panel => !!panel);\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      if (!panel) {\n        continue;\n      }\n\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  // Update camera position after resizing\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const axes = this.axes;\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.stateMachine.getState();\n\n    if (!currentPanel || currentState.holding || currentState.playing) {\n      return;\n    }\n\n    let newPosition = currentPanel.getAnchorPosition() - state.relativeHangerPosition;\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.axes.off();\n    axes.setTo({\n      flick: newPosition,\n    }, 0);\n    this.axes.on(this.axesHandlers);\n    this.moveCamera(newPosition);\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        index: 0,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      let lastPanel = panelManager.lastPanel()!;\n      let atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          index: checkingPanel.getIndex(),\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel()!;\n        const firstIndex = firstPanel.getIndex();\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            index: checkingPanel.getIndex(),\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      lastPanel = panelManager.lastPanel()!;\n      atLastPanel = currentIndex === lastPanel.getIndex();\n\n      if (atLastPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      let firstPanel = panelManager.firstPanel()!;\n      let atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          index: checkingPanel.getIndex(),\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel()!;\n        const lastIndex = lastPanel.getIndex();\n\n        if (lastIndex < maxLastIndex) {\n          this.triggerNeedPanel({\n            axesEvent,\n            index: checkingPanel.getIndex(),\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether insertion happened\n      firstPanel = panelManager.firstPanel()!;\n      atFirstPanel = checkingIndex === firstPanel.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanel || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    index: number;\n    siblingPanel?: Panel,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, index, siblingPanel, direction, indexRange } = params;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const panel = siblingPanel\n      ? this.castToFlickingPanel(siblingPanel)\n      : null;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel,\n        direction,\n        range: indexRange,\n      } as NeedPanelEvent,\n    );\n  }\n}\n","import Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\n\nimport { merge, getProgress, toArray, parseElement, isString } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin, ElementLike } from \"./types\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n * @throws {Error} An Error occur when given base element doesn't exist or it hasn't proper DOM structure to be initialized. <ko>주어진 기본 요소가 존재하지 않거나 초기화 할 적절한 DOM 구조가없는 경우 오류가 발생한다.</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event types\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private plugins: Plugin[] = [];\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options The option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix for class names of the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation where acceleration is manually enabled by user. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for infinite scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되여 무한 스크롤이 가능하다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to destination panel(unit: pixel). A panel element must be dragged beyond the threshold to move to the destination panel.<ko>목적 패널로의 이동 임계값 (단위: 픽셀). 패널 요소를 임계값 이상으로 끌어다 놓아야만이 목적 패널로 이동한다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] The easing function to apply to a panel moving animation. The default function is easeOutCubic.<ko>패널 이동 애니메이션에 적용할 `easing`함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing the module. A zero-based integer.<ko>모듈 초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices. ({@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.PanInput.html|eg.Axes.PanInput Reference})<br>- \"touch\": A touch input device.<br>- \"mouse\": A mouse.<ko>입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.PanInput.html|eg.Axes.PanInput 참고})<br>- \"touch\": 터치 입력 장치.<br>- \"mouse\": 마우스.</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold value that determines whether user input is horizontal or vertical. (0 ~ 90)<ko>사용자의 입력이 가로 방향인지 세로 방향인지 판단하는 기준 각도 (0 ~ 90)</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {Boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number} [options.zIndex=2000] z-index value for viewport element<ko>뷰포트 요소의 z-index 값</ko>\n   * @param {boolean} [options.bound=false] Prevents view going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Position of hanger in viewport, which hangs panel anchors.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels.<br>Should be given in number(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자(px)</ko>\n   * @param {number} [options.snap=1] The number of panels you're going to roll over to when you snap<ko>한 번 스냅 할 때 최대 몇 개의 패널까지 넘길 건지 나타내는 숫자</ko>\n   * @param {boolean} [options.freeScroll=false] If true, panels can scroll freely when flicked.<ko>활성화 했을 때 플릭한 경우에 패널들을 자유롭게 스크롤할 수 있다.</ko>\n   */\n  constructor(\n    element: ElementLike,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n    this.build();\n  }\n  /**\n   * Move to the previous panel. If `horizontal=true`is left panel. If `horizontal=false`is upper panel.\n   * @ko 이전 패널로 이동한다. `horizontal=true`이면 좌측 패널. `horizontal=false`이면 상측 패널.\n   * @param [duration=options.duration] Duration of the panel movement (unit: ms) <ko>패널 이동 애니메이션 진행 시간(단위: ms)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public prev(duration?: number): this {\n    const options = this.options;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const currentIndex = viewport.getCurrentIndex();\n    const indexRange = panelManager.getRange();\n    const panelCount = panelManager.getPanelCount();\n    const lastIndex = panelManager.getLastIndex();\n    const minimumRange = options.infinite\n      ? 0\n      : indexRange.min;\n    let prevIndex = currentIndex - 1;\n\n    if (prevIndex < minimumRange) {\n      prevIndex = this.options.circular && panelCount > 0\n        ? options.infinite\n          ? lastIndex\n          : indexRange.max\n        : -1;\n    }\n\n    return this.moveTo(prevIndex, duration);\n  }\n\n  /**\n   * Move to the next panel. If `horizontal=true`is right panel. If `horizontal=false`is lower panel.\n   * @ko 다음 패널로 이동한다. `horizontal=true`이면 우측 패널. `horizontal=false`이면 하측 패널.\n   * @param [duration=options.duration] Duration of the panel movement (unit: ms) <ko>패널 이동 애니메이션 진행 시간(단위: ms)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public next(duration?: number): this {\n    const options = this.options;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const currentIndex = viewport.getCurrentIndex();\n    const indexRange = panelManager.getRange();\n    const panelCount = panelManager.getPanelCount();\n    const lastIndex = panelManager.getLastIndex();\n    const maximumRange = options.infinite\n      ? lastIndex\n      : indexRange.max;\n    let nextIndex = currentIndex + 1;\n\n    if (nextIndex > maximumRange) {\n      nextIndex = options.circular && panelCount > 0\n        ? options.infinite\n          ? 0\n          : indexRange.min\n        : -1;\n    }\n\n    return this.moveTo(nextIndex, duration);\n  }\n\n  /**\n   * Moves to the panel in the order specified in `index`. If `index` is equal to selected panel's index, no action is taken.\n   * @ko `index`에 지정한 순서의 패널로 이동한다. `index`값이 현재 선택된 패널의 인덱스와 동일하다면, 아무 동작도 하지 않는다.\n   * @param index The index number of the panel to be moved.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement (unit: ms) <ko>패널 이동 애니메이션 진행 시간(단위: ms)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let offset = 0;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity);\n\n      offset = nearestPosition - anchorPosition;\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === anchorPosition + offset && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? EVENTS.NONE\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      panel,\n      eventType,\n      null,\n      offset,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Returns the index number of the selected panel.\n   * @ko 현재 선택된 패널의 인덱스 번호를 반환한다.\n   * @return Zero-based index number of the current panel element.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Returns the wrapper element user provided in Flicking constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Returns the selected panel object\n   * @ko 현재 선택된 패널의 오브젝트를 반환한다.\n   * @return Selected panel object.<ko>선택된 패널 오브젝트</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? viewport.castToFlickingPanel(panel)\n      : null;\n  }\n\n  /**\n   * Returns the panel object of given index\n   * @ko 주어진 인덱스에 해당하는 패널의 오브젝트를 반환한다.\n   * @return panel object of given index, `null` if it doesn't exists.<ko>주어진 인덱스에 해당하는 패널의 오브젝트, 해당 패널이 존재하지 않을 시 `null`.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? viewport.castToFlickingPanel(panel)\n      : null;\n  }\n  /**\n   * Returns all panel objects in flicking.\n   * @ko 플리킹 안에 있는 모든 패널 오브젝트들을 반환한다.\n   * @param - Check whether to include clone or not <ko>복사본을 포함할 건지 안 할 건지 확인한다</ko>\n   * @return All panel objects <ko>플리킹 안에 있는 모든 패널 오브젝트들</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel)\n      .map(panel => viewport.castToFlickingPanel(panel));\n  }\n  /**\n   * Returns the panel objects shown in the flicking area.\n   * @ko 플리킹 영역에서 보여지는 패널 오브젝트들을 반환한다.\n   * @return The panel objects shown in the flicking area. <ko>플리킹 영역에서 보여지는 패널 오브젝트들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(panel => {\n      const outsetProgress = panel.getOutsetProgress();\n\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n  /**\n   * Returns the total length of original panels\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Set last panel index for `infinite' mode. [needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it. Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다. 마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다. 또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Last panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   */\n  public setLastIndex(index: number): void {\n    this.viewport.setLastIndex(index);\n  }\n\n  /**\n   * Checks whether the animated panel is playing.\n   * @ko 패널 이동 애니메이션이 진행 중인지 확인한다.\n   * @return Indicates whether the animated panel is playing <ko>패널 이동 애니메이션 진행 중 여부</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * The input from the input device is not blocked so that the panel can be moved by the input device.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return  An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * The input from the input device is blocked so that the panel is not moved by the input device.\n   * @ko 패널이 입력 장치에 의해 움직이지 않도록 입력 장치로부터의 입력을 막는다.\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. If the returned value is specified as a [setStatus()]{@link eg.Flicking#setStatus} method argument, it can be returned to its value status.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메서드 인자로 지정하면 그 값 상태로 되돌릴 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): Readonly<FlickingStatus> {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add <ko>추가할 플러그인(들)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove <ko>제거 플러그인(들)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this);\n    });\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(): void {\n    this.off();\n\n    this.viewport.destroy();\n\n    this.plugins.forEach(plugin => {\n      plugin.destroy(this);\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * The horizontal or vertical length of the panel is updated according to the base element. If `horizontal=true` is horizontal. If `horizontal=false` is vertical.\n   * @ko 패널의 가로 혹은 세로 길이를 기준요소에 맞춰 갱신한다. `horizontal=true`이면 가로, `horizontal=false`이면 세로.\n   * @return An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   */\n  public resize(): this {\n    const viewport = this.viewport;\n\n    viewport.panelManager.allPanels()\n      .forEach(panel => panel.reset());\n    viewport.resize();\n\n    return this;\n  }\n\n  /**\n   * Add new panel at the start.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panel at the end.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace panels with new panels from given index. If index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  private build(): void {\n    this.initViewport();\n    this.listenInput();\n    this.listenResize();\n  }\n\n  private initViewport(): void {\n    const wrapper = this.wrapper;\n    const options = this.options;\n    const cameraElement = document.createElement(\"div\");\n\n    // Make all panels to be a child of camera element\n    // wrapper <- viewport <- camera <- panels[1...n]\n    toArray(wrapper.children).forEach(child => {\n      cameraElement.appendChild(child);\n    });\n\n    // Clipping area for camera element\n    const viewportElement = document.createElement(\"div\");\n    viewportElement.appendChild(cameraElement);\n\n    // Add viewport element to wrapper\n    wrapper.appendChild(viewportElement);\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, viewportElement, cameraElement, options, this.triggerEvent);\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", () => {\n        this.resize();\n      });\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = -Math.sign(cameraChange) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.delta += cameraChange;\n      state.direction = currentDirection;\n    }\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","el","isString","tempDiv","document","createElement","innerHTML","push","toArray","children","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","name","has3d","length","className","classList","add","indexOf","replace","cssObj","property","val","min","max","Math","iterable","slice","call","arr","constructor","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","DEFAULT_VIEWPORT_CSS","position","width","height","DEFAULT_CAMERA_CSS","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","NONE","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","TRANSFORM","index","options","prevSibling","nextSibling","state","relativeAnchorPosition","size","clonedPanels","isClone","cloneIndex","originalStyle","getAttribute","cachedBbox","addClass","applyCSS","bbox","getBbox","parseArithmeticExpression","panel","resize","setAttribute","removeAttribute","getBoundingClientRect","original","getClonedPanels","getIdenticalPanels","elementStyle","left","top","cloneElement","cloneNode","clonedPanel","Panel","clonedState","parentNode","removeClonedPanelsAfter","start","removingPanels","splice","remove","cameraElement","panels","clones","reduce","allClones","firstPanel","lastPanel","getIndex","firstRemovedPanel","filter","possibleLastPanel","newPanels","_a","isCircular","findFirstPanelFrom","siblingElement","getElement","fragment","createDocumentFragment","appendChild","pushedIndex","offset","panelsAfterIndex","emptyPanelCount","findIndex","removedPanels","Boolean","setIndex","addNewClones","updateIndex","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","cloneSet","reversedPanels","concat","reverse","nonEmptyIndexFromLast","allPanels","allPanelsCount","prevPanel","nextPanel","newClones_1","insertTarget_1","allPanels_1","panelElement","contains","originalPanels","cloneCount","getCloneCount","lastPanelClones","nextSiblingClones","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","newClones","map","clone","this_1","insertClones","counter","insertingIndex","newLastIndex","prevState","delta","direction","targetPanel","targetOffset","nextState","e","context","tslib_1","_this","flicking","triggerEvent","transitTo","getPanelCount","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","viewport","flick","setTo","getCameraPosition","releaseEvent","clickedElement","srcEvent","clickedPanel","panelManager","findPanelOf","cameraPosition","clickedPanelPosition","getPosition","castToFlickingPanel","_super","onEnter","moveCamera","stopCamera","defaultDuration","halfGap","isFreeScroll","snapCount","eventDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTo","currentPanel","getCurrentPanel","nearestPanel","getNearestPanel","stop","minimumDistanceToChange","getSize","getRelativeAnchorPosition","panelToMove","basePanel","findNearestIdenticalPanel","panelAtDestPos","snapOffset","indexDiff","isOutOfBound","findAdjacentPanel","findRestorePanelInCircularMode","panelPosition","movingToSamePanel","eventType","hangerPosition","getHangerPosition","firstClonedPanel","lapped","getAnchorPosition","params","scrollAreaSize","getScrollAreaSize","indexRange","getRange","estimatedHangerPos","destPos","getRelativeHangerPosition","passedPanelCount","cycleIndex","getCloneIndex","siblingPanel","panelIndex","siblingIndex","originalPanel","getOriginalPanel","panelSize","originalPosition","currentIndex","getCurrentIndex","get","adjacentPanel","isTrusted","updateAdaptiveSize","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onHold","onRelease","onAnimationEnd","onFinish","viewportElement","axesEvent","stateMachine","getProgress","progress","NaN","panelCount","relativeIndex","floor","getCurrentProgress","getOutsetProgress","outsetProgress","outsetRange","relativePanelPosition","getVisibleRatio","visibleRatio","rightRelativePanelPosition","visibleSize","focus","anchorPosition","currentPosition","update","updateFunction","eachPanel","prev","prevIndex","hasEmptyPanelBetween","notYetMinPanel","prevPanelSize","newPosition","newOffset","next","getLastIndex","nextIndex","notYetMaxPanel","parsedElements","parseElement","targetIndex","insert","insertAfter","relativeHangerPosition","scrollArea","translate","checkedIndexes","StateMachine","PanelManager","build","getState","castedPanel","estimatedPosition","canSetBoundMode","eventResult","findNearestPanel","axes","originalNearestPosition","checkNeedPanel","modifiedNearestPosition","moveVector","moveCoord","coord","round","join","updateSize","updateOriginalPanelPositions","updateScrollArea","clonePanels","updateClonedPanelPositions","chainAllPanels","updateCameraPosition","prevRange","nextRange","currentAnchorPosition","findNearestPanelAt","minimumDistance","prevPosition","nextPosition","distance","isBetween","nearest","shortestDistance","identicals","identical","panInput","enable","disable","indexes","newCurrentIndex","sizeToApply","panelBbox","maximumPanelSize","maximum","viewportStyle","minHeight","minWidth","wrapper","destroy","status","clear","html","createPanels","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","basePosition","targetPosition","progressBetween","startIndex","setLastIndex","handlers","axesHandlers","on","applyCSSValue","setAxesInstance","setDefaultPanel","moveToDefaultPanel","Axes","easing","interruptable","PanInput","scale","connect","panelElements","append","viewportSize","sumOriginalPanelSize","visibleAreaSize","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","summedPanelSize","nextPanelPos","maintainingPanel","holding","playing","looped","panelsBeforeMaintainPanel","accumulatedSize","total","setPosition","clonedPanels_1","cloneBasePos","clonedPanelPos","lastReplacePosition","_b","replacePosition","parsedBounce","parsedVal","axis","off","maxLastIndex","triggerNeedPanel","checkingPanel","atLastPanel","currentNearestPosition","panelRight","cameraNext","emptyPanelExistsBetween","firstIndex","cameraPrev","checkingIndex","atFirstPanel","panelLeft","alreadyTriggered","some","hasHandler","hasOn","eventName","canceled","trigger","merge","previousPosition","inputOffset","cameraChange","currentDirection","querySelector","nodeName","nodeType","currentOptions","minimumRange","maximumRange","possiblePositions","nearestPosition","current","includeClone","getAllPanels","outerHTML","restore","plugins","newPlugins","plugin","init","currentPlugins","removedPlugins","reset","initViewport","listenInput","listenResize","child","Viewport","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component"],"mappings":"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"}