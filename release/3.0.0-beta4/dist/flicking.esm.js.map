{"version":3,"file":"flicking.esm.js","sources":["../src/utils.ts","../src/consts.ts","../src/components/Panel.ts","../src/components/Viewport.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/Flicking.ts"],"sourcesContent":["export function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\n\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (element.className.indexOf(className) < 0) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n","import { FlickingOptions, EventType, Direction, AxesEventType, StateType } from \"./types\";\nimport { checkTranslateSupport } from \"./utils\";\n\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  snap: 1,\n  freeScroll: false,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NONE: \"\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","import { OriginalStyle } from \"../types\";\nimport { DEFAULT_PANEL_CSS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression } from \"../utils\";\n\nclass Panel {\n  private prevPanel: Panel | null;\n  private nextPanel: Panel | null;\n\n  private element: HTMLElement;\n  private state: {\n    index: number;\n    horizontal: boolean,\n    position: number;\n    anchorExpression: string;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    clonedPanels: Panel[];\n    cachedBbox: ClientRect | null;\n  };\n  private original?: Panel;\n\n  public constructor(\n    element: HTMLElement,\n    index: number,\n    options: {\n      horizontal: boolean,\n      anchorExpression: string,\n      classPrefix?: string,\n    },\n  ) {\n    this.element = element;\n\n    this.state = {\n      index,\n      horizontal: options.horizontal,\n      position: 0,\n      anchorExpression: options.anchorExpression,\n      relativeAnchorPosition: 0,\n      size: 0,\n      clonedPanels: [],\n      isClone: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: element.getAttribute(\"class\") || null,\n        style: element.getAttribute(\"style\") || null,\n      },\n      cachedBbox: null,\n    };\n\n    if (options.classPrefix) {\n      addClass(element, `${options.classPrefix}-panel`);\n    }\n\n    // Update size info after applying panel css\n    applyCSS(this.element, DEFAULT_PANEL_CSS);\n    this.resize();\n  }\n\n  public resize(): void {\n    const state = this.state;\n\n    // Removed cached bbox, as we're resizing\n    state.cachedBbox = null;\n\n    const bbox = this.getBbox();\n\n    state.size = state.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (!state.isClone) {\n      state.clonedPanels.forEach(panel => panel.resize());\n    }\n  }\n\n  public destroy(): void {\n    const el = this.element;\n    const originalStyle = this.state.originalStyle;\n\n    originalStyle.className\n      ? el.setAttribute(\"class\", originalStyle.className)\n      : el.removeAttribute(\"class\");\n    originalStyle.style\n      ? el.setAttribute(\"style\", originalStyle.style)\n      : el.removeAttribute(\"style\");\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getPrevPanel(): Panel | null {\n    return this.prevPanel;\n  }\n\n  public getNextPanel(): Panel | null {\n    return this.nextPanel;\n  }\n\n  public getBbox(): ClientRect {\n    const state = this.state;\n    if (!state.cachedBbox) {\n      state.cachedBbox = this.element.getBoundingClientRect();\n    }\n    return state.cachedBbox;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    return this.state.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...state.clonedPanels];\n  }\n\n  public setPosition(pos: number) {\n    const state = this.state;\n    const elementStyle = this.element.style;\n\n    state.position = pos;\n    state.horizontal\n      ? elementStyle.left = `${pos}px`\n      : elementStyle.top = `${pos}px`;\n    state.relativeAnchorPosition = parseArithmeticExpression(state.anchorExpression, state.size);\n  }\n\n  public setPrevPanel(panel: Panel | null): void {\n    this.prevPanel = panel;\n  }\n\n  public setNextPanel(panel: Panel | null): void {\n    this.nextPanel = panel;\n  }\n\n  public clone(cloneIndex: number): Panel {\n    const state = this.state;\n\n    const cloneElement = this.element.cloneNode(true) as HTMLElement;\n    const clonedPanel = new Panel(cloneElement, state.index, {\n      anchorExpression: state.anchorExpression,\n      horizontal: state.horizontal,\n    });\n\n    clonedPanel.original = this;\n    clonedPanel.state.isClone = true;\n    clonedPanel.state.cloneIndex = cloneIndex;\n    // Can't calc size as it didn't appended to other element yet\n    // So manually set size for it\n    clonedPanel.state.size = state.size;\n    state.clonedPanels.push(clonedPanel);\n\n    return clonedPanel;\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const removedPanels = this.state.clonedPanels.splice(start);\n\n    for (const panel of removedPanels) {\n      const element = panel.getElement();\n      element.parentNode!.removeChild(element);\n    }\n  }\n}\n\nexport default Panel;\n","import Panel from \"./Panel\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray } from \"../utils\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS } from \"../consts\";\nimport Axes, { PanInput } from \"@egjs/axes\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus } from \"../types\";\n\nexport default class Viewport {\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private panels: Panel[];\n  private clonedPanels: Panel[] = [];\n\n  private axesHandlers: {[key: string]: any};\n\n  private state: {\n    index: number;\n    size: number;\n    position: number;\n    hangerPosition: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n  };\n  private options: FlickingOptions;\n\n  constructor(\n    viewportElement: HTMLElement,\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n\n    this.state = {\n      index: options.defaultIndex,\n      size: 0,\n      position: 0,\n      hangerPosition: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n    };\n    this.options = options;\n\n    this.build();\n  }\n\n  public moveTo(panel: FlickingPanel, axesEvent: any, duration: number = this.options.duration): void {\n    const state = this.state;\n    const freeScroll = this.options.freeScroll;\n    let targetPos = panel.anchorPosition - state.hangerPosition;\n\n    targetPos = this.canSetBoundMode()\n      ? clamp(targetPos, state.scrollArea.prev, state.scrollArea.next)\n      : targetPos;\n\n    state.index = panel.index;\n    // freeScroll only occurs in release events\n    (axesEvent && axesEvent.setTo)\n      ? axesEvent.setTo({ flick: freeScroll ? axesEvent.destPos.flick : targetPos }, duration)\n      : this.axes.setTo({ flick: targetPos }, duration);\n  }\n\n  public moveCamera(pos: number): void {\n    const state = this.state;\n\n    const transform = state.translate.name;\n    const moveVector = this.options.horizontal\n      ? [-pos, 0] : [0, -pos];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n\n    // Update position\n    state.position = pos;\n  }\n\n  public resize(): void {\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n\n    // Clone panels in circular mode\n    if (this.options.circular) {\n      this.clonePanels();\n      this.relocatePanels();\n    }\n\n    this.chainPanels();\n    this.updateCameraPosition();\n  }\n\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel {\n    const state = this.state;\n    const panels = this.panels;\n    const clonedPanels = this.clonedPanels;\n    const scrollArea = state.scrollArea;\n    const currentHangerPosition = state.position + state.hangerPosition;\n\n    if (this.isOutOfBound()) {\n      return state.position < scrollArea.prev\n        ? panels[0]\n        : panels[panels.length - 1];\n    }\n\n    const allPanels = [...panels, ...clonedPanels];\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel;\n\n    for (const panel of allPanels) {\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(currentHangerPosition, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - currentHangerPosition),\n          Math.abs(nextPosition - currentHangerPosition),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      }\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel!;\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    for (const panel of [...this.panels, ...this.clonedPanels]) {\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    const state = this.state;\n\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = state.position + state.hangerPosition;\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const distance = Math.abs(state.position + state.hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.hangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.hangerPosition\n        : anchorPosition > state.position + state.hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.hangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.hangerPosition + scrollAreaSize;\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public updateAdaptiveSize(): void {\n    const options = this.options;\n    const horizontal = options.horizontal;\n    let sizeToApply: number;\n\n    if (options.adaptive) {\n      const currentPanel = this.getCurrentPanel();\n      const panelBbox = currentPanel.getBbox();\n\n      sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n    } else {\n      // Find minimum height of panels to maximum panel size\n      const maximumPanelSize = this.panels.reduce((maximum, panel) => {\n        const panelBbox = panel.getBbox();\n        return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n      }, 0);\n\n      sizeToApply = maximumPanelSize;\n    }\n\n    const viewportStyle = this.viewportElement.style;\n    if (horizontal) {\n      viewportStyle.height = `${sizeToApply}px`;\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.width = `${sizeToApply}px`;\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n  }\n\n  public destroy(): void {\n    const viewportElement = this.viewportElement;\n    const wrapper = viewportElement.parentElement;\n\n    wrapper!.removeChild(viewportElement);\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    this.panels.forEach(panel => {\n      wrapper!.appendChild(panel.getElement());\n      panel.destroy();\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const cameraElement = this.cameraElement;\n\n    // Replace all panels inside camera element\n    cameraElement.innerHTML = panels.map(panel => panel.html).join(\"\");\n    this.viewportElement.appendChild(cameraElement);\n\n    // Resotre index & resize\n    this.state.index = status.index;\n    this.moveCamera(status.position);\n\n    this.panels = [];\n    this.clonedPanels = [];\n\n    this.createPanels();\n    this.resize();\n  }\n\n  public getPanelCount(): number {\n    return this.panels.length;\n  }\n\n  public getPanel(index: number): Panel | null {\n    if (!isBetween(index, 0, this.panels.length - 1)) {\n      return null;\n    }\n\n    return this.panels[index];\n  }\n\n  public getCurrentPanel(): Panel {\n    return this.panels[this.state.index];\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPrevIndex(): number {\n    const state = this.state;\n    let index = state.index - 1;\n\n    if (index < 0) {\n      index = this.options.circular\n        ? this.panels.length - 1\n        : -1;\n    }\n\n    return index;\n  }\n\n  public getNextIndex(): number {\n    const state = this.state;\n    let index = state.index + 1;\n\n    if (index >= this.panels.length) {\n      index = this.options.circular\n        ? 0\n        : -1;\n    }\n\n    return index;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.hangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n  public getAllPanels(includeClone?: boolean): Panel[] {\n    const panels = this.panels;\n\n    return includeClone ? panels.concat(this.clonedPanels) : panels;\n  }\n  public connectAxesHandler(handler: {[key: string]: (event: { [key: string]: any; }) => any}): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handler;\n    axes.on(handler);\n    this.resume();\n  }\n\n  public pause(): void {\n    this.axes.off();\n  }\n\n  public resume(): void {\n    this.axes.on(this.axesHandlers);\n  }\n\n  private build(): void {\n    this.applyCSSValue();\n    this.setAxesInstance();\n    this.createPanels();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const classPrefix = options.classPrefix;\n\n    // Set default css values for each element\n    viewportElement.className = `${classPrefix}-viewport`;\n    cameraElement.className = `${classPrefix}-camera`;\n\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    if (options.zIndex) {\n      viewportElement.style.zIndex = `${options.zIndex}`;\n    }\n    if (options.overflow) {\n      viewportElement.style.overflow = \"visible\";\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = this.makeNewPanInput();\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private createPanels(): void {\n    const state = this.state;\n    const options = this.options;\n\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n    if (!panelElements || !panelElements.length) {\n      throw new Error(\"There're no panel elements.\");\n    }\n\n    // Initialize panels\n    this.panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, {\n        horizontal: options.horizontal,\n        classPrefix: options.classPrefix,\n        anchorExpression: options.anchor,\n      }),\n    );\n\n    // Clamp default index\n    state.index = clamp(state.index, 0, this.panels.length - 1);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const panels = this.panels;\n    const clonedPanels = this.clonedPanels;\n\n    const viewportSize = state.size;\n    const lastPanel = panels[panels.length - 1];\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() + this.options.gap;\n    const visibleAreaSize = viewportSize + panels[0].getRelativeAnchorPosition();\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const lastClonedPanel = clonedPanels[clonedPanels.length - 1];\n    const cloneCount = Math.ceil(visibleAreaSize / sumOriginalPanelSize);\n    const prevCloneCount = lastClonedPanel ? lastClonedPanel.getCloneIndex() + 1 : 0;\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        panels.forEach(origPanel => {\n          const clonedPanel = origPanel.clone(cloneIndex);\n          this.appendPanelElement(clonedPanel.getElement());\n\n          clonedPanels.push(clonedPanel);\n        });\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panels.forEach(panel => {\n        panel.removeClonedPanelsAfter(cloneCount);\n      });\n      this.clonedPanels.splice(cloneCount * panels.length);\n    }\n  }\n\n  private relocatePanels(): void {\n    const state = this.state;\n    const options = this.options;\n    const panels = this.panels;\n    const clonedPanels = this.clonedPanels;\n    const scrollArea = state.scrollArea;\n    const maximumNextVisiblePosition = scrollArea.next + state.size;\n    const minimumPrevVisiblePosition = scrollArea.prev;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getIdenticalPanels()[0];\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelPosition = panel.getPosition();\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (panelPosition <= maximumNextVisiblePosition) {\n        // It's visible in current scrollArea\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n  }\n\n  private chainPanels(): void {\n    const allPanels = [...this.panels, ...this.clonedPanels];\n\n    allPanels.forEach((panel, idx) => {\n      const prevPanel = (idx > 0)\n        ? allPanels[idx - 1]\n        : null;\n\n      const nextPanel = (idx < allPanels.length - 1)\n        ? allPanels[idx + 1]\n        : null;\n\n      panel.setPrevPanel(prevPanel);\n      panel.setNextPanel(nextPanel);\n    });\n\n    if (this.options.circular) {\n      const firstPanel = allPanels[0];\n      const lastPanel = allPanels[allPanels.length - 1];\n\n      firstPanel.setPrevPanel(lastPanel);\n      lastPanel.setNextPanel(firstPanel);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n\n    const defaultIndex = clamp(this.options.defaultIndex, 0, this.panels.length -  1);\n    const defaultPanel = this.panels[defaultIndex];\n    let defaultPosition = defaultPanel.getAnchorPosition() - state.hangerPosition;\n\n    defaultPosition = this.canSetBoundMode()\n      ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n      : defaultPosition;\n\n    state.index = defaultIndex;\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private isOutOfBound(): boolean {\n    const state = this.state;\n    const scrollArea = state.scrollArea;\n\n    return !this.options.circular\n      && (state.position < scrollArea.prev || state.position > scrollArea.next);\n  }\n\n  private canSetBoundMode(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const panels = this.panels;\n\n    const lastPanel = panels[panels.length - 1];\n    const summedPanelSize = lastPanel.getPosition() + lastPanel.getSize();\n\n    return options.bound\n      && !options.circular\n      && summedPanelSize >= state.size;\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n      viewportElement.style.minWidth = \"\";\n    }\n\n    const bbox = viewportElement.getBoundingClientRect();\n\n    // update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    state.hangerPosition = parseArithmeticExpression(options.hanger, state.size);\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panels = this.panels;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = 0;\n    panels.forEach(panel => {\n      panel.resize();\n\n      const panelPos = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(panelPos);\n      nextPanelPos += panelSize + gap;\n    });\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panels = this.panels;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n    const hangerPos = state.hangerPosition;\n\n    if (this.canSetBoundMode()) {\n      state.scrollArea = {\n        prev: firstPanel.getPosition(),\n        next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n      };\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - hangerPos,\n        next: sumOriginalPanelSize + firstPanel.getRelativeAnchorPosition() - hangerPos,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - hangerPos,\n        next: lastPanel.getAnchorPosition() - hangerPos,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[] = bounce as [number, number];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    axes.axis.flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    axes.axis.flick.bounce = parsedBounce;\n  }\n\n  private updateCameraPosition(): void {\n    const state = this.state;\n    const panels = this.panels;\n    const axes = this.axes;\n\n    let newPosition = panels[state.index].getAnchorPosition() - state.hangerPosition;\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    this.moveCamera(newPosition);\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    this.pause();\n    axes.setTo({\n      flick: newPosition,\n    }, 0);\n    this.resume();\n  }\n\n  private makeNewPanInput(): PanInput {\n    const options = this.options;\n\n    return new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n  }\n\n  private appendPanelElement(element: HTMLElement): void {\n    this.cameraElement.appendChild(element);\n  }\n}\n","import { ValueOf, Direction, StateType, FlickingContext, FlickingPanel } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: FlickingPanel | null = null;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n  }\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","import State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n  }\n\n  public onHold(e: any, { triggerEvent, transitTo }: FlickingContext): void {\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext, SelectEvent } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // Which means at least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't be handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo, castToReadonlyPanel }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const clickedElement = releaseEvent.inputEvent.srcEvent.target;\n    const clickedPanel = viewport.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        selectedIndex: clickedPanel.getIndex(),\n        selectedPanel: castToReadonlyPanel(clickedPanel),\n      } as SelectEvent);\n    }\n  }\n}\n\nexport default HoldingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext, StateType, ValueOf } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onEnter(prevState: State): void {\n    super.onEnter(prevState);\n    this.delta = 0;\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, moveToPanel, castToReadonlyPanel, transitTo, stopCamera } = context;\n    const delta = this.delta;\n    const options = flicking.options;\n    const isNext = delta > 0;\n    const swipeDistance = Math.abs(delta);\n    const swipeAngle = e.inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(e.inputEvent.deltaY / e.inputEvent.deltaX) / Math.PI)\n      : 90;\n    const overThreshold = (swipeDistance >= options.threshold)\n      && (options.horizontal\n        ? swipeAngle <= options.thresholdAngle\n        : swipeAngle > options.thresholdAngle);\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (!overThreshold && this.targetPanel) {\n      // Interrupted while animating\n      viewport.moveTo(this.targetPanel, e);\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getCameraPosition() + viewport.getHangerPosition();\n    const halfGap = options.gap / 2;\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n    * |  Prev  |     Next     |\n    * |--------|--------------|\n    * [][      |<-Anchor    ][] <- Panel + Gap\n    */\n    let minimumDistanceToChange = isNext\n      ? currentPanel.getSize() - currentPanel.getRelativeAnchorPosition() + halfGap\n      : currentPanel.getRelativeAnchorPosition() + halfGap;\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    const flick = Math.abs(e.delta.flick);\n    const freeScroll = options.freeScroll;\n    const snap = freeScroll ? Infinity : options.snap;\n    const durationOption = options.duration;\n    let duration: number | undefined;\n    let panelToMove = castToReadonlyPanel(freeScroll ? viewport.findNearestPanel() : currentPanel);\n\n    if (freeScroll || overThreshold) {\n      let count = 0;\n\n      if (freeScroll || minimumDistanceToChange <= flick) {\n        const position = panelToMove.position;\n\n        while (Math.abs(panelToMove.position - position) < flick && count < snap) {\n          const nextPanel = isNext ? panelToMove.next() : panelToMove.prev();\n\n          if (!nextPanel) {\n            break;\n          }\n          panelToMove = nextPanel;\n          ++count;\n        }\n        if (freeScroll) {\n          duration = e.duration;\n        } else if (count > 1) {\n          duration = Math.min(durationOption * count, Math.max(e.duration, durationOption));\n        }\n      }\n      if (!freeScroll && count <= 1) {\n        if (swipeDistance <= minimumDistanceToChange) {\n          let adjacentPanel = isNext\n            ? currentPanel.getNextPanel()\n            : currentPanel.getPrevPanel();\n\n          if (options.circular) {\n            const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n            const lapped = Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n              > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n            if (lapped) {\n              adjacentPanel = isNext\n                ? firstClonedPanel.getNextPanel()\n                : firstClonedPanel.getPrevPanel();\n            }\n          }\n          panelToMove = castToReadonlyPanel((adjacentPanel != null) ? adjacentPanel : currentPanel);\n        } else {\n          panelToMove = castToReadonlyPanel(viewport.findNearestPanel());\n        }\n      }\n    } else if (options.circular) {\n      // Restore case\n      const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n      const lapped = Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n      if (!isNext && lapped) {\n        panelToMove = castToReadonlyPanel(firstClonedPanel);\n      }\n    }\n\n    const eventType = (!overThreshold || panelToMove.position === currentPanel.getPosition())\n      ? (freeScroll ? EVENTS.NONE : EVENTS.RESTORE)\n      : EVENTS.CHANGE;\n\n    moveToPanel(panelToMove, eventType, e, duration)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.ANIMATING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n        stopCamera(e);\n      });\n  }\n}\n\nexport default DraggingState;\n","import State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { triggerEvent, transitTo }: FlickingContext): void {\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted);\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n}\n\nexport default AnimatingState;\n","import State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","import State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","import Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\nimport StateMachine from \"./components/StateMachine\";\n\nimport { merge, getProgress } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE } from \"./consts\";\nimport { FlickingOptions, FlickingEvent, Direction, EventType, ChangeEvent, FlickingPanel, TriggerCallback, FlickingContext, FlickingStatus, Plugin } from \"./types\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n * @throws {Error} An Error occur when given base element doesn't exist or it hasn't proper DOM structure to be initialized. <ko>주어진 기본 요소가 존재하지 않거나 초기화 할 적절한 DOM 구조가없는 경우 오류가 발생한다.</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event types\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private stateMachine: StateMachine;\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private plugins: Plugin[] = [];\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options The option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix for class names of the panels, viewport and camera.<ko>패널들과 뷰포트, 카메라 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation where acceleration is manually enabled by user. Higher value means shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] Direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for infinite scrolling<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되여 무한 스크롤이 가능하다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to destination panel(unit: pixel). A panel element must be dragged beyond the threshold to move to the destination panel.<ko>목적 패널로의 이동 임계값 (단위: 픽셀). 패널 요소를 임계값 이상으로 끌어다 놓아야만이 목적 패널로 이동한다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] The easing function to apply to a panel moving animation. The default function is easeOutCubic.<ko>패널 이동 애니메이션에 적용할 `easing`함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of panel to set as default when initializing the module. A zero-based integer.<ko>모듈 초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices. ({@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.PanInput.html|eg.Axes.PanInput Reference})<br>- \"touch\": A touch input device.<br>- \"mouse\": A mouse.<ko>입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.PanInput.html|eg.Axes.PanInput 참고})<br>- \"touch\": 터치 입력 장치.<br>- \"mouse\": 마우스.</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold value that determines whether user input is horizontal or vertical. (0 ~ 90)<ko>사용자의 입력이 가로 방향인지 세로 방향인지 판단하는 기준 각도 (0 ~ 90)</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {Boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number} [options.zIndex=2000] z-index value for viewport element<ko>뷰포트 요소의 z-index 값</ko>\n   * @param {boolean} [options.bound=false] Prevents view going out of first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] Position of hanger in viewport, which hangs panel anchors.<br>Should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] Position of anchor in panels, which can be hanged by viewport hanger.<br>Should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space between each panels.<br>Should be given in number(px).<ko>패널간에 부여할 간격의 크기를 나타내는 숫자(px)</ko>\n   * @param {number} [options.snap=1] The number of panels you're going to roll over to when you snap<ko>한 번 스냅 할 때 최대 몇 개의 패널까지 넘길 건지 나타내는 숫자</ko>\n   * @param {boolean} [options.freeScroll=false] If true, panels can scroll freely when flicked.<ko>활성화 했을 때 플릭한 경우에 패널들을 자유롭게 스크롤할 수 있다.</ko>\n   */\n  constructor(\n    element: HTMLElement | string,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (typeof element === \"string\") {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n\n    this.build(options);\n  }\n  /**\n   * Move to the previous panel. If `horizontal=true`is left panel. If `horizontal=false`is upper panel.\n   * @ko 이전 패널로 이동한다. `horizontal=true`이면 좌측 패널. `horizontal=false`이면 상측 패널.\n   * @param [duration=options.duration] Duration of the panel movement (unit: ms) <ko>패널 이동 애니메이션 진행 시간(단위: ms)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public prev(duration?: number): this {\n    return this.moveTo(this.viewport.getPrevIndex(), duration);\n  }\n\n  /**\n   * Move to the next panel. If `horizontal=true`is right panel. If `horizontal=false`is lower panel.\n   * @ko 다음 패널로 이동한다. `horizontal=true`이면 우측 패널. `horizontal=false`이면 하측 패널.\n   * @param [duration=options.duration] Duration of the panel movement (unit: ms) <ko>패널 이동 애니메이션 진행 시간(단위: ms)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public next(duration?: number): this {\n    return this.moveTo(this.viewport.getNextIndex(), duration);\n  }\n\n  /**\n   * Moves to the panel in the order specified in `index`. If `index` is equal to selected panel's index, no action is taken.\n   * @ko `index`에 지정한 순서의 패널로 이동한다. `index`값이 현재 선택된 패널의 인덱스와 동일하다면, 아무 동작도 하지 않는다.\n   * @param index The index number of the panel to be moved.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement (unit: ms) <ko>패널 이동 애니메이션 진행 시간(단위: ms)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.getPanel(index);\n    const state = this.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n    const hangerPosition = viewport.getCameraPosition() + viewport.getHangerPosition();\n    const anchorPosition = panel.getAnchorPosition();\n\n    if (hangerPosition === anchorPosition) {\n      return this;\n    }\n    const panelIndex = panel.getIndex();\n    const currentIndex = viewport.getIndex();\n    const nearestPanel = this.castToReadonlyPanel(viewport.findNearestIdenticalPanel(panel));\n\n    this.moveToPanel(nearestPanel, panelIndex === currentIndex ? EVENTS.NONE : EVENTS.CHANGE, null, duration);\n    return this;\n  }\n\n  /**\n   * Returns the index number of the selected panel.\n   * @ko 현재 선택된 패널의 인덱스 번호를 반환한다.\n   * @return Zero-based index number of the current panel element.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getIndex();\n  }\n\n  /**\n   * Returns the index number of the previous panel.\n   * @ko 현재 선택된 패널의 이전 패널의 인덱스 번호를 반환한다.\n   * @return Zero-based index number of the previous panel.<br>When `circular` option is `false`, return -1 if selected panel is first panel.<ko>이전 패널 요소의 인덱스 번호. 0부터 시작하는 정수.<br>`circular`옵션이 `false`일 때 현재 선택된 패널이 첫번째 패널이라면 `-1`을 반환한다.</ko>\n   */\n  public getPrevIndex(): number {\n    return this.viewport.getPrevIndex();\n  }\n\n  /**\n   * Returns the index number of the next panel.\n   * @ko 현재 선택된 패널의 다음 패널의 인덱스 번호를 반환한다.\n   * @return Zero-based index number of the next panel.<br>When `circular` option is `false`, return -1 if selected panel is last panel.<ko>다음 패널 요소의 인덱스 번호. 0부터 시작하는 정수.<br>`circular`옵션이 `false`일 때 현재 선택된 패널이 마지막 패널이라면 `-1`을 반환한다.</ko>\n   */\n  public getNextIndex(): number {\n    return this.viewport.getNextIndex();\n  }\n\n  /**\n   * Returns the selected panel object\n   * @ko 현재 선택된 패널의 오브젝트를 반환한다.\n   * @return Selected panel object.<ko>선택된 패널 오브젝트</ko>\n   */\n  public getCurrentPanel(): FlickingPanel {\n    return this.castToReadonlyPanel(this.viewport.getCurrentPanel());\n  }\n\n  /**\n   * Returns the panel object of given index\n   * @ko 주어진 인덱스에 해당하는 패널의 오브젝트를 반환한다.\n   * @return panel object of given index, `null` if it doesn't exists.<ko>주어진 인덱스에 해당하는 패널의 오브젝트, 해당 패널이 존재하지 않을 시 `null`.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const panel = this.viewport.getPanel(index);\n    return panel\n      ? this.castToReadonlyPanel(panel)\n      : null;\n  }\n  /**\n   * Returns all panel objects in flicking.\n   * @ko 플리킹 안에 있는 모든 패널 오브젝트들을 반환한다.\n   * @param - Check whether to include clone or not <ko>복사본을 포함할 건지 안 할 건지 확인한다</ko>\n   * @return All panel objects <ko>플리킹 안에 있는 모든 패널 오브젝트들</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    return this.viewport.getAllPanels(includeClone).map(panel => this.castToReadonlyPanel(panel));\n  }\n  /**\n   * Returns the panel objects shown in the flicking area.\n   * @ko 플리킹 영역에서 보여지는 패널 오브젝트들을 반환한다.\n   * @return The panel objects shown in the flicking area. <ko>플리킹 영역에서 보여지는 패널 오브젝트들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.getAllPanels(true).filter(({outsetProgress}) => {\n      return outsetProgress > -1 && outsetProgress < 1;\n    });\n  }\n  /**\n   * Returns the total length of original panels\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.getPanelCount();\n  }\n\n  /**\n   * Checks whether the animated panel is playing.\n   * @ko 패널 이동 애니메이션이 진행 중인지 확인한다.\n   * @return Indicates whether the animated panel is playing <ko>패널 이동 애니메이션 진행 중 여부</ko>\n   */\n  public isPlaying(): boolean {\n    return this.stateMachine.getState().playing;\n  }\n\n  /**\n   * The input from the input device is not blocked so that the panel can be moved by the input device.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return  An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * The input from the input device is blocked so that the panel is not moved by the input device.\n   * @ko 패널이 입력 장치에 의해 움직이지 않도록 입력 장치로부터의 입력을 막는다.\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n /**\n  * Get current flicking status. If the returned value is specified as a [setStatus()]{@link eg.Flicking#setStatus} method argument, it can be returned to its value status.\n  * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메서드 인자로 지정하면 그 값 상태로 되돌릴 수 있다.\n  * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n  */\n  public getStatus(): Readonly<FlickingStatus> {\n    const panels = this.viewport.getAllPanels().map(panel => {\n      return {\n        html: panel.getElement().outerHTML,\n        index: panel.getIndex(),\n      };\n    });\n\n    return {\n      index: this.getIndex(),\n      panels,\n      position: this.viewport.getCameraPosition(),\n    };\n  }\n\n /**\n  * Restore to the state of the `status`.\n  * @ko `status`의 상태로 복원한다.\n  * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n  */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add <ko>추가할 플러그인(들)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n  /**\n   * Remove plugins from Flicking\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove <ko>제거 플러그인(들)</ko>\n   * @return An instance of a module itself <ko>모듈 자신의 인스턴스</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      index > -1 && currentPlugins.splice(index, 1);\n\n      plugin.destroy(this);\n    });\n    return this;\n  }\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(): void {\n    this.off();\n\n    this.viewport.destroy();\n\n    this.plugins.forEach(plugin => {\n      plugin.destroy(this);\n    });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * The horizontal or vertical length of the panel is updated according to the base element. If `horizontal=true` is horizontal. If `horizontal=false` is vertical.\n   * @ko 패널의 가로 혹은 세로 길이를 기준요소에 맞춰 갱신한다. `horizontal=true`이면 가로, `horizontal=false`이면 세로.\n   * @return An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   */\n  public resize(): this {\n    this.viewport.resize();\n\n    return this;\n  }\n\n  private build(options: Partial<FlickingOptions>): void {\n    this.setInitialState(options);\n    this.initViewport();\n    this.listenInput();\n    this.listenResize();\n  }\n\n  private setInitialState(options: Partial<FlickingOptions>): void {\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Set internal state machine\n    this.stateMachine = new StateMachine();\n  }\n\n  private initViewport(): void {\n    const wrapper = this.wrapper;\n    const options = this.options;\n    const children = wrapper.children;\n    if (!children || !children.length) {\n      // FIXME: INFINITE FLICKING 구현시 삭제할 것\n      throw new Error(\"Given base element doesn't have proper DOM structure to be initialized.\");\n    }\n\n    const cameraElement = document.createElement(\"div\");\n\n    // Make all panels to be a child of camera element\n    // wrapper <- viewport <- camera <- panels[1...n]\n    let firstChild = wrapper.firstChild;\n    while (firstChild) {\n      cameraElement.appendChild(firstChild);\n      firstChild = wrapper.firstChild;\n    }\n\n    // Clipping area for camera element\n    const viewportElement = document.createElement(\"div\");\n    viewportElement.appendChild(cameraElement);\n\n    // Add viewport element to wrapper\n    wrapper.appendChild(viewportElement);\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(viewportElement, cameraElement, options);\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const stateMachine = flicking.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: flicking.stopCamera,\n      moveToPanel: flicking.moveToPanel,\n      castToReadonlyPanel: flicking.castToReadonlyPanel,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", () => {\n        this.resize();\n      });\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = this.stateMachine.getState();\n    const currentPanel = viewport.getCurrentPanel();\n    const {prev, next} = viewport.getScrollArea();\n    const pos = viewport.getCameraPosition();\n    let progress = getProgress(pos, [prev, prev, next]);\n\n    if (this.options.circular) {\n        progress %= 1;\n    }\n    const canceled = !super.trigger(eventName, merge({\n      type: eventName,\n      index: currentPanel.getIndex(),\n      panel: this.castToReadonlyPanel(currentPanel),\n      direction: state.direction,\n      holding: state.holding,\n      progress,\n      axesEvent,\n      isTrusted,\n    }, params));\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = this.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNext = inputOffset < 0;\n      const prevPos = viewport.getCameraPosition();\n\n      let cameraChange = pos - prevPos;\n      const looped = isNext === (pos < prevPos);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = -Math.sign(cameraChange) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.delta += cameraChange;\n      state.direction = currentDirection;\n    }\n\n    const previousPosition = viewport.getCameraPosition();\n\n    viewport.moveCamera(pos);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted).onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition);\n      });\n  }\n\n  private stopCamera = (axesEvent: any): void => {\n    const viewport = this.viewport;\n\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: viewport.getCameraPosition() }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  private moveToPanel = (panel: FlickingPanel, eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | EventType[\"NONE\"], axesEvent: any, duration: number = this.options.duration): TriggerCallback => {\n    const viewport = this.viewport;\n    const stateMachine = this.stateMachine;\n    const currentPanel = viewport.getCurrentPanel();\n\n    const estimatedPosition = panel.anchorPosition - viewport.getHangerPosition();\n    const currentPosition = viewport.getCameraPosition();\n\n    const isTrusted = axesEvent !== null;\n    const direction = estimatedPosition > currentPosition\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.index,\n        panel,\n        direction,\n        prevIndex: currentPanel.getIndex(),\n        prevPanel: this.castToReadonlyPanel(currentPanel),\n      } as ChangeEvent);\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(callback: () => void): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      const state = stateMachine.getState();\n\n      state.targetPanel = panel;\n      state.direction = direction;\n      viewport.moveTo(panel, axesEvent, duration);\n    });\n\n    // Move end event can't be triggered automatically when duration is 0\n    // as Axes won't trigger animationEnd or finish event\n    // so manually trigger finish event\n    if (duration <= 0) {\n      stateMachine.fire(AXES_EVENTS.FINISH, null, this.eventContext);\n    }\n\n    return eventResult;\n  }\n\n  private castToReadonlyPanel = (panel: Panel, position = panel.getPosition()): FlickingPanel => {\n    const flicking = this;\n    const isCircular = this.options.circular;\n    const viewport = this.viewport;\n    const size = panel.getSize();\n    const relativeAnchorPosition = panel.getRelativeAnchorPosition();\n    const cameraPosition = viewport.getCameraPosition();\n    const realtiveHangerPosition = viewport.getHangerPosition();\n    const cameraDist = cameraPosition + realtiveHangerPosition;\n    const nearestPanel = this.viewport.findNearestPanel();\n    const isOnNext = nearestPanel.getAnchorPosition() > cameraDist || !nearestPanel.getNextPanel();\n    // if isOnNext is true, find the previous panel of the nearest panel.\n    const prevPanel = (isOnNext ? nearestPanel.getPrevPanel() : nearestPanel) || nearestPanel;\n    const nextPanel = (isOnNext ? nearestPanel : nearestPanel.getNextPanel()) || nearestPanel;\n    const scrollSize = viewport.getScrollAreaSize();\n    const viewportSize = viewport.getSize();\n    let prevAnchorPosition = prevPanel.getAnchorPosition();\n    let nextAnchorPosition = nextPanel.getAnchorPosition();\n\n    if (prevAnchorPosition > nextAnchorPosition) {\n      // last to first or first to last\n      if (cameraDist > prevAnchorPosition) {\n        nextAnchorPosition += scrollSize;\n      } else {\n        prevAnchorPosition -= scrollSize;\n      }\n    }\n    const range = [\n      prevAnchorPosition,\n      prevAnchorPosition,\n      nextAnchorPosition,\n    ];\n    const outsetRange = [\n      -size,\n      realtiveHangerPosition - relativeAnchorPosition,\n      viewportSize,\n    ];\n\n    // single\n    const panelCount = this.getPanelCount();\n    const prevCloneIndex = prevPanel.getCloneIndex();\n    const relativeIndex = (isCircular ? Math.floor(position / scrollSize) * panelCount : 0) + panel.getIndex();\n    const progress = relativeIndex - getProgress(cameraDist, range) - (prevPanel.getIndex() + (prevCloneIndex + 1) * panelCount);\n\n    // outset\n    const relativePanelPosition = position - cameraPosition;\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    // visibleRatio\n    const rightRelativePanelPosition = relativePanelPosition + size;\n    const visibleSize = Math.min(viewportSize, rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0 ? visibleSize / size : 0;\n\n    return {\n      element: panel.getElement(),\n      index: panel.getIndex(),\n      position,\n      progress,\n      outsetProgress,\n      visibleRatio,\n      anchorPosition: position + panel.getRelativeAnchorPosition(),\n      size: panel.getSize(),\n      focus(this: FlickingPanel, duration?: number): void {\n        const hangerPosition = viewport.getCameraPosition() + viewport.getHangerPosition();\n        const anchorPosition = panel.getAnchorPosition();\n        if (hangerPosition === anchorPosition) {\n          return;\n        }\n\n        const currentPosition = viewport.getCurrentPanel().getPosition();\n        flicking.moveToPanel(this, currentPosition === position ? EVENTS.NONE : EVENTS.CHANGE, null, duration);\n      },\n      update(this: FlickingPanel, updateFunction: (element: HTMLElement) => any): void {\n        panel.getIdenticalPanels()\n          .forEach(eachPanel => updateFunction(eachPanel.getElement()));\n      },\n      prev(this: FlickingPanel): FlickingPanel | null {\n        const originalPrevPanel = panel.getPrevPanel();\n        if (originalPrevPanel == null) {\n          return null;\n        }\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        let newPosition = originalPrevPanel.getPosition();\n\n        while (position  < newPosition) {\n            newPosition -= scrollAreaSize;\n        }\n        return flicking.castToReadonlyPanel(originalPrevPanel, newPosition);\n      },\n      next(this: FlickingPanel): FlickingPanel | null {\n        const originalNextPanel = panel.getNextPanel();\n        if (originalNextPanel == null) {\n          return null;\n        }\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        let newPosition = originalNextPanel.getPosition();\n\n        while (position  > newPosition) {\n          newPosition += scrollAreaSize;\n        }\n        return flicking.castToReadonlyPanel(originalNextPanel, newPosition);\n      },\n    };\n  }\n}\n\nexport default Flicking;\n"],"names":["target","_i","srcs","forEach","source","Object","keys","key","value","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","supportedStyle","document","documentElement","style","transformName","prefixedTransform","Error","el","createElement","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","name","has3d","length","element","className","classList","add","indexOf","replace","cssObj","property","val","min","max","Math","iterable","slice","call","arr","constructor","Array","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","threshold","duration","panelEffect","x","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","snap","freeScroll","DEFAULT_VIEWPORT_CSS","position","width","height","willChange","DEFAULT_CAMERA_CSS","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NONE","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","IDLE","HOLDING","DRAGGING","ANIMATING","DISABLED","DIRECTION","PREV","NEXT","TRANSFORM","index","options","state","anchorExpression","relativeAnchorPosition","size","clonedPanels","isClone","cloneIndex","originalStyle","getAttribute","cachedBbox","addClass","applyCSS","resize","bbox","getBbox","panel","setAttribute","removeAttribute","prevPanel","nextPanel","getBoundingClientRect","original","getIdenticalPanels","elementStyle","left","top","parseArithmeticExpression","cloneElement","cloneNode","clonedPanel","Panel","push","start","removedPanels","splice","removedPanels_1","getElement","parentNode","viewportElement","cameraElement","hangerPosition","scrollArea","prev","next","translate","build","axesEvent","targetPos","anchorPosition","canSetBoundMode","setTo","flick","destPos","axes","moveVector","moveCoord","map","coord","round","join","updateSize","updateOriginalPanelPositions","updateAdaptiveSize","updateScrollArea","clonePanels","relocatePanels","chainPanels","updateCameraPosition","panels","currentHangerPosition","isOutOfBound","allPanels","minimumDistance","Infinity","nearestPanel","allPanels_1","prevPosition","getPosition","nextPosition","getSize","distance","isBetween","abs","_a","panelElement","contains","nearest","shortestDistance","identicals","identical","getAnchorPosition","scrollAreaSize","panInput","enable","disable","sizeToApply","currentPanel","getCurrentPanel","panelBbox","maximumPanelSize","reduce","maximum","viewportStyle","minHeight","minWidth","wrapper","destroy","appendChild","status","innerHTML","html","moveCamera","createPanels","includeClone","concat","handler","axesHandlers","on","resume","off","applyCSSValue","setAxesInstance","moveToDefaultPanel","Axes","easing","interruptable","makeNewPanInput","connect","panelElements","children","toArray","viewportSize","lastPanel","sumOriginalPanelSize","visibleAreaSize","getRelativeAnchorPosition","lastClonedPanel","cloneCount","ceil","prevCloneCount","getCloneIndex","origPanel","clone","_this","appendPanelElement","removeClonedPanelsAfter","maximumNextVisiblePosition","minimumPrevVisiblePosition","firstPanel","clonedPanels_1","cloneBasePos","clonedPanelPos","setPosition","lastReplacePosition","_b","reverse","panelPosition","panelSize","replacePosition","setPrevPanel","setNextPanel","defaultPanel","defaultPosition","summedPanelSize","nextPanelPos","panelPos","hangerPos","parsedBounce","isArray","parsedVal","axis","newPosition","pause","PanInput","scale","prevState","delta","direction","targetPanel","nextState","e","context","tslib_1","triggerEvent","transitTo","onSuccess","onStopped","onChange","State","flicking","offset","inputEvent","offsetX","offsetY","viewport","getCameraPosition","releaseEvent","castToReadonlyPanel","clickedElement","srcEvent","clickedPanel","findPanelOf","cameraPosition","clickedPanelPosition","selectedIndex","getIndex","selectedPanel","_super","onEnter","moveToPanel","stopCamera","isNext","swipeDistance","swipeAngle","deltaX","atan","deltaY","PI","overThreshold","moveTo","getHangerPosition","halfGap","minimumDistanceToChange","durationOption","panelToMove","findNearestPanel","count","adjacentPanel","getNextPanel","getPrevPanel","firstClonedPanel","lapped","eventType","isTrusted","IdleState","nextStateType","currentState","type","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onHold","onRelease","onAnimationEnd","onFinish","eventName","params","stateMachine","getState","progress","getProgress","canceled","trigger","merge","holding","callback","inputOffset","prevPos","cameraChange","looped","getScrollAreaSize","currentDirection","previousPosition","estimatedPosition","currentPosition","eventResult","prevIndex","fire","eventContext","isCircular","realtiveHangerPosition","cameraDist","isOnNext","scrollSize","prevAnchorPosition","nextAnchorPosition","outsetRange","panelCount","getPanelCount","prevCloneIndex","relativeIndex","floor","relativePanelPosition","outsetProgress","rightRelativePanelPosition","visibleSize","visibleRatio","focus","update","updateFunction","eachPanel","originalPrevPanel","originalNextPanel","querySelector","nodeName","nodeType","getPrevIndex","getNextIndex","getPanel","panelIndex","currentIndex","findNearestIdenticalPanel","getAllPanels","filter","playing","outerHTML","restore","plugins","newPlugins","plugin","init","currentPlugins","removedPlugins","setInitialState","initViewport","listenInput","listenResize","StateMachine","firstChild","Viewport","handlers","connectAxesHandler","addEventListener","Flicking","Component"],"mappings":"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"}